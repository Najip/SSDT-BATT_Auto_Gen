/*
 * Intel ACPI Component Architecture
 * AML/ASL+ Disassembler version 20180427 (64-bit version)(RM)
 * Copyright (c) 2000 - 2018 Intel Corporation
 * 
 * Disassembling to symbolic ASL+ operators
 *
 * Disassembly of /Volumes/Data/eric/Downloads/EFI/CLOVER/ACPI/DSDT.aml, Wed Oct 28 22:27:14 2020
 *
 * Original Table Header:
 *     Signature        "DSDT"
 *     Length           0x00032C8C (208012)
 *     Revision         0x02
 *     Checksum         0x3D
 *     OEM ID           "ACRSYS"
 *     OEM Table ID     "ACRPRDCT"
 *     OEM Revision     0x01072009 (17244169)
 *     Compiler ID      "INTL"
 *     Compiler Version 0x20160422 (538313762)
 */
DefinitionBlock ("", "DSDT", 2, "ACRSYS", "ACRPRDCT", 0x01072009)
{
    External (_GPE.AL6F, MethodObj)    // 0 Arguments (from opcode)
    External (_GPE.HLVT, MethodObj)    // 0 Arguments (from opcode)
    External (_GPE.P0L6, MethodObj)    // 0 Arguments (from opcode)
    External (_GPE.P1L6, MethodObj)    // 0 Arguments (from opcode)
    External (_GPE.P2L6, MethodObj)    // 0 Arguments (from opcode)
    External (_GPE.TBNF, MethodObj)    // 0 Arguments (from opcode)
    External (_PR_.BGIA, UnknownObj)    // (from opcode)
    External (_PR_.BGMA, UnknownObj)    // (from opcode)
    External (_PR_.BGMS, UnknownObj)    // (from opcode)
    External (_PR_.CFGD, UnknownObj)    // (from opcode)
    External (_PR_.CPPC, IntObj)    // (from opcode)
    External (_PR_.DSAE, UnknownObj)    // (from opcode)
    External (_PR_.DTS1, UnknownObj)    // (from opcode)
    External (_PR_.DTS2, UnknownObj)    // (from opcode)
    External (_PR_.DTS3, UnknownObj)    // (from opcode)
    External (_PR_.DTS4, UnknownObj)    // (from opcode)
    External (_PR_.DTSE, UnknownObj)    // (from opcode)
    External (_PR_.DTSF, UnknownObj)    // (from opcode)
    External (_PR_.DTSI, IntObj)    // (from opcode)
    External (_PR_.ELNG, UnknownObj)    // (from opcode)
    External (_PR_.EMNA, UnknownObj)    // (from opcode)
    External (_PR_.EPCS, UnknownObj)    // (from opcode)
    External (_PR_.HWPI, IntObj)    // (from opcode)
    External (_PR_.PDTS, UnknownObj)    // (from opcode)
    External (_PR_.PKGA, UnknownObj)    // (from opcode)
    External (_PR_.POWS, UnknownObj)    // (from opcode)
    External (_PR_.PR00, DeviceObj)    // (from opcode)
    External (_PR_.PR00.LPSS, PkgObj)    // (from opcode)
    External (_PR_.PR00.TPSS, PkgObj)    // (from opcode)
    External (_PR_.TRPD, UnknownObj)    // (from opcode)
    External (_PR_.TRPF, UnknownObj)    // (from opcode)
    External (_SB_.ARFB, UnknownObj)    // (from opcode)
    External (_SB_.IETM, DeviceObj)    // (from opcode)
    External (_SB_.MSST, UnknownObj)    // (from opcode)
    External (_SB_.PCI0.GFX0.ALSI, UnknownObj)    // (from opcode)
    External (_SB_.PCI0.GFX0.CBLV, UnknownObj)    // (from opcode)
    External (_SB_.PCI0.GFX0.CDCK, UnknownObj)    // (from opcode)
    External (_SB_.PCI0.GFX0.CLID, UnknownObj)    // (from opcode)
    External (_SB_.PCI0.GFX0.DD01, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.GFX0.DD02, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.GFX0.DD03, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.GFX0.DD04, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.GFX0.DD05, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.GFX0.DD06, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.GFX0.DD07, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.GFX0.DD08, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.GFX0.DD1F, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.GFX0.GSCI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PCI0.GFX0.GSSE, UnknownObj)    // (from opcode)
    External (_SB_.PCI0.GFX0.IUEH, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PCI0.GFX0.STAT, UnknownObj)    // (from opcode)
    External (_SB_.PCI0.GFX0.TCHE, UnknownObj)    // (from opcode)
    External (_SB_.PCI0.HDAS.PPMS, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PCI0.HDAS.PS0X, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PCI0.HDAS.PS3X, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PCI0.LPCB.H_EC.CHRG, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.PAUD.PUAM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PCI0.PEG0.HPME, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PCI0.PEG1.HPME, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PCI0.PEG2.HPME, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PCI0.RP05.PWRG, UnknownObj)    // Warning: Unknown object
    External (_SB_.PCI0.RP05.RSTG, UnknownObj)    // Warning: Unknown object
    External (_SB_.PCI0.RP05.SCLK, UnknownObj)    // Warning: Unknown object
    External (_SB_.PCI0.RP09.PWRG, UnknownObj)    // Warning: Unknown object
    External (_SB_.PCI0.RP09.RSTG, UnknownObj)    // Warning: Unknown object
    External (_SB_.PCI0.RP09.SCLK, UnknownObj)    // Warning: Unknown object
    External (_SB_.PCI0.RP13.PWRG, UnknownObj)    // Warning: Unknown object
    External (_SB_.PCI0.RP13.RSTG, UnknownObj)    // Warning: Unknown object
    External (_SB_.PCI0.RP13.SCLK, UnknownObj)    // Warning: Unknown object
    External (_SB_.PCI0.RP17.PWRG, UnknownObj)    // Warning: Unknown object
    External (_SB_.PCI0.RP17.RSTG, UnknownObj)    // Warning: Unknown object
    External (_SB_.PCI0.RP17.SCLK, UnknownObj)    // Warning: Unknown object
    External (_SB_.PCI0.SAT0.SDSM, MethodObj)    // 4 Arguments (from opcode)
    External (_SB_.PCI0.XHC_.DUAM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PCI0.XHC_.PS0X, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PCI0.XHC_.PS3X, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PCI0.XHC_.RHUB.INIR, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PCI0.XHC_.RHUB.PS0X, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PCI0.XHC_.RHUB.PS2X, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PCI0.XHC_.RHUB.PS3X, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.TPM_.PTS_, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.UBTC, DeviceObj)    // (from opcode)
    External (_SB_.UBTC.CCI0, UnknownObj)    // (from opcode)
    External (_SB_.UBTC.CCI1, UnknownObj)    // (from opcode)
    External (_SB_.UBTC.CCI2, UnknownObj)    // (from opcode)
    External (_SB_.UBTC.CCI3, UnknownObj)    // (from opcode)
    External (_SB_.UBTC.MGI0, UnknownObj)    // (from opcode)
    External (_SB_.UBTC.MGI1, UnknownObj)    // (from opcode)
    External (_SB_.UBTC.MGI2, UnknownObj)    // (from opcode)
    External (_SB_.UBTC.MGI3, UnknownObj)    // (from opcode)
    External (_SB_.UBTC.MGI4, UnknownObj)    // (from opcode)
    External (_SB_.UBTC.MGI5, UnknownObj)    // (from opcode)
    External (_SB_.UBTC.MGI6, UnknownObj)    // (from opcode)
    External (_SB_.UBTC.MGI7, UnknownObj)    // (from opcode)
    External (_SB_.UBTC.MGI8, UnknownObj)    // (from opcode)
    External (_SB_.UBTC.MGI9, UnknownObj)    // (from opcode)
    External (_SB_.UBTC.MGIA, UnknownObj)    // (from opcode)
    External (_SB_.UBTC.MGIB, UnknownObj)    // (from opcode)
    External (_SB_.UBTC.MGIC, UnknownObj)    // (from opcode)
    External (_SB_.UBTC.MGID, UnknownObj)    // (from opcode)
    External (_SB_.UBTC.MGIE, UnknownObj)    // (from opcode)
    External (_SB_.UBTC.MGIF, UnknownObj)    // (from opcode)
    External (_TZ_.ETMD, IntObj)    // (from opcode)
    External (_TZ_.FCRN, UnknownObj)    // (from opcode)
    External (_TZ_.TZ00, DeviceObj)    // (from opcode)
    External (_TZ_.TZ01, DeviceObj)    // (from opcode)
    External (ALSE, UnknownObj)    // (from opcode)
    External (BNUM, UnknownObj)    // (from opcode)    // Conflicts with a later declaration
    External (BRTL, UnknownObj)    // (from opcode)
    External (CRBI, UnknownObj)    // (from opcode)
    External (CTPF, FieldUnitObj)    // (from opcode)
    External (D8XH, UnknownObj)    // (from opcode)
    External (DIDX, UnknownObj)    // (from opcode)
    External (GSMI, UnknownObj)    // (from opcode)
    External (IGDS, UnknownObj)    // (from opcode)
    External (LHIH, UnknownObj)    // (from opcode)
    External (LIDS, UnknownObj)    // (from opcode)
    External (LLOW, UnknownObj)    // (from opcode)
    External (M32B, UnknownObj)    // (from opcode)
    External (M32L, UnknownObj)    // (from opcode)
    External (M64B, UnknownObj)    // (from opcode)
    External (M64L, UnknownObj)    // (from opcode)
    External (MDBG, MethodObj)    // 1 Arguments (from opcode)
    External (P0WK, UnknownObj)    // (from opcode)
    External (P1GP, UnknownObj)    // (from opcode)
    External (P1WK, UnknownObj)    // (from opcode)
    External (P2GP, UnknownObj)    // (from opcode)
    External (P2WK, UnknownObj)    // (from opcode)
    External (PC00, IntObj)    // (from opcode)
    External (PC01, UnknownObj)    // (from opcode)
    External (PC02, UnknownObj)    // (from opcode)
    External (PC03, UnknownObj)    // (from opcode)
    External (PC04, UnknownObj)    // (from opcode)
    External (PC05, UnknownObj)    // (from opcode)
    External (PC06, UnknownObj)    // (from opcode)
    External (PC07, UnknownObj)    // (from opcode)
    External (PC08, UnknownObj)    // (from opcode)
    External (PC09, UnknownObj)    // (from opcode)
    External (PC10, UnknownObj)    // (from opcode)
    External (PC11, UnknownObj)    // (from opcode)
    External (PC12, UnknownObj)    // (from opcode)
    External (PC13, UnknownObj)    // (from opcode)
    External (PC14, UnknownObj)    // (from opcode)
    External (PC15, UnknownObj)    // (from opcode)
    External (RP05.PWRG, UnknownObj)    // (from opcode)
    External (RP05.RSTG, UnknownObj)    // (from opcode)
    External (RP05.SCLK, UnknownObj)    // (from opcode)
    External (RP09.PWRG, UnknownObj)    // (from opcode)
    External (RP09.RSTG, UnknownObj)    // (from opcode)
    External (RP09.SCLK, UnknownObj)    // (from opcode)
    External (RP13.PWRG, UnknownObj)    // (from opcode)
    External (RP13.RSTG, UnknownObj)    // (from opcode)
    External (RP13.SCLK, UnknownObj)    // (from opcode)
    External (RP17.PWRG, UnknownObj)    // (from opcode)
    External (RP17.RSTG, UnknownObj)    // (from opcode)
    External (RP17.SCLK, UnknownObj)    // (from opcode)
    External (SAT0.NVM1.VLPM, UnknownObj)    // (from opcode)
    External (SAT0.NVM2.VLPM, UnknownObj)    // (from opcode)
    External (SAT0.NVM3.VLPM, UnknownObj)    // (from opcode)
    External (SGGP, UnknownObj)    // (from opcode)
    External (SGMD, UnknownObj)    // (from opcode)

    Name (PEBS, 0xE0000000)
    Name (PELN, 0x10000000)
    Name (MCHB, 0xFED10000)
    Name (MCHL, 0x8000)
    Name (EGPB, 0xFED19000)
    Name (EGPL, 0x1000)
    Name (DMIB, 0xFED18000)
    Name (DMIL, 0x1000)
    Name (VTBS, 0xFED90000)
    Name (VTLN, 0x4000)
    Name (CPVD, Zero)
    Name (SMIP, 0xB2)
    Name (PMBA, 0x1800)
    Name (SMCR, 0x1830)
    Name (TCBR, 0xFED08000)
    Name (TCLT, 0x1000)
    Name (SMBL, 0x20)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (FMBL, One)
    Name (FDTP, 0x02)
    Name (FUPS, 0x04)
    Name (FUWS, 0x03)
    Name (FEMD, 0x04)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, Zero)
    Name (SHPC, One)
    Name (PEPM, Zero)
    Name (PEER, Zero)
    Name (PECS, Zero)
    Name (ITKE, Zero)
    Name (MBEC, 0xFFFF)
    Name (CSMI, 0x61)
    Name (DSSP, Zero)
    Name (FHPP, Zero)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, Zero)
    Name (DTPT, One)
    Name (TTDP, One)
    Name (TPMB, 0xFFFFFFFF)
    Name (TPMC, 0xFFFFFFFF)
    Name (TPMM, 0xFED40000)
    Name (FTPM, 0xFED40040)
    Name (PPIM, 0x7A95B418)
    Name (PPIL, 0x1C)
    Name (AMDT, Zero)
    Name (TPMF, One)
    Name (PPIV, One)
    Name (AOSS, 0xB2)
    Name (AOSM, 0xAC)
    Name (TPVD, 0xFF)
    Name (UWAK, Zero)
    Name (WSMI, 0xB2)
    Name (SNUM, 0x91)
    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0xC400)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (GNVS, SystemMemory, 0x7A91D000, 0x0792)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        P80D,   32, 
        PWRS,   8, 
        DBGS,   8, 
        THOF,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        DTSF,   8, 
        Offset (0x1E), 
        BNUM,   8, 
        Offset (0x20), 
        Offset (0x21), 
        Offset (0x22), 
        Offset (0x23), 
        Offset (0x24), 
        Offset (0x25), 
        REVN,   8, 
        APIC,   8, 
        TCNT,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        PPMF,   32, 
        C67L,   8, 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        CMCP,   8, 
        CIRP,   8, 
        SMSC,   8, 
        W381,   8, 
        SMC1,   8, 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        MEFE,   8, 
        DSTS,   8, 
        MORD,   8, 
        TCGP,   8, 
        PPRP,   32, 
        PPRQ,   8, 
        LPPR,   8, 
        IDEM,   8, 
        PLID,   8, 
        BTYP,   8, 
        OSCC,   8, 
        NEXP,   8, 
        SBV1,   8, 
        SBV2,   8, 
        ECON,   8, 
        DSEN,   8, 
        GPIC,   8, 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        VFN2,   8, 
        VFN3,   8, 
        VFN4,   8, 
        VFN5,   8, 
        VFN6,   8, 
        VFN7,   8, 
        VFN8,   8, 
        VFN9,   8, 
        ATMC,   8, 
        PTMC,   8, 
        PNHM,   32, 
        TBAL,   32, 
        TBAH,   32, 
        RTIP,   8, 
        TSOD,   8, 
        PFLV,   8, 
        BREV,   8, 
        PDTS,   8, 
        PKGA,   8, 
        PAMT,   8, 
        AC0F,   8, 
        AC1F,   8, 
        DTS3,   8, 
        DTS4,   8, 
        LTR1,   8, 
        LTR2,   8, 
        LTR3,   8, 
        LTR4,   8, 
        LTR5,   8, 
        LTR6,   8, 
        LTR7,   8, 
        LTR8,   8, 
        LTR9,   8, 
        LTRA,   8, 
        LTRB,   8, 
        LTRC,   8, 
        LTRD,   8, 
        LTRE,   8, 
        LTRF,   8, 
        LTRG,   8, 
        LTRH,   8, 
        LTRI,   8, 
        LTRJ,   8, 
        LTRK,   8, 
        LTRL,   8, 
        LTRM,   8, 
        LTRN,   8, 
        LTRO,   8, 
        OBF1,   8, 
        OBF2,   8, 
        OBF3,   8, 
        OBF4,   8, 
        OBF5,   8, 
        OBF6,   8, 
        OBF7,   8, 
        OBF8,   8, 
        OBF9,   8, 
        OBFA,   8, 
        OBFB,   8, 
        OBFC,   8, 
        OBFD,   8, 
        OBFE,   8, 
        OBFF,   8, 
        OBFG,   8, 
        OBFH,   8, 
        OBFI,   8, 
        OBFJ,   8, 
        OBFK,   8, 
        OBFL,   8, 
        OBFM,   8, 
        OBFN,   8, 
        OBFO,   8, 
        XTUB,   32, 
        XTUS,   32, 
        XMPB,   32, 
        DDRF,   8, 
        RTD3,   8, 
        PEP0,   8, 
        PEP3,   8, 
        DPTF,   8, 
        DCFE,   16, 
        SADE,   8, 
        SACR,   8, 
        SAHT,   8, 
        CPUS,   8, 
        CTDP,   8, 
        LPMP,   8, 
        LPMV,   8, 
        ECEU,   8, 
        TGFG,   16, 
        MEMD,   8, 
        ATRA,   8, 
        PTRA,   8, 
        MEMC,   8, 
        MEMH,   8, 
        FND1,   8, 
        FND2,   8, 
        AMBD,   8, 
        AMAT,   8, 
        AMPT,   8, 
        AMCT,   8, 
        AMHT,   8, 
        SKDE,   8, 
        SKAT,   8, 
        SKPT,   8, 
        SKCT,   8, 
        SKHT,   8, 
        EFDE,   8, 
        EFAT,   8, 
        EFPT,   8, 
        EFCT,   8, 
        EFHT,   8, 
        VRDE,   8, 
        VRAT,   8, 
        VRPT,   8, 
        VRCT,   8, 
        VRHT,   8, 
        DPAP,   8, 
        DPPP,   8, 
        DPCP,   8, 
        DCMP,   8, 
        TRTV,   8, 
        LPOE,   8, 
        LPOP,   8, 
        LPOS,   8, 
        LPOW,   8, 
        LPER,   8, 
        PPSZ,   32, 
        DISE,   8, 
        BGMA,   64, 
        BGMS,   8, 
        BGIA,   16, 
        IRMC,   8, 
        NFCE,   8, 
        CHEN,   8, 
        S0ID,   8, 
        CTDB,   8, 
        DKSM,   8, 
        SIO1,   16, 
        SIO2,   16, 
        SPBA,   16, 
        SEC0,   32, 
        SEC1,   32, 
        SEC2,   32, 
        SEC3,   32, 
        SEC4,   32, 
        SEC5,   32, 
        SEC6,   32, 
        SEC7,   32, 
        SEC8,   32, 
        Offset (0x1F4), 
        WIFD,   8, 
        WFAT,   8, 
        WFPT,   8, 
        WFCT,   8, 
        WFHT,   8, 
        PWRE,   8, 
        Offset (0x1FC), 
        PPPR,   16, 
        PBPE,   8, 
        VSPE,   8, 
        Offset (0x203), 
        XHPR,   8, 
        RIC0,   8, 
        GBSX,   8, 
        IUBE,   8, 
        IUCE,   8, 
        IUDE,   8, 
        ECNO,   8, 
        AUDD,   16, 
        IC0D,   16, 
        IC1D,   16, 
        IC1S,   16, 
        VRRD,   16, 
        PSCP,   8, 
        I20D,   16, 
        I21D,   16, 
        RCG0,   16, 
        RCG1,   16, 
        ECDB,   8, 
        P2ME,   8, 
        P2MK,   8, 
        SSH0,   16, 
        SSL0,   16, 
        SSD0,   16, 
        FMH0,   16, 
        FML0,   16, 
        FMD0,   16, 
        FPH0,   16, 
        FPL0,   16, 
        FPD0,   16, 
        SSH1,   16, 
        SSL1,   16, 
        SSD1,   16, 
        FMH1,   16, 
        FML1,   16, 
        FMD1,   16, 
        FPH1,   16, 
        FPL1,   16, 
        FPD1,   16, 
        M0C0,   16, 
        M1C0,   16, 
        M2C0,   16, 
        M0C1,   16, 
        M1C1,   16, 
        M2C1,   16, 
        M0C2,   16, 
        M1C2,   16, 
        M0C3,   16, 
        M1C3,   16, 
        M0C4,   16, 
        M1C4,   16, 
        M0C5,   16, 
        M1C5,   16, 
        TBSF,   8, 
        GIRQ,   32, 
        DMTP,   8, 
        DMTD,   8, 
        DMSH,   8, 
        SHSB,   8, 
        PLCS,   8, 
        PLVL,   16, 
        GN1E,   8, 
        G1AT,   8, 
        G1PT,   8, 
        G1CT,   8, 
        G1HT,   8, 
        GN2E,   8, 
        G2AT,   8, 
        G2PT,   8, 
        G2CT,   8, 
        G2HT,   8, 
        WWSD,   8, 
        CVSD,   8, 
        SSDD,   8, 
        INLD,   8, 
        IFAT,   8, 
        IFPT,   8, 
        IFCT,   8, 
        IFHT,   8, 
        SDWE,   8, 
        USBH,   8, 
        BCV4,   8, 
        WTV0,   8, 
        WTV1,   8, 
        APFU,   8, 
        SOHP,   8, 
        GP5F,   8, 
        NOHP,   8, 
        TBSE,   8, 
        WKFN,   8, 
        PEPC,   32, 
        VRSD,   16, 
        PB1E,   8, 
        GNID,   8, 
        WAND,   8, 
        WWAT,   8, 
        WWPT,   8, 
        WWCT,   8, 
        WWHT,   8, 
        Offset (0x2A3), 
        MPL0,   16, 
        CHGE,   8, 
        SAC3,   8, 
        MEM3,   8, 
        AMC3,   8, 
        SKC3,   8, 
        EFC3,   8, 
        VRC3,   8, 
        WFC3,   8, 
        G1C3,   8, 
        G2C3,   8, 
        IFC3,   8, 
        WWC3,   8, 
        WGC3,   8, 
        SPST,   8, 
        PERE,   8, 
        PEAT,   8, 
        PEPV,   8, 
        PECR,   8, 
        PEC3,   8, 
        PEHT,   8, 
        GN3E,   8, 
        G3AT,   8, 
        G3PT,   8, 
        G3CT,   8, 
        G3HT,   8, 
        GN4E,   8, 
        G4AT,   8, 
        G4PT,   8, 
        G4CT,   8, 
        G4HT,   8, 
        GN5E,   8, 
        G5AT,   8, 
        G5PT,   8, 
        G5CT,   8, 
        G5HT,   8, 
        GN6E,   8, 
        G6AT,   8, 
        G6PT,   8, 
        G6CT,   8, 
        G6HT,   8, 
        ECLP,   8, 
        G3C3,   8, 
        G4C3,   8, 
        G5C3,   8, 
        G6C3,   8, 
        TSP1,   8, 
        TSP2,   8, 
        TSP3,   8, 
        TSP4,   8, 
        TSP5,   8, 
        TSP6,   8, 
        TSP7,   8, 
        TSP8,   8, 
        SSP1,   8, 
        SSP2,   8, 
        SSP3,   8, 
        SSP4,   8, 
        SSP5,   8, 
        SSP6,   8, 
        SSP7,   8, 
        SSP8,   8, 
        MEMS,   8, 
        STGE,   8, 
        STAT,   8, 
        STPT,   8, 
        STCT,   8, 
        STC3,   8, 
        STHT,   8, 
        VSP1,   8, 
        V1AT,   8, 
        V1PV,   8, 
        V1CR,   8, 
        V1C3,   8, 
        V1HT,   8, 
        VSP2,   8, 
        V2AT,   8, 
        V2PV,   8, 
        V2CR,   8, 
        V2C3,   8, 
        V2HT,   8, 
        S1DE,   8, 
        S1AT,   8, 
        S1PT,   8, 
        S1CT,   8, 
        S1HT,   8, 
        S2DE,   8, 
        S2AT,   8, 
        S2PT,   8, 
        S2CT,   8, 
        S2HT,   8, 
        S3DE,   8, 
        S3AT,   8, 
        S3PT,   8, 
        S3CT,   8, 
        S3HT,   8, 
        S4DE,   8, 
        S4AT,   8, 
        S4PT,   8, 
        S4CT,   8, 
        S4HT,   8, 
        S5DE,   8, 
        S5AT,   8, 
        S5PT,   8, 
        S5CT,   8, 
        S5HT,   8, 
        S6DE,   8, 
        S6AT,   8, 
        S6PT,   8, 
        S6CT,   8, 
        S6HT,   8, 
        S7DE,   8, 
        S7AT,   8, 
        S7PT,   8, 
        S7CT,   8, 
        S7HT,   8, 
        S1S3,   8, 
        S2S3,   8, 
        S3S3,   8, 
        S4S3,   8, 
        S5S3,   8, 
        S6S3,   8, 
        S7S3,   8, 
        ICAE,   8, 
        PSME,   8, 
        PDT1,   8, 
        PLM1,   32, 
        PTW1,   32, 
        PDT2,   8, 
        PLM2,   32, 
        PTW2,   32, 
        DDT1,   8, 
        DDP1,   8, 
        DLI1,   16, 
        DPL1,   16, 
        DTW1,   32, 
        DMI1,   16, 
        DMA1,   16, 
        DMT1,   16, 
        DDT2,   8, 
        DDP2,   8, 
        DLI2,   16, 
        DPL2,   16, 
        DTW2,   32, 
        DMI2,   16, 
        DMA2,   16, 
        DMT2,   16, 
        WIFE,   8, 
        DOM1,   8, 
        LIM1,   16, 
        TIM1,   32, 
        DOM2,   8, 
        LIM2,   16, 
        TIM2,   32, 
        DOM3,   8, 
        LIM3,   16, 
        TIM3,   32, 
        TRD0,   8, 
        TRL0,   8, 
        TRD1,   8, 
        TRL1,   8, 
        WDM1,   8, 
        CID1,   16, 
        WDM2,   8, 
        CID2,   16, 
        Offset (0x378), 
        APPE,   8, 
        MPL1,   16, 
        MPL2,   16, 
        SDS0,   8, 
        SDS1,   8, 
        SDS2,   8, 
        SDS3,   8, 
        SDS4,   8, 
        SDS5,   8, 
        SDS6,   8, 
        SDS7,   8, 
        SDS8,   8, 
        SDS9,   8, 
        SDSA,   8, 
        TPLB,   8, 
        TPLH,   16, 
        WTVX,   8, 
        WITX,   8, 
        GPTD,   8, 
        GDBT,   16, 
        UTKX,   8, 
        SPTD,   8, 
        GEXN,   8, 
        TBTS,   8, 
        TBWS,   8, 
        AICS,   8, 
        TARS,   8, 
        FPAT,   8, 
        FPEN,   8, 
        FPGN,   32, 
        FPLV,   8, 
        CPAD,   16, 
        CPAB,   8, 
        TNAT,   8, 
        CPGN,   32, 
        CF2T,   8, 
        TDGS,   8, 
        DCSC,   8, 
        DCKE,   8, 
        UDCK,   8, 
        SUDK,   8, 
        OHPN,   8, 
        GHPN,   8, 
        EGPC,   32, 
        EGPV,   8, 
        TBDT,   32, 
        ATLB,   32, 
        SDM0,   8, 
        SDM1,   8, 
        SDM2,   8, 
        SDM3,   8, 
        SDM4,   8, 
        SDM5,   8, 
        SDM6,   8, 
        SDM7,   8, 
        SDM8,   8, 
        SDM9,   8, 
        SDMA,   8, 
        USTP,   8, 
        SSHI,   16, 
        SSLI,   16, 
        SSDI,   16, 
        FMHI,   16, 
        FMLI,   16, 
        FMDI,   16, 
        FPHI,   16, 
        FPLI,   16, 
        FPDI,   16, 
        M0CI,   16, 
        M1CI,   16, 
        M0CS,   16, 
        M1CS,   16, 
        M0CU,   16, 
        M1CU,   16, 
        CAMT,   8, 
        IVDF,   8, 
        IFWG,   64, 
        IVWS,   8, 
        IVPR,   8, 
        DIVO,   16, 
        DIVF,   16, 
        IVAD,   8, 
        IVRS,   8, 
        IVDG,   64, 
        DSPR,   8, 
        DDSO,   16, 
        DDSF,   16, 
        DSAD,   8, 
        DSRS,   8, 
        DVDG,   64, 
        EIDF,   8, 
        GFPS,   32, 
        GFPI,   32, 
        GNSM,   8, 
        GNSC,   8, 
        GGNR,   32, 
        GBTW,   32, 
        GBTK,   32, 
        GBTI,   32, 
        GPDI,   32, 
        GPLI,   32, 
        CL00,   8, 
        CL01,   8, 
        CL02,   8, 
        CL03,   8, 
        L0EN,   8, 
        L1EN,   8, 
        L2EN,   8, 
        L3EN,   8, 
        CDIV,   8, 
        C0TP,   8, 
        C0CV,   8, 
        C0GP,   8, 
        C0IB,   8, 
        C0IA,   16, 
        C0P0,   8, 
        C0P1,   8, 
        C0P2,   8, 
        C0P3,   8, 
        C0G0,   8, 
        C0G1,   8, 
        C0G2,   8, 
        C0G3,   8, 
        C0F0,   8, 
        C0F1,   8, 
        C0F2,   8, 
        C0F3,   8, 
        C0A0,   8, 
        C0A1,   8, 
        C0A2,   8, 
        C0A3,   8, 
        C0I0,   8, 
        C0I1,   8, 
        C0I2,   8, 
        C0I3,   8, 
        C0PL,   8, 
        C1TP,   8, 
        C1CV,   8, 
        C1GP,   8, 
        C1IB,   8, 
        C1IA,   16, 
        C1P0,   8, 
        C1P1,   8, 
        C1P2,   8, 
        C1P3,   8, 
        C1G0,   8, 
        C1G1,   8, 
        C1G2,   8, 
        C1G3,   8, 
        C1F0,   8, 
        C1F1,   8, 
        C1F2,   8, 
        C1F3,   8, 
        C1A0,   8, 
        C1A1,   8, 
        C1A2,   8, 
        C1A3,   8, 
        C1I0,   8, 
        C1I1,   8, 
        C1I2,   8, 
        C1I3,   8, 
        C1PL,   8, 
        C2TP,   8, 
        C2CV,   8, 
        C2GP,   8, 
        C2IB,   8, 
        C2IA,   16, 
        C2P0,   8, 
        C2P1,   8, 
        C2P2,   8, 
        C2P3,   8, 
        C2G0,   8, 
        C2G1,   8, 
        C2G2,   8, 
        C2G3,   8, 
        C2F0,   8, 
        C2F1,   8, 
        C2F2,   8, 
        C2F3,   8, 
        C2A0,   8, 
        C2A1,   8, 
        C2A2,   8, 
        C2A3,   8, 
        C2I0,   8, 
        C2I1,   8, 
        C2I2,   8, 
        C2I3,   8, 
        C2PL,   8, 
        C3TP,   8, 
        C3CV,   8, 
        C3GP,   8, 
        C3IB,   8, 
        C3IA,   16, 
        C3P0,   8, 
        C3P1,   8, 
        C3P2,   8, 
        C3P3,   8, 
        C3G0,   8, 
        C3G1,   8, 
        C3G2,   8, 
        C3G3,   8, 
        C3F0,   8, 
        C3F1,   8, 
        C3F2,   8, 
        C3F3,   8, 
        C3A0,   8, 
        C3A1,   8, 
        C3A2,   8, 
        C3A3,   8, 
        C3I0,   8, 
        C3I1,   8, 
        C3I2,   8, 
        C3I3,   8, 
        C3PL,   8, 
        L0SM,   8, 
        L0H0,   8, 
        L0H1,   8, 
        L0H2,   8, 
        L0H3,   8, 
        L0H4,   8, 
        L0H5,   8, 
        L0H6,   8, 
        L0H7,   8, 
        L0H8,   8, 
        L0PL,   8, 
        L0M0,   8, 
        L0M1,   8, 
        L0M2,   8, 
        L0M3,   8, 
        L0M4,   8, 
        L0M5,   8, 
        L0M6,   8, 
        L0M7,   8, 
        L0M8,   8, 
        L0M9,   8, 
        L0MA,   8, 
        L0MB,   8, 
        L0MC,   8, 
        L0MD,   8, 
        L0ME,   8, 
        L0MF,   8, 
        L0DI,   8, 
        L0BS,   8, 
        L0A0,   16, 
        L0A1,   16, 
        L0A2,   16, 
        L0A3,   16, 
        L0A4,   16, 
        L0A5,   16, 
        L0A6,   16, 
        L0A7,   16, 
        L0A8,   16, 
        L0A9,   16, 
        L0AA,   16, 
        L0AB,   16, 
        L0D0,   8, 
        L0D1,   8, 
        L0D2,   8, 
        L0D3,   8, 
        L0D4,   8, 
        L0D5,   8, 
        L0D6,   8, 
        L0D7,   8, 
        L0D8,   8, 
        L0D9,   8, 
        L0DA,   8, 
        L0DB,   8, 
        L0DV,   8, 
        L0CV,   8, 
        L0LU,   8, 
        L0NL,   8, 
        L0EE,   8, 
        L0VC,   8, 
        L0FS,   8, 
        L0DG,   8, 
        L0C0,   8, 
        L0C1,   8, 
        L0C2,   8, 
        L0C3,   8, 
        L0CK,   32, 
        L0CL,   8, 
        L1SM,   8, 
        L1H0,   8, 
        L1H1,   8, 
        L1H2,   8, 
        L1H3,   8, 
        L1H4,   8, 
        L1H5,   8, 
        L1H6,   8, 
        L1H7,   8, 
        L1H8,   8, 
        L1PL,   8, 
        L1M0,   8, 
        L1M1,   8, 
        L1M2,   8, 
        L1M3,   8, 
        L1M4,   8, 
        L1M5,   8, 
        L1M6,   8, 
        L1M7,   8, 
        L1M8,   8, 
        L1M9,   8, 
        L1MA,   8, 
        L1MB,   8, 
        L1MC,   8, 
        L1MD,   8, 
        L1ME,   8, 
        L1MF,   8, 
        L1DI,   8, 
        L1BS,   8, 
        L1A0,   16, 
        L1A1,   16, 
        L1A2,   16, 
        L1A3,   16, 
        L1A4,   16, 
        L1A5,   16, 
        L1A6,   16, 
        L1A7,   16, 
        L1A8,   16, 
        L1A9,   16, 
        L1AA,   16, 
        L1AB,   16, 
        L1D0,   8, 
        L1D1,   8, 
        L1D2,   8, 
        L1D3,   8, 
        L1D4,   8, 
        L1D5,   8, 
        L1D6,   8, 
        L1D7,   8, 
        L1D8,   8, 
        L1D9,   8, 
        L1DA,   8, 
        L1DB,   8, 
        L1DV,   8, 
        L1CV,   8, 
        L1LU,   8, 
        L1NL,   8, 
        L1EE,   8, 
        L1VC,   8, 
        L1FS,   8, 
        L1DG,   8, 
        L1C0,   8, 
        L1C1,   8, 
        L1C2,   8, 
        L1C3,   8, 
        L1CK,   32, 
        L1CL,   8, 
        L2SM,   8, 
        L2H0,   8, 
        L2H1,   8, 
        L2H2,   8, 
        L2H3,   8, 
        L2H4,   8, 
        L2H5,   8, 
        L2H6,   8, 
        L2H7,   8, 
        L2H8,   8, 
        L2PL,   8, 
        L2M0,   8, 
        L2M1,   8, 
        L2M2,   8, 
        L2M3,   8, 
        L2M4,   8, 
        L2M5,   8, 
        L2M6,   8, 
        L2M7,   8, 
        L2M8,   8, 
        L2M9,   8, 
        L2MA,   8, 
        L2MB,   8, 
        L2MC,   8, 
        L2MD,   8, 
        L2ME,   8, 
        L2MF,   8, 
        L2DI,   8, 
        L2BS,   8, 
        L2A0,   16, 
        L2A1,   16, 
        L2A2,   16, 
        L2A3,   16, 
        L2A4,   16, 
        L2A5,   16, 
        L2A6,   16, 
        L2A7,   16, 
        L2A8,   16, 
        L2A9,   16, 
        L2AA,   16, 
        L2AB,   16, 
        L2D0,   8, 
        L2D1,   8, 
        L2D2,   8, 
        L2D3,   8, 
        L2D4,   8, 
        L2D5,   8, 
        L2D6,   8, 
        L2D7,   8, 
        L2D8,   8, 
        L2D9,   8, 
        L2DA,   8, 
        L2DB,   8, 
        L2DV,   8, 
        L2CV,   8, 
        L2LU,   8, 
        L2NL,   8, 
        L2EE,   8, 
        L2VC,   8, 
        L2FS,   8, 
        L2DG,   8, 
        L2C0,   8, 
        L2C1,   8, 
        L2C2,   8, 
        L2C3,   8, 
        L2CK,   32, 
        L2CL,   8, 
        L3SM,   8, 
        L3H0,   8, 
        L3H1,   8, 
        L3H2,   8, 
        L3H3,   8, 
        L3H4,   8, 
        L3H5,   8, 
        L3H6,   8, 
        L3H7,   8, 
        L3H8,   8, 
        L3PL,   8, 
        L3M0,   8, 
        L3M1,   8, 
        L3M2,   8, 
        L3M3,   8, 
        L3M4,   8, 
        L3M5,   8, 
        L3M6,   8, 
        L3M7,   8, 
        L3M8,   8, 
        L3M9,   8, 
        L3MA,   8, 
        L3MB,   8, 
        L3MC,   8, 
        L3MD,   8, 
        L3ME,   8, 
        L3MF,   8, 
        L3DI,   8, 
        L3BS,   8, 
        L3A0,   16, 
        L3A1,   16, 
        L3A2,   16, 
        L3A3,   16, 
        L3A4,   16, 
        L3A5,   16, 
        L3A6,   16, 
        L3A7,   16, 
        L3A8,   16, 
        L3A9,   16, 
        L3AA,   16, 
        L3AB,   16, 
        L3D0,   8, 
        L3D1,   8, 
        L3D2,   8, 
        L3D3,   8, 
        L3D4,   8, 
        L3D5,   8, 
        L3D6,   8, 
        L3D7,   8, 
        L3D8,   8, 
        L3D9,   8, 
        L3DA,   8, 
        L3DB,   8, 
        L3DV,   8, 
        L3CV,   8, 
        L3LU,   8, 
        L3NL,   8, 
        L3EE,   8, 
        L3VC,   8, 
        L3FS,   8, 
        L3DG,   8, 
        L3C0,   8, 
        L3C1,   8, 
        L3C2,   8, 
        L3C3,   8, 
        L3CK,   32, 
        L3CL,   8, 
        ECR1,   8, 
        Offset (0x60E), 
        I2SC,   8, 
        ODV0,   8, 
        ODV1,   8, 
        ODV2,   8, 
        ODV3,   8, 
        ODV4,   8, 
        ODV5,   8, 
        UBCB,   32, 
        EMOD,   8, 
        WIFC,   8, 
        Offset (0x622), 
        TPLS,   8, 
        TPDB,   8, 
        TPDH,   16, 
        TPDS,   8, 
        ADPM,   32, 
        AG1L,   64, 
        AG1H,   64, 
        AG2L,   64, 
        AG2H,   64, 
        AG3L,   64, 
        AG3H,   64, 
        HEFE,   8, 
        XDCE,   8, 
        STXE,   8, 
        STX0,   8, 
        STX1,   8, 
        STX2,   8, 
        STX3,   8, 
        STX4,   8, 
        STX5,   8, 
        STX6,   8, 
        STX7,   8, 
        STX8,   8, 
        STX9,   8, 
        RTVM,   8, 
        USTC,   8, 
        BATP,   8, 
        TSDB,   8, 
        DEPC,   8, 
        PDFC,   8, 
        IVCM,   8, 
        HEB1,   32, 
        RBY1,   8, 
        RBY2,   8, 
        SCSS,   8, 
        HAID,   8, 
        NCTC,   8, 
        NCTI,   8, 
        NCTH,   8, 
        HSIO,   8, 
        TPPT,   8, 
        SHAP,   8, 
        EIAP,   8, 
        ZPOD,   8, 
        SRSP,   32, 
        CEDS,   8, 
        EHK3,   8, 
        EHK4,   8, 
        EHK5,   8, 
        EHK6,   8, 
        EHK7,   8, 
        EHK8,   8, 
        VBVP,   8, 
        VBVD,   8, 
        VBHB,   8, 
        VBRL,   8, 
        SMSS,   8, 
        VBST,   8, 
        ADAS,   8, 
        PPBG,   32, 
        AEAB,   8, 
        AHDB,   8, 
        PBSD,   8, 
        DPLL,   8, 
        DPHL,   8, 
        PWIG,   8, 
        MESE,   8, 
        ICAT,   8, 
        ICPV,   8, 
        ICCR,   8, 
        ICC3,   8, 
        ICHT,   8, 
        XSMI,   32, 
        PAPE,   32, 
        PSTW,   32, 
        MWLR,   32, 
        UP8P,   32, 
        MS2R,   32, 
        MS2P,   32, 
        UCSI,   8, 
        UCG1,   32, 
        UCG2,   32, 
        WGUR,   32, 
        WRFE,   8, 
        WRC1,   8, 
        WRC2,   8, 
        WRC3,   8, 
        WRC4,   8, 
        AWVI,   32, 
        Offset (0x6E0), 
        WTSP,   8, 
        WGWS,   8, 
        PIDE,   8, 
        C0VE,   8, 
        C0W0,   8, 
        C0W1,   8, 
        C0W2,   8, 
        C0W3,   8, 
        C0W4,   8, 
        C0W5,   8, 
        C1VE,   8, 
        C1W0,   8, 
        C1W1,   8, 
        C1W2,   8, 
        C1W3,   8, 
        C1W4,   8, 
        C1W5,   8, 
        C2VE,   8, 
        C2W0,   8, 
        C2W1,   8, 
        C2W2,   8, 
        C2W3,   8, 
        C2W4,   8, 
        C2W5,   8, 
        C3VE,   8, 
        C3W0,   8, 
        C3W1,   8, 
        C3W2,   8, 
        C3W3,   8, 
        C3W4,   8, 
        C3W5,   8, 
        L0LE,   8, 
        L0PP,   8, 
        L0VR,   8, 
        L1LE,   8, 
        L1PP,   8, 
        L1VR,   8, 
        L2LE,   8, 
        L2PP,   8, 
        L2VR,   8, 
        L3LE,   8, 
        L3PP,   8, 
        L3VR,   8, 
        WLRP,   8, 
        SSRP,   8, 
        WIPR,   8, 
        Offset (0x71E), 
        UTCM,   8, 
        USME,   8, 
        UPT1,   8, 
        UPT2,   8, 
        TWIN,   8, 
        TRWA,   8, 
        PEWE,   8, 
        Offset (0x74E), 
        ELPM,   32, 
        ELPS,   32, 
        Offset (0x758), 
        UCRT,   8, 
        TBOD,   16, 
        TSXW,   8, 
        VRGP,   32, 
        PVSC,   8, 
        RTBT,   8, 
        RTBC,   8, 
        TBCD,   16, 
        TBTE,   8, 
        RWAN,   8, 
        WDCT,   16, 
        WLCT,   16, 
        WDC2,   16, 
        WMXS,   16, 
        WMNS,   16, 
        SSPC,   8, 
        SSPM,   8, 
        DGCE,   8, 
        DCAT,   8, 
        DCPT,   8, 
        DCCT,   8, 
        DCHT,   8, 
        DCS3,   8, 
        DCSZ,   32, 
        DCL0,   16, 
        DGME,   8, 
        DMAT,   8, 
        DMPT,   8, 
        DMCT,   8, 
        DMHT,   8, 
        DMS3,   8, 
        MCPE,   8, 
        MCSZ,   32, 
        MCL0,   32, 
        PSPE,   8, 
        PBEN,   8, 
        WRTO,   8, 
        AES3,   8
    }

    Device (PSM)
    {
        Name (_HID, EisaId ("INT3420"))  // _HID: Hardware ID
        Name (_UID, Zero)  // _UID: Unique ID
        Name (_STR, Unicode ("Power Sharing Manager"))  // _STR: Description String
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PSME == One))
            {
                Return (0x0F)
            }
            Else
            {
                Return (Zero)
            }
        }

        Name (SPLX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            DerefOf (SPLX [One]) [Zero] = PDT1
            DerefOf (SPLX [One]) [One] = PLM1
            DerefOf (SPLX [One]) [0x02] = PTW1
            DerefOf (SPLX [0x02]) [Zero] = PDT2
            DerefOf (SPLX [0x02]) [One] = PLM2
            DerefOf (SPLX [0x02]) [0x02] = PTW2
            Return (SPLX)
        }

        Name (DPLX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                Package (0x06)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                Package (0x06)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            }
        })
        Method (DPLC, 0, Serialized)
        {
            DerefOf (DPLX [One]) [Zero] = DDT1
            DerefOf (DPLX [One]) [One] = DDP1
            DerefOf (DerefOf (DPLX [One]) [0x02]) [Zero] = DLI1
            DerefOf (DerefOf (DPLX [One]) [0x02]) [One] = DPL1
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x02] = DTW1
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x03] = DMI1
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x04] = DMA1
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x05] = DMT1
            DerefOf (DPLX [0x02]) [Zero] = DDT2
            DerefOf (DPLX [0x02]) [One] = DDP2
            DerefOf (DerefOf (DPLX [0x02]) [0x02]) [Zero] = DLI2
            DerefOf (DerefOf (DPLX [0x02]) [0x02]) [One] = DPL2
            DerefOf (DerefOf (DPLX [0x02]) [0x02]) [0x02] = DTW2
            DerefOf (DerefOf (DPLX [0x02]) [0x02]) [0x03] = DMI2
            DerefOf (DerefOf (DPLX [0x02]) [0x02]) [0x04] = DMA2
            DerefOf (DerefOf (DPLX [0x02]) [0x02]) [0x05] = DMT2
            Return (DPLX)
        }
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PD00, Package (0x2A)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                LNKA, 
                Zero
            }
        })
        Name (AR00, Package (0x2D)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                Zero, 
                0x14
            }
        })
        Name (PD01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD18, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR18, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD19, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR19, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD1A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR1A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03"))  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00)
                }

                Return (PD00)
            }

            OperationRegion (HBUS, PCI_Config, Zero, 0x0100)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                EPEN,   1, 
                    ,   11, 
                EPBR,   20, 
                Offset (0x48), 
                MHEN,   1, 
                    ,   14, 
                MHBR,   17, 
                Offset (0x50), 
                GCLK,   1, 
                Offset (0x54), 
                D0EN,   1, 
                D1F2,   1, 
                D1F1,   1, 
                D1F0,   1, 
                Offset (0x60), 
                PXEN,   1, 
                PXSZ,   2, 
                    ,   23, 
                PXBR,   6, 
                Offset (0x68), 
                DIEN,   1, 
                    ,   11, 
                DIBR,   20, 
                Offset (0x70), 
                    ,   20, 
                MEBR,   12, 
                Offset (0x80), 
                PMLK,   1, 
                    ,   3, 
                PM0H,   2, 
                Offset (0x81), 
                PM1L,   2, 
                    ,   2, 
                PM1H,   2, 
                Offset (0x82), 
                PM2L,   2, 
                    ,   2, 
                PM2H,   2, 
                Offset (0x83), 
                PM3L,   2, 
                    ,   2, 
                PM3H,   2, 
                Offset (0x84), 
                PM4L,   2, 
                    ,   2, 
                PM4H,   2, 
                Offset (0x85), 
                PM5L,   2, 
                    ,   2, 
                PM5H,   2, 
                Offset (0x86), 
                PM6L,   2, 
                    ,   2, 
                PM6H,   2, 
                Offset (0x87), 
                Offset (0xA8), 
                    ,   20, 
                TUUD,   19, 
                Offset (0xBC), 
                    ,   20, 
                TLUD,   12, 
                Offset (0xC8), 
                    ,   7, 
                HTSE,   1
            }

            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, _Y00)
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic, DenseTranslation)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xDFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xE0000000,         // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000010000, // Range Minimum
                    0x000000000001FFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000010000, // Length
                    ,, _Y0F, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFD000000,         // Range Minimum
                    0xFE7FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x01800000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Name (EP_B, Zero)
            Name (MH_B, Zero)
            Name (PC_B, Zero)
            Name (PC_L, Zero)
            Name (DM_B, Zero)
            Method (GEPB, 0, Serialized)
            {
                If ((EP_B == Zero))
                {
                    EP_B = (EPBR << 0x0C)
                }

                Return (EP_B)
            }

            Method (GMHB, 0, Serialized)
            {
                If ((MH_B == Zero))
                {
                    MH_B = (MHBR << 0x0F)
                }

                Return (MH_B)
            }

            Method (GPCB, 0, Serialized)
            {
                If ((PC_B == Zero))
                {
                    PC_B = (PXBR << 0x1A)
                }

                Return (PC_B)
            }

            Method (GPCL, 0, Serialized)
            {
                If ((PC_L == Zero))
                {
                    PC_L = (0x10000000 >> PXSZ)
                }

                Return (PC_L)
            }

            Method (GDMB, 0, Serialized)
            {
                If ((DM_B == Zero))
                {
                    DM_B = (DIBR << 0x0C)
                }

                Return (DM_B)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Local0 = GPCL ()
                CreateWordField (BUF0, \_SB.PCI0._Y00._MAX, PBMX)  // _MAX: Maximum Base Address
                PBMX = ((Local0 >> 0x14) - 0x02)
                CreateWordField (BUF0, \_SB.PCI0._Y00._LEN, PBLN)  // _LEN: Length
                PBLN = ((Local0 >> 0x14) - One)
                If (PM1L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y01._LEN, C0LN)  // _LEN: Length
                    C0LN = Zero
                }

                If ((PM1L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y01._RW, C0RW)  // _RW_: Read-Write Status
                    C0RW = Zero
                }

                If (PM1H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y02._LEN, C4LN)  // _LEN: Length
                    C4LN = Zero
                }

                If ((PM1H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y02._RW, C4RW)  // _RW_: Read-Write Status
                    C4RW = Zero
                }

                If (PM2L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y03._LEN, C8LN)  // _LEN: Length
                    C8LN = Zero
                }

                If ((PM2L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y03._RW, C8RW)  // _RW_: Read-Write Status
                    C8RW = Zero
                }

                If (PM2H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y04._LEN, CCLN)  // _LEN: Length
                    CCLN = Zero
                }

                If ((PM2H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y04._RW, CCRW)  // _RW_: Read-Write Status
                    CCRW = Zero
                }

                If (PM3L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y05._LEN, D0LN)  // _LEN: Length
                    D0LN = Zero
                }

                If ((PM3L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y05._RW, D0RW)  // _RW_: Read-Write Status
                    D0RW = Zero
                }

                If (PM3H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y06._LEN, D4LN)  // _LEN: Length
                    D4LN = Zero
                }

                If ((PM3H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y06._RW, D4RW)  // _RW_: Read-Write Status
                    D4RW = Zero
                }

                If (PM4L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y07._LEN, D8LN)  // _LEN: Length
                    D8LN = Zero
                }

                If ((PM4L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y07._RW, D8RW)  // _RW_: Read-Write Status
                    D8RW = Zero
                }

                If (PM4H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y08._LEN, DCLN)  // _LEN: Length
                    DCLN = Zero
                }

                If ((PM4H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y08._RW, DCRW)  // _RW_: Read-Write Status
                    DCRW = Zero
                }

                If (PM5L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y09._LEN, E0LN)  // _LEN: Length
                    E0LN = Zero
                }

                If ((PM5L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y09._RW, E0RW)  // _RW_: Read-Write Status
                    E0RW = Zero
                }

                If (PM5H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0A._LEN, E4LN)  // _LEN: Length
                    E4LN = Zero
                }

                If ((PM5H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0A._RW, E4RW)  // _RW_: Read-Write Status
                    E4RW = Zero
                }

                If (PM6L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0B._LEN, E8LN)  // _LEN: Length
                    E8LN = Zero
                }

                If ((PM6L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0B._RW, E8RW)  // _RW_: Read-Write Status
                    E8RW = Zero
                }

                If (PM6H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0C._LEN, ECLN)  // _LEN: Length
                    ECLN = Zero
                }

                If ((PM6H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0C._RW, ECRW)  // _RW_: Read-Write Status
                    ECRW = Zero
                }

                If (PM0H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0D._LEN, F0LN)  // _LEN: Length
                    F0LN = Zero
                }

                If ((PM0H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0D._RW, F0RW)  // _RW_: Read-Write Status
                    F0RW = Zero
                }

                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._LEN, M1LN)  // _LEN: Length
                M1LN = M32L
                M1MN = M32B
                M1MX = ((M1MN + M1LN) - One)
                If ((M64L == Zero))
                {
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._LEN, MSLN)  // _LEN: Length
                    MSLN = Zero
                }
                Else
                {
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._LEN, M2LN)  // _LEN: Length
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._MIN, M2MN)  // _MIN: Minimum Base Address
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._MAX, M2MX)  // _MAX: Maximum Base Address
                    M2LN = M64L
                    M2MN = M64B
                    M2MX = ((M2MN + M2LN) - One)
                }

                Return (BUF0)
            }

            Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Name (XCNT, Zero)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Local0 = Arg3
                CreateDWordField (Local0, Zero, CDW1)
                CreateDWordField (Local0, 0x04, CDW2)
                CreateDWordField (Local0, 0x08, CDW3)
                If ((Arg0 == GUID))
                {
                    SUPP = CDW2
                    CTRL = CDW3
                    If (!NEXP)
                    {
                        CTRL &= 0xFFFFFFF8
                    }

                    If ((TBTS == One))
                    {
                        CTRL &= 0xFFFFFFF7
                    }

                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One))
                        {
                            NHPG ()
                        }

                        If ((CTRL & 0x04))
                        {
                            NPME ()
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL
                    OSCC = CTRL
                    Return (Local0)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Local0)
                }
            }

            Scope (\_SB.PCI0)
            {
                Device (GFX0)
                {
                    Name (_ADR, 0x00020000)  // _ADR: Address
                }

                Device (B0D4)
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }

                    Name (_ADR, 0x00040000)  // _ADR: Address
                }

                Device (ISP0)
                {
                    Name (_ADR, 0x00050000)  // _ADR: Address
                }
            }

            Scope (\_SB.PCI0)
            {
                Name (PALK, Zero)
                Name (PA0H, Zero)
                Name (PA1H, Zero)
                Name (PA1L, Zero)
                Name (PA2H, Zero)
                Name (PA2L, Zero)
                Name (PA3H, Zero)
                Name (PA3L, Zero)
                Name (PA4H, Zero)
                Name (PA4L, Zero)
                Name (PA5H, Zero)
                Name (PA5L, Zero)
                Name (PA6H, Zero)
                Name (PA6L, Zero)
                Method (NPTS, 1, NotSerialized)
                {
                    PA0H = PM0H
                    PALK = PMLK
                    PA1H = PM1H
                    PA1L = PM1L
                    PA2H = PM2H
                    PA2L = PM2L
                    PA3H = PM3H
                    PA3L = PM3L
                    PA4H = PM4H
                    PA4L = PM4L
                    PA5H = PM5H
                    PA5L = PM5L
                    PA6H = PM6H
                    PA6L = PM6L
                }

                Method (NWAK, 1, NotSerialized)
                {
                    PM0H = PA0H
                    PM1H = PA1H
                    PM1L = PA1L
                    PM2H = PA2H
                    PM2L = PA2L
                    PM3H = PA3H
                    PM3L = PA3L
                    PM4H = PA4H
                    PM4L = PA4L
                    PM5H = PA5H
                    PM5L = PA5L
                    PM6H = PA6H
                    PM6L = PA6L
                    PMLK = PALK
                }

                Method (M2PC, 1, Serialized)
                {
                    Local0 = GPCB ()
                    Local0 += ((Arg0 & 0x001F0000) >> One)
                    Local0 += ((Arg0 & 0x07) << 0x0C)
                    Return (Local0)
                }
            }

            Device (PEG0)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01)
                    }

                    Return (PD01)
                }

                Device (PEGP)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (PEG1)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02)
                    }

                    Return (PD02)
                }

                Device (PEGP)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (PEG2)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR03)
                    }

                    Return (PD03)
                }

                Device (PEGP)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Scope (\_SB.PCI0.LPCB)
                {
                }

                Method (SPTS, 1, NotSerialized)
                {
                    SLPX = One
                    SLPE = One
                    If ((Arg0 == 0x03))
                    {
                        AES3 = One
                    }
                }

                Method (SWAK, 1, NotSerialized)
                {
                    SLPE = Zero
                    AES3 = Zero
                    If (RTCS){}
                    Else
                    {
                        Notify (PWRB, 0x02)
                    }
                }

                OperationRegion (SMIE, SystemIO, PMBA, 0x04)
                Field (SMIE, ByteAcc, NoLock, Preserve)
                {
                        ,   10, 
                    RTCS,   1, 
                        ,   3, 
                    PEXS,   1, 
                    WAKS,   1, 
                    Offset (0x03), 
                    PWBT,   1, 
                    Offset (0x04)
                }

                OperationRegion (SLPR, SystemIO, SMCR, 0x08)
                Field (SLPR, ByteAcc, NoLock, Preserve)
                {
                        ,   4, 
                    SLPE,   1, 
                        ,   31, 
                    SLPX,   1, 
                    Offset (0x08)
                }
            }

            Device (RP09)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C)
                    }

                    Return (PD0C)
                }
            }

            Device (RP10)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0D)
                    }

                    Return (PD0D)
                }
            }

            Device (RP11)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0E)
                    }

                    Return (PD0E)
                }
            }

            Device (RP12)
            {
                Name (_ADR, 0x001D0003)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0F)
                    }

                    Return (PD0F)
                }
            }

            Device (RP13)
            {
                Name (_ADR, 0x001D0004)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR10)
                    }

                    Return (PD10)
                }
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04)
                    }

                    Return (PD04)
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05)
                    }

                    Return (PD05)
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06)
                    }

                    Return (PD06)
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07)
                    }

                    Return (PD07)
                }
            }

            Device (RP05)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR08)
                    }

                    Return (PD08)
                }
            }

            Device (RP06)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR09)
                    }

                    Return (PD09)
                }
            }

            Device (RP07)
            {
                Name (_ADR, 0x001C0006)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0A)
                    }

                    Return (PD0A)
                }
            }

            Device (RP08)
            {
                Name (_ADR, 0x001C0007)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0B)
                    }

                    Return (PD0B)
                }
            }

            Device (RP17)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR14)
                    }

                    Return (PD14)
                }
            }

            Device (RP18)
            {
                Name (_ADR, 0x001B0001)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR15)
                    }

                    Return (PD15)
                }
            }

            Device (RP19)
            {
                Name (_ADR, 0x001B0002)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR16)
                    }

                    Return (PD16)
                }
            }

            Device (RP20)
            {
                Name (_ADR, 0x001B0003)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR17)
                    }

                    Return (PD17)
                }
            }

            Device (RP21)
            {
                Name (_ADR, 0x001B0004)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR18)
                    }

                    Return (PD18)
                }
            }

            Device (RP22)
            {
                Name (_ADR, 0x001B0005)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR19)
                    }

                    Return (PD19)
                }
            }

            Device (RP23)
            {
                Name (_ADR, 0x001B0006)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1A)
                    }

                    Return (PD1A)
                }
            }

            Device (RP24)
            {
                Name (_ADR, 0x001B0007)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1B)
                    }

                    Return (PD1B)
                }
            }

            Device (RP14)
            {
                Name (_ADR, 0x001D0005)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR11)
                    }

                    Return (PD11)
                }
            }

            Device (RP15)
            {
                Name (_ADR, 0x001D0006)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR12)
                    }

                    Return (PD12)
                }
            }

            Device (RP16)
            {
                Name (_ADR, 0x001D0007)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x19), 
                    SBNR,   8, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRZ)
                                    {
                                        FUN6 = One
                                    }

                                    If (OBFZ)
                                    {
                                        FUN4 = One
                                    }

                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x04)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (OBFZ)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                        })
                                    }
                                }
                            }
                            Case (0x05)
                            {
                                If ((Arg1 == One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == SPTH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == SPTL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02)
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR13)
                    }

                    Return (PD13)
                }
            }

            Device (ACE2)
            {
                Name (_ADR, 0x00EF0003)  // _ADR: Address
                OperationRegion (SMI0, SystemIO, AOSS, 0x02)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SSMI,   8
                }

                Name (_HID, "PNP0C02")  // _HID: Hardware ID
                Name (_UID, 0xACE2)  // _UID: Unique ID
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Field (AGNV, AnyAcc, Lock, Preserve)
                    {
                        Offset (0x400), 
                        ACOS,   8
                    }

                    If (CondRefOf (\_OSI, Local0))
                    {
                        If (_OSI ("Linux"))
                        {
                            ACOS = Zero
                        }

                        If (_OSI ("Windows 2001"))
                        {
                            ACOS = Zero
                        }

                        If (_OSI ("Windows 2001.1"))
                        {
                            ACOS = Zero
                        }

                        If (_OSI ("FreeBSD"))
                        {
                            ACOS = Zero
                        }

                        If (_OSI ("HP-UX"))
                        {
                            ACOS = Zero
                        }

                        If (_OSI ("OpenVMS"))
                        {
                            ACOS = Zero
                        }

                        If (_OSI ("Windows 2001 SP1"))
                        {
                            ACOS = Zero
                        }

                        If (_OSI ("Windows 2001 SP2"))
                        {
                            ACOS = Zero
                        }

                        If (_OSI ("Windows 2001 SP3"))
                        {
                            ACOS = Zero
                        }

                        If (_OSI ("Windows 2006"))
                        {
                            ACOS = Zero
                        }

                        If (_OSI ("Windows 2006 SP1"))
                        {
                            ACOS = Zero
                        }

                        If (_OSI ("Windows 2009"))
                        {
                            ACOS = Zero
                        }

                        If (_OSI ("Windows 2012"))
                        {
                            ACOS = One
                        }

                        If (_OSI ("Windows 2013"))
                        {
                            ACOS = One
                        }

                        If (_OSI ("Windows 2015"))
                        {
                            ACOS = One
                        }
                    }
                    Else
                    {
                        If ((_OS == "Microsoft Windows NT"))
                        {
                            ACOS = Zero
                        }

                        If ((_OS == "Microsoft Windows"))
                        {
                            ACOS = Zero
                        }

                        If ((_OS == "Microsoft WindowsME: Millennium Edition"))
                        {
                            ACOS = Zero
                        }

                        If ((_OS == "Linux"))
                        {
                            ACOS = Zero
                        }

                        If ((_OS == "FreeBSD"))
                        {
                            ACOS = Zero
                        }

                        If ((_OS == "HP-UX"))
                        {
                            ACOS = Zero
                        }

                        If ((_OS == "OpenVMS"))
                        {
                            ACOS = Zero
                        }
                    }

                    SSMI = AOSM
                }
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x06, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.TPM.TPTS (Arg0)
            \_SB.PCI0.LPCB.SPTS (Arg0)
            \_SB.PCI0.NPTS (Arg0)
            RPTS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        RWAK (Arg0)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.LPCB.SWAK (Arg0)
        Return (WAKP)
    }

    Scope (_PR)
    {
        Processor (PR00, 0x01, 0x00001810, 0x06){}
        Processor (PR01, 0x02, 0x00001810, 0x06){}
        Processor (PR02, 0x03, 0x00001810, 0x06){}
        Processor (PR03, 0x04, 0x00001810, 0x06){}
        Processor (PR04, 0x05, 0x00001810, 0x06){}
        Processor (PR05, 0x06, 0x00001810, 0x06){}
        Processor (PR06, 0x07, 0x00001810, 0x06){}
        Processor (PR07, 0x08, 0x00001810, 0x06){}
        Processor (PR08, 0x09, 0x00001810, 0x06){}
        Processor (PR09, 0x0A, 0x00001810, 0x06){}
        Processor (PR10, 0x0B, 0x00001810, 0x06){}
        Processor (PR11, 0x0C, 0x00001810, 0x06){}
        Processor (PR12, 0x0D, 0x00001810, 0x06){}
        Processor (PR13, 0x0E, 0x00001810, 0x06){}
        Processor (PR14, 0x0F, 0x00001810, 0x06){}
        Processor (PR15, 0x10, 0x00001810, 0x06){}
    }

    Scope (_PR.PR00)
    {
        Name (CPC2, Package (0x15)
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000000000CE, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x01,               // Bit Offset
                    0x0000000000000777, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000770, // Address
                    0x04,               // Access Size
                    )
            }, 

            One, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x0A,               // Bit Width
                    0x20,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            Zero
        })
        Name (CPOC, Package (0x15)
        {
            0x15, 
            0x02, 
            0xFF, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000000000CE, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x01,               // Bit Offset
                    0x0000000000000777, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000770, // Address
                    0x04,               // Access Size
                    )
            }, 

            One, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x0A,               // Bit Width
                    0x20,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            Zero
        })
    }

    Scope (_SB)
    {
        Device (PAGD)
        {
            Name (_HID, "ACPI000C")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (_OSI ("Processor Aggregator Device"))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_PUR, Package (0x02)  // _PUR: Processor Utilization Request
            {
                One, 
                Zero
            })
        }
    }

    Scope (_SB.PCI0)
    {
        Device (PDRC)
        {
            Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00008000,         // Address Length
                    _Y10)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y11)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y12)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y13)
                Memory32Fixed (ReadWrite,
                    0xFED20000,         // Address Base
                    0x00020000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFED90000,         // Address Base
                    0x00004000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED45000,         // Address Base
                    0x0004B000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFF000000,         // Address Base
                    0x01000000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFEE00000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y14)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y15)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y10._BAS, MBR0)  // _BAS: Base Address
                MBR0 = GMHB ()
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y11._BAS, DBR0)  // _BAS: Base Address
                DBR0 = GDMB ()
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y12._BAS, EBR0)  // _BAS: Base Address
                EBR0 = GEPB ()
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y13._BAS, XBR0)  // _BAS: Base Address
                XBR0 = GPCB ()
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y13._LEN, XSZ0)  // _LEN: Length
                XSZ0 = GPCL ()
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y14._BAS, SXRA)  // _BAS: Base Address
                SXRA = SXRB
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y14._LEN, SXRL)  // _LEN: Length
                SXRL = SXRS
                If (!HPTE)
                {
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y15._BAS, HBAS)  // _BAS: Base Address
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y15._LEN, HLEN)  // _LEN: Length
                    HBAS = HPTB
                    HLEN = 0x0400
                }

                Return (BUF0)
            }
        }
    }

    Method (BRTN, 1, Serialized)
    {
        If (((DIDX & 0x0F00) == 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.DD1F, Arg0)
        }
    }

    Name (PNVB, 0x7A95B018)
    Name (PNVL, 0x0287)
    If ((ECR1 == One))
    {
        Scope (_SB.PCI0)
        {
            Name (PCIG, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */)
            Method (PCID, 4, Serialized)
            {
                If ((Arg0 == PCIG))
                {
                    If ((Arg1 >= 0x03))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0x01, 0x03                                     
                            })
                        }

                        If ((Arg2 == 0x08))
                        {
                            Return (One)
                        }

                        If ((Arg2 == 0x09))
                        {
                            Return (Package (0x05)
                            {
                                0xC350, 
                                Ones, 
                                Ones, 
                                0xC350, 
                                Ones
                            })
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (PCIC, 1, Serialized)
        {
            If ((ECR1 == One))
            {
                If ((Arg0 == PCIG))
                {
                    Return (One)
                }
            }

            Return (Zero)
        }
    }

    OperationRegion (PNVA, SystemMemory, PNVB, PNVL)
    Field (PNVA, AnyAcc, Lock, Preserve)
    {
        PCHS,   16, 
        PCHG,   16, 
        RPA1,   32, 
        RPA2,   32, 
        RPA3,   32, 
        RPA4,   32, 
        RPA5,   32, 
        RPA6,   32, 
        RPA7,   32, 
        RPA8,   32, 
        RPA9,   32, 
        RPAA,   32, 
        RPAB,   32, 
        RPAC,   32, 
        RPAD,   32, 
        RPAE,   32, 
        RPAF,   32, 
        RPAG,   32, 
        RPAH,   32, 
        RPAI,   32, 
        RPAJ,   32, 
        RPAK,   32, 
        RPAL,   32, 
        RPAM,   32, 
        RPAN,   32, 
        RPAO,   32, 
        NHLA,   64, 
        NHLL,   32, 
        ADFM,   32, 
        SBRG,   32, 
        GPEM,   32, 
        G2L0,   32, 
        G2L1,   32, 
        G2L2,   32, 
        G2L3,   32, 
        G2L4,   32, 
        G2L5,   32, 
        G2L6,   32, 
        G2L7,   32, 
        G2L8,   32, 
        G2L9,   32, 
        PML1,   16, 
        PML2,   16, 
        PML3,   16, 
        PML4,   16, 
        PML5,   16, 
        PML6,   16, 
        PML7,   16, 
        PML8,   16, 
        PML9,   16, 
        PMLA,   16, 
        PMLB,   16, 
        PMLC,   16, 
        PMLD,   16, 
        PMLE,   16, 
        PMLF,   16, 
        PMLG,   16, 
        PMLH,   16, 
        PMLI,   16, 
        PMLJ,   16, 
        PMLK,   16, 
        PMLL,   16, 
        PMLM,   16, 
        PMLN,   16, 
        PMLO,   16, 
        PNL1,   16, 
        PNL2,   16, 
        PNL3,   16, 
        PNL4,   16, 
        PNL5,   16, 
        PNL6,   16, 
        PNL7,   16, 
        PNL8,   16, 
        PNL9,   16, 
        PNLA,   16, 
        PNLB,   16, 
        PNLC,   16, 
        PNLD,   16, 
        PNLE,   16, 
        PNLF,   16, 
        PNLG,   16, 
        PNLH,   16, 
        PNLI,   16, 
        PNLJ,   16, 
        PNLK,   16, 
        PNLL,   16, 
        PNLM,   16, 
        PNLN,   16, 
        PNLO,   16, 
        U0C0,   32, 
        U1C0,   32, 
        XHPC,   8, 
        XRPC,   8, 
        XSPC,   8, 
        XSPA,   8, 
        HPTB,   32, 
        HPTE,   8, 
        SMD0,   8, 
        SMD1,   8, 
        SMD2,   8, 
        SMD3,   8, 
        SMD4,   8, 
        SMD5,   8, 
        SMD6,   8, 
        SMD7,   8, 
        SMD8,   8, 
        SMD9,   8, 
        SMDA,   8, 
        SIR0,   8, 
        SIR1,   8, 
        SIR2,   8, 
        SIR3,   8, 
        SIR4,   8, 
        SIR5,   8, 
        SIR6,   8, 
        SIR7,   8, 
        SIR8,   8, 
        SIR9,   8, 
        SIRA,   8, 
        SB00,   64, 
        SB01,   64, 
        SB02,   64, 
        SB03,   64, 
        SB04,   64, 
        SB05,   64, 
        SB06,   64, 
        SB07,   64, 
        SB08,   64, 
        SB09,   64, 
        SB0A,   64, 
        SB10,   64, 
        SB11,   64, 
        SB12,   64, 
        SB13,   64, 
        SB14,   64, 
        SB15,   64, 
        SB16,   64, 
        SB17,   64, 
        SB18,   64, 
        SB19,   64, 
        SB1A,   64, 
        GPEN,   8, 
        SGIR,   8, 
        NIT1,   8, 
        NIT2,   8, 
        NIT3,   8, 
        NPM1,   8, 
        NPM2,   8, 
        NPM3,   8, 
        NPC1,   8, 
        NPC2,   8, 
        NPC3,   8, 
        NL11,   16, 
        NL12,   16, 
        NL13,   16, 
        ND21,   8, 
        ND22,   8, 
        ND23,   8, 
        ND11,   32, 
        ND12,   32, 
        ND13,   32, 
        NLR1,   16, 
        NLR2,   16, 
        NLR3,   16, 
        NLD1,   32, 
        NLD2,   32, 
        NLD3,   32, 
        NEA1,   16, 
        NEA2,   16, 
        NEA3,   16, 
        NEB1,   16, 
        NEB2,   16, 
        NEB3,   16, 
        NEC1,   16, 
        NEC2,   16, 
        NEC3,   16, 
        NRA1,   16, 
        NRA2,   16, 
        NRA3,   16, 
        NMB1,   32, 
        NMB2,   32, 
        NMB3,   32, 
        NMV1,   32, 
        NMV2,   32, 
        NMV3,   32, 
        NPB1,   32, 
        NPB2,   32, 
        NPB3,   32, 
        NPV1,   32, 
        NPV2,   32, 
        NPV3,   32, 
        NRP1,   32, 
        NRP2,   32, 
        NRP3,   32, 
        Offset (0x262), 
        SXRB,   32, 
        SXRS,   32, 
        CIOE,   8, 
        CIOI,   8, 
        TAEN,   8, 
        TIRQ,   8, 
        XWMB,   32, 
        EMH4,   8, 
        EMDS,   8, 
        CSKU,   8, 
        ITA0,   16, 
        ITA1,   16, 
        ITA2,   16, 
        ITA3,   16, 
        ITS0,   8, 
        ITS1,   8, 
        ITS2,   8, 
        ITS3,   8, 
        PMBS,   16, 
        PWRM,   32
    }

    Scope (_SB)
    {
        Name (GPCL, Package (0x08)
        {
            Package (0x06)
            {
                0x00AF0000, 
                0x18, 
                0x0400, 
                0xD0, 
                0x20, 
                0x0140
            }, 

            Package (0x06)
            {
                0x00AF0000, 
                0x18, 
                0x04C0, 
                0xD4, 
                0x30, 
                0x0144
            }, 

            Package (0x06)
            {
                0x00AE0000, 
                0x18, 
                0x0400, 
                0xD0, 
                0x20, 
                0x0140
            }, 

            Package (0x06)
            {
                0x00AE0000, 
                0x18, 
                0x04C0, 
                0xD4, 
                0x30, 
                0x0144
            }, 

            Package (0x06)
            {
                0x00AE0000, 
                0x18, 
                0x0580, 
                0xD8, 
                0x40, 
                0x0148
            }, 

            Package (0x06)
            {
                0x00AC0000, 
                0x18, 
                0x0400, 
                0xD0, 
                0x20, 
                0x0140
            }, 

            Package (0x06)
            {
                0x00AC0000, 
                0x08, 
                0x04C0, 
                0xD4, 
                0x30, 
                0x0144
            }, 

            Package (0x06)
            {
                0x00AD0000, 
                0x0C, 
                0x0400, 
                0xD0, 
                0x20, 
                0x0140
            }
        })
        Name (GPCH, Package (0x0A)
        {
            Package (0x06)
            {
                0x00AF0000, 
                0x18, 
                0x0400, 
                0xD0, 
                0x20, 
                0x0140
            }, 

            Package (0x06)
            {
                0x00AF0000, 
                0x18, 
                0x04C0, 
                0xD4, 
                0x2C, 
                0x0144
            }, 

            Package (0x06)
            {
                0x00AE0000, 
                0x18, 
                0x0400, 
                0xD0, 
                0x20, 
                0x0140
            }, 

            Package (0x06)
            {
                0x00AE0000, 
                0x18, 
                0x04C0, 
                0xD4, 
                0x2C, 
                0x0144
            }, 

            Package (0x06)
            {
                0x00AE0000, 
                0x0D, 
                0x0580, 
                0xD8, 
                0x38, 
                0x0148
            }, 

            Package (0x06)
            {
                0x00AE0000, 
                0x18, 
                0x05E8, 
                0xDC, 
                0x40, 
                0x014C
            }, 

            Package (0x06)
            {
                0x00AE0000, 
                0x18, 
                0x06A8, 
                0xE0, 
                0x4C, 
                0x0150
            }, 

            Package (0x06)
            {
                0x00AE0000, 
                0x18, 
                0x0768, 
                0xE4, 
                0x58, 
                0x0154
            }, 

            Package (0x06)
            {
                0x00AC0000, 
                0x0B, 
                0x0400, 
                0xD0, 
                0x20, 
                0x0140
            }, 

            Package (0x06)
            {
                0x00AD0000, 
                0x0C, 
                0x0400, 
                0xD0, 
                0x20, 
                0x0140
            }
        })
        Name (RXEV, Package (0x0A)
        {
            Buffer (0x18){}, 
            Buffer (0x18){}, 
            Buffer (0x18){}, 
            Buffer (0x18){}, 
            Buffer (0x18){}, 
            Buffer (0x18){}, 
            Buffer (0x18){}, 
            Buffer (0x18){}, 
            Buffer (0x0B){}, 
            Buffer (0x0C){}
        })
    }

    Scope (_SB)
    {
        Method (GINF, 2, NotSerialized)
        {
            If ((PCHS == SPTL))
            {
                Return (DerefOf (DerefOf (GPCL [Arg0]) [Arg1]))
            }
            Else
            {
                Return (DerefOf (DerefOf (GPCH [Arg0]) [Arg1]))
            }
        }

        Method (GMXG, 0, NotSerialized)
        {
            If ((PCHS == SPTL))
            {
                Return (0x08)
            }
            Else
            {
                Return (0x0A)
            }
        }

        Method (GADR, 2, NotSerialized)
        {
            Local0 = (GINF (Arg0, Zero) + SBRG)
            Local1 = GINF (Arg0, Arg1)
            Return ((Local0 + Local1))
        }

        Method (GNUM, 1, NotSerialized)
        {
            Local0 = GNMB (Arg0)
            Local1 = GGRP (Arg0)
            Return ((Local0 + (Local1 * 0x18)))
        }

        Method (INUM, 1, NotSerialized)
        {
            Local1 = GNMB (Arg0)
            Local2 = GGRP (Arg0)
            Local3 = Zero
            While ((Local3 < Local2))
            {
                Local1 += GINF (Local3, One)
                Local3++
            }

            Return ((0x18 + (Local1 % 0x60)))
        }

        Method (GGRP, 1, Serialized)
        {
            Local0 = ((Arg0 & 0x00FF0000) >> 0x10)
            Return (Local0)
        }

        Method (GNMB, 1, Serialized)
        {
            Return ((Arg0 & 0xFFFF))
        }

        Method (GGPE, 1, NotSerialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            If ((((GPEM >> (Local0 * 0x02)) & 0x03) == Zero))
            {
                Return (0x6F)
            }
            Else
            {
                Local2 = ((GPEM >> (Local0 * 0x02)) & 0x03)
                Return ((((Local2 - One) * 0x20) + Local1))
            }
        }

        Method (GPC0, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP)
        }

        Method (SPC0, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            TEMP = Arg1
        }

        Method (GPC1, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = ((GADR (Local0, 0x02) + (Local1 * 0x08)) + 0x04)
            OperationRegion (PDW1, SystemMemory, Local2, 0x04)
            Field (PDW1, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP)
        }

        Method (SPC1, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = ((GADR (Local0, 0x02) + (Local1 * 0x08)) + 0x04)
            OperationRegion (PDW1, SystemMemory, Local2, 0x04)
            Field (PDW1, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            TEMP = Arg1
        }

        Method (SRXO, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   28, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GGIV, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   1, 
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP)
        }

        Method (GGOV, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP)
        }

        Method (SGOV, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GGII, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   23, 
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP)
        }

        Method (SGII, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   23, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GPMV, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   3, 
                Offset (0x04)
            }

            Return (TEMP)
        }

        Method (SPMV, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   3, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GHPO, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local3 = (GADR (Local0, 0x03) + ((Local1 >> 0x05) * 0x04))
            Local4 = (Local1 & 0x1F)
            OperationRegion (PREG, SystemMemory, Local3, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (((TEMP >> Local4) & One))
        }

        Method (SHPO, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local3 = (GADR (Local0, 0x03) + ((Local1 >> 0x05) * 0x04))
            Local4 = (Local1 & 0x1F)
            OperationRegion (PREG, SystemMemory, Local3, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            If (Arg1)
            {
                TEMP |= (One << Local4)
            }
            Else
            {
                TEMP &= ~(One << Local4)
            }
        }

        Method (GGPO, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x04) + ((Local1 >> 0x03) * 0x04))
            OperationRegion (PREG, SystemMemory, Local2, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (((TEMP >> ((Local1 & 0x07) * 0x04)) & 0x03))
        }

        Method (SGRA, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   20, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (SGWP, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = ((GADR (Local0, 0x02) + (Local1 * 0x08)) + 0x04)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   4, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (UGPS, 0, Serialized)
        {
        }

        Method (CGPS, 0, Serialized)
        {
        }

        Method (CGLS, 0, Serialized)
        {
        }

        Method (CAGS, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local4 = ((Local1 >> 0x05) * 0x04)
            If ((((GPEM >> (Local0 * 0x02)) & 0x03) == Zero))
            {
                OperationRegion (GPPX, SystemMemory, (GADR (Local0, 0x05) + Local4), 0x04)
                Field (GPPX, AnyAcc, NoLock, Preserve)
                {
                    STSX,   32
                }

                Local2 = (One << (Local1 % 0x20))
                STSX = Local2
            }
        }

        Method (ISME, 1, NotSerialized)
        {
            If ((((GPEM >> (Arg0 * 0x02)) & 0x03) != Zero))
            {
                Return (Zero)
            }

            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x05) + ((Local1 >> 0x05) * 0x04))
            Local3 = (Local1 & 0x1F)
            OperationRegion (GPPX, SystemMemory, Local2, 0x24)
            Field (GPPX, AnyAcc, NoLock, Preserve)
            {
                STSX,   32, 
                Offset (0x20), 
                GENX,   32
            }

            Return ((((STSX & GENX) >> Local3) & One))
        }

        Method (DIPI, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   9, 
                RDIS,   1, 
                    ,   15, 
                RCFG,   2, 
                Offset (0x04)
            }

            If ((RCFG != 0x02))
            {
                DerefOf (RXEV [Local0]) [Local1] = RCFG
                RCFG = 0x02
                RDIS = One
            }
        }

        Method (UIPI, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   9, 
                RDIS,   1, 
                    ,   15, 
                RCFG,   2, 
                Offset (0x04)
            }

            Local3 = DerefOf (DerefOf (RXEV [Local0]) [Local1])
            If ((Local3 != 0x02))
            {
                RDIS = Zero
                RCFG = Local3
            }
        }
    }

    Scope (\)
    {
        Method (THEN, 0, Serialized)
        {
            OperationRegion (THBA, SystemMemory, 0xFE200000, 0x10)
            Field (THBA, DWordAcc, NoLock, Preserve)
            {
                DO00,   32
            }

            Return ((DO00 != 0xFFFFFFFF))
        }

        Method (THDA, 2, Serialized)
        {
            Local0 = 0xFE200000
            Local0 += (0x40 * (0x80 * (Arg0 - 0x20)))
            Local0 += (0x40 * Arg1)
            Return (Local0)
        }

        Method (STRD, 3, Serialized)
        {
            If (((Arg1 + Arg2) > SizeOf (Arg0)))
            {
                Return (Zero)
            }

            ToBuffer (Arg0, Local3)
            Local0 = Zero
            Local1 = Zero
            While ((Local1 < Arg2))
            {
                Local2 = DerefOf (Local3 [(Arg1 + Local1)])
                Local0 += (Local2 << (0x08 * Local1))
                Local1++
            }

            Return (Local0)
        }

        Method (THDS, 1, Serialized)
        {
            If (!THEN ())
            {
                Return (Zero)
            }

            Concatenate (Arg0, "\n", Local2)
            Local0 = SizeOf (Local2)
            Local1 = THDA (0x20, 0x16)
            OperationRegion (THBA, SystemMemory, Local1, 0x40)
            Field (THBA, QWordAcc, NoLock, Preserve)
            {
                QO00,   64
            }

            Field (THBA, DWordAcc, NoLock, Preserve)
            {
                DO00,   32, 
                Offset (0x10), 
                DO10,   32, 
                Offset (0x30), 
                DO30,   32
            }

            Field (THBA, WordAcc, NoLock, Preserve)
            {
                WO00,   16
            }

            Field (THBA, ByteAcc, NoLock, Preserve)
            {
                BO00,   8
            }

            DO10 = 0x01000242
            WO00 = Local0
            Local6 = Zero
            Local7 = Local0
            While ((Local7 >= 0x08))
            {
                QO00 = STRD (Local2, Local6, 0x08)
                Local6 += 0x08
                Local7 -= 0x08
            }

            If ((Local7 >= 0x04))
            {
                DO00 = STRD (Local2, Local6, 0x04)
                Local6 += 0x04
                Local7 -= 0x04
            }

            If ((Local7 >= 0x02))
            {
                WO00 = STRD (Local2, Local6, 0x02)
                Local6 += 0x02
                Local7 -= 0x02
            }

            If ((Local7 >= One))
            {
                BO00 = STRD (Local2, Local6, One)
                Local6 += One
                Local7 -= One
            }

            DO30 = Zero
        }

        Method (THDH, 1, Serialized)
        {
            THDS (ToHexString (Arg0))
        }

        Method (THDD, 1, Serialized)
        {
            THDS (ToDecimalString (Arg0))
        }
    }

    Name (SPTH, One)
    Name (SPTL, 0x02)
    Method (PCHV, 0, NotSerialized)
    {
        If ((PCHS == One))
        {
            Return (SPTH)
        }

        If ((PCHS == 0x02))
        {
            Return (SPTL)
        }

        Return (Zero)
    }

    Scope (_GPE)
    {
        Method (_L6D, 0, Serialized)  // _Lxx: Level-Triggered GPE
        {
            \_SB.PCI0.XHC.GPEH ()
            \_SB.PCI0.HDAS.GPEH ()
            \_SB.PCI0.GLAN.GPEH ()
            \_SB.PCI0.XDCI.GPEH ()
        }
    }

    Scope (_SB.PCI0)
    {
        Name (TEMP, Zero)
        Device (PRRE)
        {
            Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
            Name (_UID, "PCHRESV")  // _UID: Unique ID
            Name (_STA, 0x03)  // _STA: Status
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFD000000,         // Address Base
                        0x00AC0000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFDAD0000,         // Address Base
                        0x00010000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFDB00000,         // Address Base
                        0x00500000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE000000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE036000,         // Address Base
                        0x00006000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE03D000,         // Address Base
                        0x003C3000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE410000,         // Address Base
                        0x003F0000,         // Address Length
                        )
                })
                Return (BUF0)
            }
        }

        Device (IOTR)
        {
            Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
            Name (_UID, "IoTraps")  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                     
                    }
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y16)
                })
                Name (BUF1, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y17)
                })
                Name (BUF2, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y18)
                })
                Name (BUF3, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y19)
                })
                CreateWordField (BUF0, \_SB.PCI0.IOTR._CRS._Y16._MIN, AMI0)  // _MIN: Minimum Base Address
                CreateWordField (BUF0, \_SB.PCI0.IOTR._CRS._Y16._MAX, AMA0)  // _MAX: Maximum Base Address
                CreateWordField (BUF1, \_SB.PCI0.IOTR._CRS._Y17._MIN, AMI1)  // _MIN: Minimum Base Address
                CreateWordField (BUF1, \_SB.PCI0.IOTR._CRS._Y17._MAX, AMA1)  // _MAX: Maximum Base Address
                CreateWordField (BUF2, \_SB.PCI0.IOTR._CRS._Y18._MIN, AMI2)  // _MIN: Minimum Base Address
                CreateWordField (BUF2, \_SB.PCI0.IOTR._CRS._Y18._MAX, AMA2)  // _MAX: Maximum Base Address
                CreateWordField (BUF3, \_SB.PCI0.IOTR._CRS._Y19._MIN, AMI3)  // _MIN: Minimum Base Address
                CreateWordField (BUF3, \_SB.PCI0.IOTR._CRS._Y19._MAX, AMA3)  // _MAX: Maximum Base Address
                AMI0 = ITA0
                AMA0 = ITA0
                AMI1 = ITA1
                AMA1 = ITA1
                AMI2 = ITA2
                AMA2 = ITA2
                AMI3 = ITA3
                AMA3 = ITA3
                If ((ITS0 == One))
                {
                    ConcatenateResTemplate (Local0, BUF0, Local1)
                    Local0 = Local1
                }

                If ((ITS1 == One))
                {
                    ConcatenateResTemplate (Local0, BUF1, Local1)
                    Local0 = Local1
                }

                If ((ITS2 == One))
                {
                    ConcatenateResTemplate (Local0, BUF2, Local1)
                    Local0 = Local1
                }

                If ((ITS3 == One))
                {
                    ConcatenateResTemplate (Local0, BUF3, Local1)
                    Local0 = Local1
                }

                Return (Local0)
            }
        }
    }

    Scope (_SB.PCI0.LPCB)
    {
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If (PCIC (Arg0))
            {
                Return (PCID (Arg0, Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                           
            })
        }

        OperationRegion (LPC, PCI_Config, Zero, 0x0100)
        Field (LPC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            CDID,   16, 
            Offset (0x08), 
            CRID,   8, 
            Offset (0x80), 
            IOD0,   8, 
            IOD1,   8, 
            Offset (0xA0), 
                ,   9, 
            PRBL,   1, 
            Offset (0xDC), 
                ,   2, 
            ESPI,   1
        }
    }

    Scope (_SB.PCI0)
    {
        Device (PPMC)
        {
            Name (_ADR, 0x001F0002)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (SBUS)
        {
            Name (_ADR, 0x001F0004)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    Scope (_SB)
    {
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PARC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLA, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLA, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PARC & 0x0F))
                Return (RTLA)
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PARC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PARC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PBRC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLB, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLB, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PBRC & 0x0F))
                Return (RTLB)
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PBRC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PBRC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PCRC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLC, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLC, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PCRC & 0x0F))
                Return (RTLC)
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PCRC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PCRC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PDRC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLD, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLD, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PDRC & 0x0F))
                Return (RTLD)
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PDRC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PDRC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PERC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLE, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLE, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PERC & 0x0F))
                Return (RTLE)
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PERC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PERC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PFRC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLF, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLF, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PFRC & 0x0F))
                Return (RTLF)
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PFRC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PFRC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PGRC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLG, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLG, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PGRC & 0x0F))
                Return (RTLG)
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PGRC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PGRC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PHRC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLH, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLH, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PHRC & 0x0F))
                Return (RTLH)
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PHRC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PHRC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }
    }

    Scope (\)
    {
        Method (PCRR, 2, Serialized)
        {
            Local0 = ((Arg0 << 0x10) + Arg1)
            Local0 += SBRG
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            Return (DAT0)
        }

        Method (PCRW, 3, Serialized)
        {
            Local0 = ((Arg0 << 0x10) + Arg1)
            Local0 += SBRG
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            DAT0 = Arg2
            Local0 = PCRR (0xC7, 0x3418)
        }

        Method (PCRO, 3, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = (Local0 | Arg2)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCRA, 3, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = (Local0 & Arg2)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCAO, 4, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = ((Local0 & Arg2) | Arg3)
            PCRW (Arg0, Arg1, Local1)
        }

        Name (TCBV, Zero)
        Method (TCBS, 0, NotSerialized)
        {
            If ((TCBV == Zero))
            {
                Local0 = PCRR (0xEF, 0x2778)
                TCBV = (Local0 & 0xFFE0)
            }

            Return (TCBV)
        }

        OperationRegion (PMIO, SystemIO, PMBS, 0x60)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            Offset (0x01), 
            PBSS,   1, 
            Offset (0x40), 
                ,   17, 
            GPEC,   1
        }

        OperationRegion (TCBA, SystemIO, TCBS (), 0x10)
        Field (TCBA, ByteAcc, NoLock, Preserve)
        {
            Offset (0x04), 
                ,   9, 
            CPSC,   1
        }

        OperationRegion (PWMR, SystemMemory, PWRM, 0x0800)
        Field (PWMR, AnyAcc, NoLock, Preserve)
        {
            Offset (0xE0), 
            Offset (0xE2), 
            DWLE,   1, 
            HWLE,   1, 
            Offset (0x31C), 
                ,   13, 
            SLS0,   1, 
                ,   8, 
            XSQD,   1
        }

        OperationRegion (PMST, SystemMemory, PWRM, 0x80)
        Field (PMST, DWordAcc, NoLock, Preserve)
        {
            Offset (0x18), 
                ,   25, 
            USBP,   1, 
            Offset (0x1C), 
            Offset (0x1F), 
            PMFS,   1, 
            Offset (0x20), 
            MPMC,   32, 
                ,   20, 
            UWAB,   1
        }
    }

    Scope (_SB.PCI0)
    {
        Device (GLAN)
        {
            Name (_ADR, 0x001F0006)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            OperationRegion (GLBA, PCI_Config, Zero, 0x0100)
            Field (GLBA, AnyAcc, NoLock, Preserve)
            {
                DVID,   16
            }

            Field (GLBA, ByteAcc, NoLock, Preserve)
            {
                Offset (0xCC), 
                Offset (0xCD), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                PMEE = Arg0
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If ((PMEE && PMES))
                {
                    PMES = One
                    Notify (GLAN, 0x02)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (XHC)
        {
            Name (_ADR, 0x00140000)  // _ADR: Address
            OperationRegion (XPRT, PCI_Config, Zero, 0x0100)
            Field (XPRT, AnyAcc, NoLock, Preserve)
            {
                DVID,   16, 
                Offset (0x10), 
                XADL,   32, 
                XADH,   32, 
                Offset (0x50), 
                    ,   2, 
                STGE,   1, 
                Offset (0xA2), 
                    ,   2, 
                D3HE,   1
            }

            Field (XPRT, ByteAcc, NoLock, Preserve)
            {
                Offset (0x74), 
                D0D3,   2, 
                Offset (0x75), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Name (XFLT, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG ("_DSM")
                Local0 = (XADH << 0x20)
                Local0 |= XADL
                Local0 &= 0xFFFFFFFFFFFFFFF0
                OperationRegion (XMIO, SystemMemory, Local0, 0x9000)
                Field (XMIO, AnyAcc, Lock, Preserve)
                {
                    Offset (0x550), 
                    PCCS,   1, 
                        ,   4, 
                    PPLS,   4, 
                    PTPP,   1, 
                    Offset (0x8420), 
                    PRTM,   2
                }

                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("ac340cb7-e901-45bf-b7e6-2b34ec931e23")))
                {
                    If ((Arg1 == 0x03))
                    {
                        XFLT = Arg1
                    }

                    If (((PRTM > Zero) && ((Arg1 == 0x05) || (Arg1 == 0x06))))
                    {
                        ADBG ("SSIC")
                        If ((((PCCS == Zero) || (PTPP == Zero)) || ((PPLS >= 0x04) && (PPLS <= 0x0F))))
                        {
                            If ((PPLS == 0x08))
                            {
                                D3HE = One
                            }
                            Else
                            {
                                D3HE = Zero
                            }
                        }
                        Else
                        {
                            D3HE = One
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x03)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x03)
            }

            Method (_S3W, 0, NotSerialized)  // _S3W: S3 Device Wake State
            {
                Return (0x03)
            }

            Method (_S4W, 0, NotSerialized)  // _S4W: S4 Device Wake State
            {
                Return (0x03)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((XFLT == Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x03)
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If ((UWAK == One))
                {
                    Return (GPRW (0x6D, 0x04))
                }

                Return (GPRW (0x6D, 0x03))
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                PMEE = Arg0
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (CondRefOf (\_SB.PCI0.XHC.RHUB.INIR))
                {
                    ^RHUB.INIR ()
                }
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                Local0 = PMES
                PMES = One
                If ((PMEE && Local0))
                {
                    Notify (XHC, 0x02)
                }
            }

            OperationRegion (XHCP, SystemMemory, (GPCB () + 0x000A0000), 0x0100)
            Field (XHCP, AnyAcc, Lock, Preserve)
            {
                Offset (0x04), 
                PDBM,   16, 
                Offset (0x10), 
                MEMB,   64
            }

            Method (USRA, 0, Serialized)
            {
                If ((PCHV () == SPTH))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (SSPA, 0, Serialized)
            {
                If ((PCHV () == SPTH))
                {
                    Return (0x11)
                }
                Else
                {
                    Return (0x0D)
                }
            }

            Name (XRST, Zero)
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                Local2 = MEMB
                Local1 = PDBM
                PDBM &= 0xFFFFFFFFFFFFFFF9
                D3HE = Zero
                STGE = Zero
                D0D3 = Zero
                MEMB = XWMB
                PDBM = (Local1 | 0x02)
                OperationRegion (MC11, SystemMemory, XWMB, 0x9000)
                Field (MC11, DWordAcc, Lock, Preserve)
                {
                    Offset (0x81C4), 
                        ,   2, 
                    UPSW,   2
                }

                UPSW = Zero
                PDBM &= 0xFFFFFFFFFFFFFFFD
                MEMB = Local2
                PDBM = Local1
                If (CondRefOf (\_SB.PCI0.XHC.PS0X))
                {
                    PS0X ()
                }

                If ((UWAB && ((D0D3 == Zero) || (^^XDCI.D0I3 == Zero))))
                {
                    MPMC = One
                    While (PMFS)
                    {
                        Sleep (0x0A)
                    }
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                Local2 = MEMB
                Local1 = PDBM
                PDBM &= 0xFFFFFFFFFFFFFFF9
                D0D3 = Zero
                MEMB = XWMB
                PDBM = (Local1 | 0x02)
                OperationRegion (MC11, SystemMemory, XWMB, 0x9000)
                Field (MC11, DWordAcc, Lock, Preserve)
                {
                    Offset (0x81A0), 
                    LFU3,   6, 
                    Offset (0x81C4), 
                        ,   2, 
                    UPSW,   2
                }

                Name (U3PS, Zero)
                If ((PCHV () == SPTL))
                {
                    U3PS = 0x0540
                }
                Else
                {
                    U3PS = 0x0580
                }

                OperationRegion (UPSC, SystemMemory, (XWMB + U3PS), 0x0100)
                Field (UPSC, DWordAcc, Lock, Preserve)
                {
                        ,   5, 
                    PLS1,   4, 
                        ,   13, 
                    PLC1,   1, 
                    Offset (0x03), 
                    CAS1,   1, 
                    Offset (0x10), 
                        ,   5, 
                    PLS2,   4, 
                        ,   13, 
                    PLC2,   1, 
                    Offset (0x13), 
                    CAS2,   1, 
                    Offset (0x20), 
                        ,   5, 
                    PLS3,   4, 
                        ,   13, 
                    PLC3,   1, 
                    Offset (0x23), 
                    CAS3,   1, 
                    Offset (0x30), 
                        ,   5, 
                    PLS4,   4, 
                        ,   13, 
                    PLC4,   1, 
                    Offset (0x33), 
                    CAS4,   1, 
                    Offset (0x40), 
                        ,   5, 
                    PLS5,   4, 
                        ,   13, 
                    PLC5,   1, 
                    Offset (0x43), 
                    CAS5,   1, 
                    Offset (0x50), 
                        ,   5, 
                    PLS6,   4, 
                        ,   13, 
                    PLC6,   1, 
                    Offset (0x53), 
                    CAS6,   1, 
                    Offset (0x60), 
                    Offset (0x63), 
                    CAS7,   1, 
                    Offset (0x70), 
                    Offset (0x73), 
                    CAS8,   1, 
                    Offset (0x80), 
                    Offset (0x83), 
                    CAS9,   1, 
                    Offset (0x90), 
                    Offset (0x93), 
                    CASA,   1
                }

                Field (UPSC, DWordAcc, Lock, Preserve)
                {
                    PSC1,   32, 
                    Offset (0x10), 
                    PSC2,   32, 
                    Offset (0x20), 
                    PSC3,   32, 
                    Offset (0x30), 
                    PSC4,   32, 
                    Offset (0x40), 
                    PSC5,   32, 
                    Offset (0x50), 
                    PSC6,   32
                }

                UPSW = 0x03
                STGE = One
                LFU3 = 0x3F
                Name (PSCO, 0xFFFFFFFF)
                Sleep (One)
                If (((PLS1 == 0x03) && PLC1))
                {
                    PSCO = (0xFFFFFFFD & PSC1)
                    PSCO |= 0x00400000
                    PSC1 = PSCO
                }

                If (((PLS2 == 0x03) && PLC2))
                {
                    PSCO = (0xFFFFFFFD & PSC2)
                    PSCO |= 0x00400000
                    PSC2 = PSCO
                }

                If (((PLS3 == 0x03) && PLC3))
                {
                    PSCO = (0xFFFFFFFD & PSC3)
                    PSCO |= 0x00400000
                    PSC3 = PSCO
                }

                If (((PLS4 == 0x03) && PLC4))
                {
                    PSCO = (0xFFFFFFFD & PSC4)
                    PSCO |= 0x00400000
                    PSC4 = PSCO
                }

                If (((PLS5 == 0x03) && PLC5))
                {
                    PSCO = (0xFFFFFFFD & PSC5)
                    PSCO |= 0x00400000
                    PSC5 = PSCO
                }

                If (((PLS6 == 0x03) && PLC6))
                {
                    PSCO = (0xFFFFFFFD & PSC6)
                    PSCO |= 0x00400000
                    PSC6 = PSCO
                }

                STGE = One
                If (((((((CAS1 || CAS2) || CAS3) || CAS4) || CAS5) || CAS6) || ((PCHV () == SPTH) && (((CAS7 || CAS8) || CAS9) || CASA))))
                {
                    D3HE = Zero
                    Sleep (One)
                }
                Else
                {
                    D3HE = One
                }

                LFU3 = Zero
                PDBM &= 0xFFFFFFFFFFFFFFFD
                D0D3 = 0x03
                MEMB = Local2
                PDBM = Local1
                If (CondRefOf (\_SB.PCI0.XHC.PS3X))
                {
                    PS3X ()
                }

                If ((UWAB && ((D0D3 == 0x03) && ((^^XDCI.D0I3 == 0x03) || (^^XDCI.DVID == 0xFFFF)))))
                {
                    MPMC = 0x03
                    While (PMFS)
                    {
                        Sleep (0x0A)
                    }
                }
            }

            Method (CUID, 1, Serialized)
            {
                If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71")))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PCI0.XHC.RHUB.PS0X))
                    {
                        PS0X ()
                    }
                }

                Method (_PS2, 0, Serialized)  // _PS2: Power State 2
                {
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PCI0.XHC.RHUB.PS2X))
                    {
                        PS2X ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PCI0.XHC.RHUB.PS3X))
                    {
                        PS3X ()
                    }
                }

                Device (HS01)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (HS02)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (HS03)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                }

                Device (HS04)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }

                Device (HS05)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (HS06)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (HS07)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }

                Device (HS08)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                }

                Device (HS09)
                {
                    Name (_ADR, 0x09)  // _ADR: Address
                }

                Device (HS10)
                {
                    Name (_ADR, 0x0A)  // _ADR: Address
                }

                Device (USR1)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((USRA () + Zero))
                    }
                }

                Device (USR2)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((USRA () + One))
                    }
                }

                Device (SS01)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + Zero))
                    }
                }

                Device (SS02)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + One))
                    }
                }

                Device (SS03)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x02))
                    }
                }

                Device (SS04)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x03))
                    }
                }

                Device (SS05)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x04))
                    }
                }

                Device (SS06)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x05))
                    }
                }
            }
        }
    }

    If ((PCHV () == SPTH))
    {
        Scope (_SB.PCI0.XHC.RHUB)
        {
            Device (HS11)
            {
                Name (_ADR, 0x0B)  // _ADR: Address
            }

            Device (HS12)
            {
                Name (_ADR, 0x0C)  // _ADR: Address
            }

            Device (HS13)
            {
                Name (_ADR, 0x0D)  // _ADR: Address
            }

            Device (HS14)
            {
                Name (_ADR, 0x0E)  // _ADR: Address
            }

            Device (SS07)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x06))
                }
            }

            Device (SS08)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x07))
                }
            }

            Device (SS09)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x08))
                }
            }

            Device (SS10)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x09))
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (XDCI)
        {
            Name (_ADR, 0x00140001)  // _ADR: Address
            OperationRegion (OTGD, PCI_Config, Zero, 0x0100)
            Field (OTGD, DWordAcc, NoLock, Preserve)
            {
                DVID,   16, 
                Offset (0x10), 
                XDCB,   64
            }

            Field (OTGD, ByteAcc, NoLock, Preserve)
            {
                Offset (0x84), 
                D0I3,   2, 
                Offset (0x85), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (XDBA, 0, NotSerialized)
            {
                Return ((XDCB & 0xFFFFFFFFFFFFFF00))
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("732b85d5-b7a7-4a1b-9ba0-4bbd00ffd511")))
                {
                    If ((Arg1 == One))
                    {
                        Method (SPPS, 2, Serialized)
                        {
                            OperationRegion (XDBW, SystemMemory, XDBA (), 0x00110000)
                            Field (XDBW, WordAcc, NoLock, Preserve)
                            {
                                Offset (0x10F810), 
                                Offset (0x10F811), 
                                U2CP,   2, 
                                U3CP,   2, 
                                Offset (0x10F818), 
                                PUPS,   2, 
                                    ,   1, 
                                PURC,   1, 
                                Offset (0x10F81A), 
                                Offset (0x10F81C), 
                                    ,   3, 
                                UXPE,   2, 
                                Offset (0x10F81E)
                            }

                            Local1 = Arg0
                            Local2 = Arg1
                            If ((Local1 == Zero))
                            {
                                UXPE = Zero
                                Local0 = Zero
                                While ((Local0 < 0x0A))
                                {
                                    Stall (0x64)
                                    Local0++
                                }

                                PUPS = Zero
                                Local0 = Zero
                                While ((Local0 < 0x07D0))
                                {
                                    Stall (0x64)
                                    If (((U2CP == Zero) && (U3CP == Zero)))
                                    {
                                        Break
                                    }

                                    Local0++
                                }

                                If ((U2CP != Zero)){}
                                If ((U3CP != Zero)){}
                                Return (Zero)
                            }

                            If ((Local1 == 0x03))
                            {
                                If ((U2CP != Zero)){}
                                If ((U3CP != Zero)){}
                                PUPS = 0x03
                                Local0 = Zero
                                While ((Local0 < 0x07D0))
                                {
                                    Stall (0x64)
                                    If (((U2CP == 0x03) && (U3CP == 0x03)))
                                    {
                                        Break
                                    }

                                    Local0++
                                }

                                If ((U2CP != 0x03)){}
                                If ((U3CP != 0x03)){}
                                UXPE = Local2
                                Return (Zero)
                            }

                            Return (Zero)
                        }

                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0xF3                                           
                                })
                            }
                            Case (One)
                            {
                                Return (One)
                            }
                            Case (0x04)
                            {
                                Local1 = DerefOf (Arg3 [Zero])
                                SPPS (Local1, Zero)
                            }
                            Case (0x05)
                            {
                                Return (Zero)
                            }
                            Case (0x06)
                            {
                                OperationRegion (XDBD, SystemMemory, XDBA (), 0x00110000)
                                Field (XDBD, DWordAcc, NoLock, Preserve)
                                {
                                    Offset (0xC704), 
                                        ,   30, 
                                    CSFR,   1, 
                                    Offset (0xC708)
                                }

                                OperationRegion (XDW2, SystemMemory, XDBA (), 0x00110000)
                                Field (XDW2, WordAcc, NoLock, Preserve)
                                {
                                    Offset (0x10F820), 
                                        ,   13, 
                                    OTHC,   1
                                }

                                If ((OTHC == Zero))
                                {
                                    CSFR = One
                                    Local0 = Zero
                                    While ((Local0 < 0x64))
                                    {
                                        If ((CSFR == Zero))
                                        {
                                            Break
                                        }

                                        Sleep (One)
                                    }
                                }

                                Return (Zero)
                            }
                            Case (0x07)
                            {
                                OperationRegion (XD22, SystemMemory, XDBA (), 0x00110000)
                                Field (XD22, WordAcc, NoLock, Preserve)
                                {
                                    Offset (0x10F818), 
                                    P2PS,   2, 
                                    Offset (0x10F81A)
                                }

                                Local0 = P2PS
                                Return (Local0)
                            }

                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Name (_DDN, "SPT XHCI controller")  // _DDN: DOS Device Name
            Name (_STR, Unicode ("SPT XHCI controller"))  // _STR: Description String
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((DVID != 0xFFFFFFFF))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                PMEE = Arg0
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                Local0 = PMES
                PMES = One
                If ((PMEE && Local0))
                {
                    Notify (XDCI, 0x02)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (HDAS)
        {
            Name (_ADR, 0x001F0003)  // _ADR: Address
            OperationRegion (HDAR, PCI_Config, Zero, 0x0100)
            Field (HDAR, WordAcc, NoLock, Preserve)
            {
                VDID,   32
            }

            Field (HDAR, ByteAcc, NoLock, Preserve)
            {
                Offset (0x54), 
                Offset (0x55), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                PMEE = Arg0
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }

                If ((PMEE && PMES))
                {
                    ADBG ("HDAS GPEH")
                    PMES = One
                    Notify (HDAS, 0x02)
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If ((VDID != 0xFFFFFFFF))
                {
                    VMMH (Zero, One)
                }

                If (CondRefOf (\_SB.PCI0.HDAS.PS0X))
                {
                    PS0X ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((VDID != 0xFFFFFFFF))
                {
                    VMMH (Zero, Zero)
                }

                If (CondRefOf (\_SB.PCI0.HDAS.PS3X))
                {
                    PS3X ()
                }
            }

            Name (NBUF, ResourceTemplate ()
            {
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadOnly,
                    0x0000000000000001, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y1A, AddressRangeACPI, TypeStatic)
            })
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                ADBG ("HDAS _INI")
                CreateQWordField (NBUF, \_SB.PCI0.HDAS._Y1A._MIN, NBAS)  // _MIN: Minimum Base Address
                CreateQWordField (NBUF, \_SB.PCI0.HDAS._Y1A._MAX, NMAS)  // _MAX: Maximum Base Address
                CreateQWordField (NBUF, \_SB.PCI0.HDAS._Y1A._LEN, NLEN)  // _LEN: Length
                NBAS = NHLA
                NMAS = (NHLA + (NHLL - One))
                NLEN = NHLL
                If ((VDID != 0xFFFFFFFF))
                {
                    VMMH (Zero, One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG ("HDAS _DSM")
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("a69f886e-6ceb-4594-a41f-7b5dce24c553")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                           
                            })
                        }
                        Case (One)
                        {
                            ADBG ("_DSM Fun 1 NHLT")
                            Return (NBUF)
                        }
                        Case (0x02)
                        {
                            ADBG ("_DSM Fun 2 FMSK")
                            Return (ADFM)
                        }
                        Case (0x03)
                        {
                            ADBG ("_DSM Fun 3 PPMS")
                            If (CondRefOf (\_SB.PCI0.HDAS.PPMS))
                            {
                                Return (PPMS (Arg3))
                            }

                            Return (Zero)
                        }
                        Default
                        {
                            ADBG ("_DSM Fun NOK")
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }

                    }
                }

                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                ADBG ("_DSM UUID NOK")
                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (SAT0)
        {
            Name (_ADR, 0x00170000)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (CondRefOf (\_SB.PCI0.SAT0.SDSM))
                {
                    Return (SDSM (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PRT0)
            {
                Name (_ADR, 0xFFFF)  // _ADR: Address
            }

            Device (PRT1)
            {
                Name (_ADR, 0x0001FFFF)  // _ADR: Address
            }

            Device (PRT2)
            {
                Name (_ADR, 0x0002FFFF)  // _ADR: Address
            }

            Device (PRT3)
            {
                Name (_ADR, 0x0003FFFF)  // _ADR: Address
            }

            Device (PRT4)
            {
                Name (_ADR, 0x0004FFFF)  // _ADR: Address
            }

            Device (PRT5)
            {
                Name (_ADR, 0x0005FFFF)  // _ADR: Address
            }

            Device (VOL0)
            {
                Name (_ADR, 0x0080FFFF)  // _ADR: Address
            }

            Device (VOL1)
            {
                Name (_ADR, 0x0081FFFF)  // _ADR: Address
            }

            Device (VOL2)
            {
                Name (_ADR, 0x0082FFFF)  // _ADR: Address
            }

            Method (RDCA, 5, Serialized)
            {
                OperationRegion (RPAL, SystemMemory, (GPCB () + (0x000B8100 + Arg1)), 0x04)
                Field (RPAL, DWordAcc, Lock, Preserve)
                {
                    RPCD,   32
                }

                OperationRegion (EPAC, SystemMemory, (GPCB () + 0x000B8308), 0x08)
                Field (EPAC, DWordAcc, Lock, Preserve)
                {
                    CAIR,   32, 
                    CADR,   32
                }

                OperationRegion (NCRG, SystemMemory, (GPCB () + 0x000B8FC0), 0x04)
                Field (NCRG, DWordAcc, Lock, Preserve)
                {
                    CRGC,   32
                }

                If ((Arg0 > 0x02))
                {
                    Return (Zero)
                }
                Else
                {
                    CRGC = Arg0
                }

                Switch (ToInteger (Arg4))
                {
                    Case (Zero)
                    {
                        Return (RPCD)
                    }
                    Case (0x02)
                    {
                        CAIR = Arg1
                        Return (CADR)
                    }
                    Case (One)
                    {
                        Local0 = (Arg2 & RPCD)
                        Local0 |= Arg3
                        RPCD = Local0
                    }
                    Case (0x03)
                    {
                        CAIR = Arg1
                        Local0 = (Arg2 & CADR)
                        Local0 |= Arg3
                        CADR = Local0
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Zero)
            }

            Method (ARPC, 4, Serialized)
            {
                ADBG (Concatenate ("NRPN: ", ToHexString (Arg0)))
                Switch (ToInteger (Arg0))
                {
                    Case (0x04)
                    {
                        If (CondRefOf (\_SB.PCI0.RP05.PWRG))
                        {
                            CopyObject (^^RP05.PWRG, Arg1)
                        }

                        If (CondRefOf (\_SB.PCI0.RP05.RSTG))
                        {
                            CopyObject (^^RP05.RSTG, Arg2)
                        }

                        If (CondRefOf (\_SB.PCI0.RP05.SCLK))
                        {
                            CopyObject (^^RP05.SCLK, Arg3)
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (\_SB.PCI0.RP09.PWRG))
                        {
                            CopyObject (^^RP09.PWRG, Arg1)
                        }

                        If (CondRefOf (\_SB.PCI0.RP09.RSTG))
                        {
                            CopyObject (^^RP09.RSTG, Arg2)
                        }

                        If (CondRefOf (\_SB.PCI0.RP09.SCLK))
                        {
                            CopyObject (^^RP09.SCLK, Arg3)
                        }
                    }
                    Case (0x0C)
                    {
                        If (CondRefOf (\_SB.PCI0.RP13.PWRG))
                        {
                            CopyObject (^^RP13.PWRG, Arg1)
                        }

                        If (CondRefOf (\_SB.PCI0.RP13.RSTG))
                        {
                            CopyObject (^^RP13.RSTG, Arg2)
                        }

                        If (CondRefOf (\_SB.PCI0.RP13.SCLK))
                        {
                            CopyObject (^^RP13.SCLK, Arg3)
                        }
                    }
                    Case (0x10)
                    {
                        If (CondRefOf (\_SB.PCI0.RP17.PWRG))
                        {
                            CopyObject (^^RP17.PWRG, Arg1)
                        }

                        If (CondRefOf (\_SB.PCI0.RP17.RSTG))
                        {
                            CopyObject (^^RP17.RSTG, Arg2)
                        }

                        If (CondRefOf (\_SB.PCI0.RP17.SCLK))
                        {
                            CopyObject (^^RP17.SCLK, Arg3)
                        }
                    }
                    Default
                    {
                        ADBG (Concatenate ("ERR!NRPN: ", ToHexString (Arg0)))
                    }

                }
            }

            Device (NVM1)
            {
                Name (_ADR, 0x00C1FFFF)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    NITV = NIT1
                    NPMV = NPM1
                    NPCV = NPC1
                    NL1V = NL11
                    ND2V = ND21
                    ND1V = ND11
                    NLRV = NLR1
                    NLDV = NLD1
                    NEAV = NEA1
                    NEBV = NEB1
                    NECV = NEC1
                    NRAV = NRA1
                    NMBV = NMB1
                    NMVV = NMV1
                    NPBV = NPB1
                    NPVV = NPV1
                    NRPN = NRP1
                    NCRN = Zero
                    ARPC (NRPN, RefOf (PWRG), RefOf (RSTG), RefOf (SCLK))
                }

                Name (PRBI, Zero)
                Name (PRBD, Zero)
                Name (PCMD, Zero)
                Name (RSTG, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (SCLK, Package (0x03)
                {
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (NCRN, Zero)
                Name (NITV, Zero)
                Name (NPMV, Zero)
                Name (NPCV, Zero)
                Name (NL1V, Zero)
                Name (ND2V, Zero)
                Name (ND1V, Zero)
                Name (NLRV, Zero)
                Name (NLDV, Zero)
                Name (NEAV, Zero)
                Name (NEBV, Zero)
                Name (NECV, Zero)
                Name (NRAV, Zero)
                Name (NMBV, Zero)
                Name (NMVV, Zero)
                Name (NPBV, Zero)
                Name (NPVV, Zero)
                Name (NRPN, Zero)
                Name (MXIE, Zero)
                Name (ISD3, Zero)
                Method (RPPC, 1, Serialized)
                {
                    If ((Arg0 == Zero))
                    {
                        RPOF ()
                    }
                    Else
                    {
                        RPON ()
                    }
                }

                Method (RPON, 0, Serialized)
                {
                    If ((ISD3 == Zero))
                    {
                        Return (Zero)
                    }

                    ISD3 = Zero
                    ADBG (Concatenate ("RPONs: ", ToHexString (NRPN)))
                    PON (PWRG)
                    If ((DerefOf (SCLK [Zero]) != Zero))
                    {
                        PCRA (0xDC, 0x100C, ~DerefOf (SCLK [One]))
                        Sleep (0x10)
                    }

                    PON (RSTG)
                    RDCA (NCRN, 0x0420, 0xBFFFFFFF, Zero, One)
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x08, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x08))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0420, 0xFFFFFFFF, 0x40000000, One)
                    Local0 = Zero
                    While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFF7, Zero, One)
                    Sleep (0x07D0)
                    NVD0 ()
                    ADBG (Concatenate ("RPONe: ", ToHexString (NRPN)))
                }

                Method (RPOF, 0, Serialized)
                {
                    If ((NVD3 () == Zero))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("POFF NRPN: ", ToHexString (NRPN)))
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x04, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x04))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFFF, 0x08, One)
                    POFF (RSTG)
                    If ((DerefOf (SCLK [Zero]) != Zero))
                    {
                        PCRO (0xDC, 0x100C, DerefOf (SCLK [One]))
                        Sleep (0x10)
                    }

                    POFF (PWRG)
                    RDCA (NCRN, 0x50, 0xFFFFFFFF, 0x10, One)
                    RDCA (NCRN, 0x50, 0xFFFFFFEF, Zero, One)
                    ISD3 = 0x03
                }

                Method (NVD3, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    PCMD = RDCA (NCRN, 0x04, Zero, Zero, 0x02)
                    If ((NITV == One))
                    {
                        PRBI = 0x24
                        PRBD = RDCA (NCRN, 0x24, Zero, Zero, 0x02)
                    }
                    ElseIf ((NITV == 0x02))
                    {
                        PRBI = 0x10
                        PRBD = RDCA (NCRN, 0x10, Zero, Zero, 0x02)
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        MXIE = RDCA (NCRN, TCSO, Zero, Zero, 0x02)
                    }

                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, 0x03, 0x03)
                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, 0x03, One)
                    Return (One)
                }

                Method (NVD0, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, Zero, One)
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, Zero, 0x03)
                    CNRS ()
                    If ((NITV == 0x02))
                    {
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        RDCA (NCRN, TCSO, 0xFFFFFFFF, (MXIE & 0x80000000), 0x03)
                        ADBG ("NVD0:  MSIXe")
                    }
                    Else
                    {
                    }

                    Return (One)
                }

                Method (CNRS, 0, Serialized)
                {
                    Debug = "[ACPI RST] Restore Remapped Device and Hidden RP context |start"
                    ADBG (Concatenate ("CNRSs ", ToDecimalString (Timer)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0x10, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x14, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x18, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x1C, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x20, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x24, Zero, Zero, 0x03)
                    RDCA (NCRN, PRBI, Zero, PRBD, 0x03)
                    RDCA (NCRN, 0x04, 0xFFFFFFF8, PCMD, 0x03)
                    If ((NL1V != Zero))
                    {
                        RDCA (NCRN, (NL1V + 0x0C), 0xFFFFFF00, ND2V, 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0x0F, (ND1V & 0xFFFFFFF0), 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0xFFFFFFFF, ND1V, 0x03)
                    }

                    If ((NLRV != Zero))
                    {
                        RDCA (NCRN, (NLRV + 0x04), 0xFFFFFFFF, NLDV, 0x03)
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFEBF, (NEAV & 0xFFFC), 0x03)
                    RDCA (NCRN, (NPCV + 0x28), 0xFFFFFBFF, NECV, 0x03)
                    RDCA (NCRN, (NPCV + 0x08), 0xFFFFFF1F, NEBV, 0x03)
                    RDCA (NCRN, 0x68, 0xFFFFFBFF, NRAV, One)
                    If (((NEAV & 0x40) == 0x40))
                    {
                        RDCA (NCRN, 0x50, 0xFFFFFFDF, 0x20, One)
                        ADBG (Concatenate ("CNRSw ", ToDecimalString (Timer)))
                        While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                        {
                            Stall (0x0A)
                        }
                    }

                    ADBG (Concatenate ("CNRSx ", ToDecimalString (Timer)))
                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFFFC, (NEAV & 0x03), 0x03)
                    If ((NMVV != Zero))
                    {
                        RDCA (NCRN, NMBV, Zero, NMVV, 0x03)
                    }

                    If ((NPVV != Zero))
                    {
                        RDCA (NCRN, NPBV, Zero, NPVV, 0x03)
                    }

                    ADBG (Concatenate ("CNRSe ", ToDecimalString (Timer)))
                    Debug = "[ACPI RST] Restore Remapped Device and Hidden RP context |complete"
                }
            }

            Device (NVM2)
            {
                Name (_ADR, 0x00C2FFFF)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    NITV = NIT2
                    NPMV = NPM2
                    NPCV = NPC2
                    NL1V = NL12
                    ND2V = ND22
                    ND1V = ND12
                    NLRV = NLR2
                    NLDV = NLD2
                    NEAV = NEA2
                    NEBV = NEB2
                    NECV = NEC2
                    NRAV = NRA2
                    NMBV = NMB2
                    NMVV = NMV2
                    NPBV = NPB2
                    NPVV = NPV2
                    NRPN = NRP2
                    NCRN = One
                    ARPC (NRPN, RefOf (PWRG), RefOf (RSTG), RefOf (SCLK))
                }

                Name (PRBI, Zero)
                Name (PRBD, Zero)
                Name (PCMD, Zero)
                Name (RSTG, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (SCLK, Package (0x03)
                {
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (NCRN, Zero)
                Name (NITV, Zero)
                Name (NPMV, Zero)
                Name (NPCV, Zero)
                Name (NL1V, Zero)
                Name (ND2V, Zero)
                Name (ND1V, Zero)
                Name (NLRV, Zero)
                Name (NLDV, Zero)
                Name (NEAV, Zero)
                Name (NEBV, Zero)
                Name (NECV, Zero)
                Name (NRAV, Zero)
                Name (NMBV, Zero)
                Name (NMVV, Zero)
                Name (NPBV, Zero)
                Name (NPVV, Zero)
                Name (NRPN, Zero)
                Name (MXIE, Zero)
                Name (ISD3, Zero)
                Method (RPPC, 1, Serialized)
                {
                    If ((Arg0 == Zero))
                    {
                        RPOF ()
                    }
                    Else
                    {
                        RPON ()
                    }
                }

                Method (RPON, 0, Serialized)
                {
                    If ((ISD3 == Zero))
                    {
                        Return (Zero)
                    }

                    ISD3 = Zero
                    ADBG (Concatenate ("RPONs: ", ToHexString (NRPN)))
                    PON (PWRG)
                    If ((DerefOf (SCLK [Zero]) != Zero))
                    {
                        PCRA (0xDC, 0x100C, ~DerefOf (SCLK [One]))
                        Sleep (0x10)
                    }

                    PON (RSTG)
                    RDCA (NCRN, 0x0420, 0xBFFFFFFF, Zero, One)
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x08, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x08))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0420, 0xFFFFFFFF, 0x40000000, One)
                    Local0 = Zero
                    While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFF7, Zero, One)
                    Sleep (0x07D0)
                    NVD0 ()
                    ADBG (Concatenate ("RPONe: ", ToHexString (NRPN)))
                }

                Method (RPOF, 0, Serialized)
                {
                    If ((NVD3 () == Zero))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("POFF NRPN: ", ToHexString (NRPN)))
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x04, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x04))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFFF, 0x08, One)
                    POFF (RSTG)
                    If ((DerefOf (SCLK [Zero]) != Zero))
                    {
                        PCRO (0xDC, 0x100C, DerefOf (SCLK [One]))
                        Sleep (0x10)
                    }

                    POFF (PWRG)
                    RDCA (NCRN, 0x50, 0xFFFFFFFF, 0x10, One)
                    RDCA (NCRN, 0x50, 0xFFFFFFEF, Zero, One)
                    ISD3 = 0x03
                }

                Method (NVD3, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    PCMD = RDCA (NCRN, 0x04, Zero, Zero, 0x02)
                    If ((NITV == One))
                    {
                        PRBI = 0x24
                        PRBD = RDCA (NCRN, 0x24, Zero, Zero, 0x02)
                    }
                    ElseIf ((NITV == 0x02))
                    {
                        PRBI = 0x10
                        PRBD = RDCA (NCRN, 0x10, Zero, Zero, 0x02)
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        MXIE = RDCA (NCRN, TCSO, Zero, Zero, 0x02)
                    }

                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, 0x03, 0x03)
                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, 0x03, One)
                    Return (One)
                }

                Method (NVD0, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, Zero, One)
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, Zero, 0x03)
                    CNRS ()
                    If ((NITV == 0x02))
                    {
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        RDCA (NCRN, TCSO, 0xFFFFFFFF, (MXIE & 0x80000000), 0x03)
                        ADBG ("NVD0:  MSIXe")
                    }
                    Else
                    {
                    }

                    Return (One)
                }

                Method (CNRS, 0, Serialized)
                {
                    Debug = "[ACPI RST] Restore Remapped Device and Hidden RP context |start"
                    ADBG (Concatenate ("CNRSs ", ToDecimalString (Timer)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0x10, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x14, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x18, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x1C, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x20, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x24, Zero, Zero, 0x03)
                    RDCA (NCRN, PRBI, Zero, PRBD, 0x03)
                    RDCA (NCRN, 0x04, 0xFFFFFFF8, PCMD, 0x03)
                    If ((NL1V != Zero))
                    {
                        RDCA (NCRN, (NL1V + 0x0C), 0xFFFFFF00, ND2V, 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0x0F, (ND1V & 0xFFFFFFF0), 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0xFFFFFFFF, ND1V, 0x03)
                    }

                    If ((NLRV != Zero))
                    {
                        RDCA (NCRN, (NLRV + 0x04), 0xFFFFFFFF, NLDV, 0x03)
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFEBF, (NEAV & 0xFFFC), 0x03)
                    RDCA (NCRN, (NPCV + 0x28), 0xFFFFFBFF, NECV, 0x03)
                    RDCA (NCRN, (NPCV + 0x08), 0xFFFFFF1F, NEBV, 0x03)
                    RDCA (NCRN, 0x68, 0xFFFFFBFF, NRAV, One)
                    If (((NEAV & 0x40) == 0x40))
                    {
                        RDCA (NCRN, 0x50, 0xFFFFFFDF, 0x20, One)
                        ADBG (Concatenate ("CNRSw ", ToDecimalString (Timer)))
                        While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                        {
                            Stall (0x0A)
                        }
                    }

                    ADBG (Concatenate ("CNRSx ", ToDecimalString (Timer)))
                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFFFC, (NEAV & 0x03), 0x03)
                    If ((NMVV != Zero))
                    {
                        RDCA (NCRN, NMBV, Zero, NMVV, 0x03)
                    }

                    If ((NPVV != Zero))
                    {
                        RDCA (NCRN, NPBV, Zero, NPVV, 0x03)
                    }

                    ADBG (Concatenate ("CNRSe ", ToDecimalString (Timer)))
                    Debug = "[ACPI RST] Restore Remapped Device and Hidden RP context |complete"
                }
            }

            Device (NVM3)
            {
                Name (_ADR, 0x00C3FFFF)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    NITV = NIT3
                    NPMV = NPM3
                    NPCV = NPC3
                    NL1V = NL13
                    ND2V = ND23
                    ND1V = ND13
                    NLRV = NLR3
                    NLDV = NLD3
                    NEAV = NEA3
                    NEBV = NEB3
                    NECV = NEC3
                    NRAV = NRA3
                    NMBV = NMB3
                    NMVV = NMV3
                    NPBV = NPB3
                    NPVV = NPV3
                    NRPN = NRP3
                    NCRN = 0x02
                    ARPC (NRPN, RefOf (PWRG), RefOf (RSTG), RefOf (SCLK))
                }

                Name (PRBI, Zero)
                Name (PRBD, Zero)
                Name (PCMD, Zero)
                Name (RSTG, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (SCLK, Package (0x03)
                {
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (NCRN, Zero)
                Name (NITV, Zero)
                Name (NPMV, Zero)
                Name (NPCV, Zero)
                Name (NL1V, Zero)
                Name (ND2V, Zero)
                Name (ND1V, Zero)
                Name (NLRV, Zero)
                Name (NLDV, Zero)
                Name (NEAV, Zero)
                Name (NEBV, Zero)
                Name (NECV, Zero)
                Name (NRAV, Zero)
                Name (NMBV, Zero)
                Name (NMVV, Zero)
                Name (NPBV, Zero)
                Name (NPVV, Zero)
                Name (NRPN, Zero)
                Name (MXIE, Zero)
                Name (ISD3, Zero)
                Method (RPPC, 1, Serialized)
                {
                    If ((Arg0 == Zero))
                    {
                        RPOF ()
                    }
                    Else
                    {
                        RPON ()
                    }
                }

                Method (RPON, 0, Serialized)
                {
                    If ((ISD3 == Zero))
                    {
                        Return (Zero)
                    }

                    ISD3 = Zero
                    ADBG (Concatenate ("RPONs: ", ToHexString (NRPN)))
                    PON (PWRG)
                    If ((DerefOf (SCLK [Zero]) != Zero))
                    {
                        PCRA (0xDC, 0x100C, ~DerefOf (SCLK [One]))
                        Sleep (0x10)
                    }

                    PON (RSTG)
                    RDCA (NCRN, 0x0420, 0xBFFFFFFF, Zero, One)
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x08, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x08))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0420, 0xFFFFFFFF, 0x40000000, One)
                    Local0 = Zero
                    While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFF7, Zero, One)
                    Sleep (0x07D0)
                    NVD0 ()
                    ADBG (Concatenate ("RPONe: ", ToHexString (NRPN)))
                }

                Method (RPOF, 0, Serialized)
                {
                    If ((NVD3 () == Zero))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("POFF NRPN: ", ToHexString (NRPN)))
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x04, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x04))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFFF, 0x08, One)
                    POFF (RSTG)
                    If ((DerefOf (SCLK [Zero]) != Zero))
                    {
                        PCRO (0xDC, 0x100C, DerefOf (SCLK [One]))
                        Sleep (0x10)
                    }

                    POFF (PWRG)
                    RDCA (NCRN, 0x50, 0xFFFFFFFF, 0x10, One)
                    RDCA (NCRN, 0x50, 0xFFFFFFEF, Zero, One)
                    ISD3 = 0x03
                }

                Method (NVD3, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    PCMD = RDCA (NCRN, 0x04, Zero, Zero, 0x02)
                    If ((NITV == One))
                    {
                        PRBI = 0x24
                        PRBD = RDCA (NCRN, 0x24, Zero, Zero, 0x02)
                    }
                    ElseIf ((NITV == 0x02))
                    {
                        PRBI = 0x10
                        PRBD = RDCA (NCRN, 0x10, Zero, Zero, 0x02)
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        MXIE = RDCA (NCRN, TCSO, Zero, Zero, 0x02)
                    }

                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, 0x03, 0x03)
                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, 0x03, One)
                    Return (One)
                }

                Method (NVD0, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, Zero, One)
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, Zero, 0x03)
                    CNRS ()
                    If ((NITV == 0x02))
                    {
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        RDCA (NCRN, TCSO, 0xFFFFFFFF, (MXIE & 0x80000000), 0x03)
                        ADBG ("NVD0:  MSIXe")
                    }
                    Else
                    {
                    }

                    Return (One)
                }

                Method (CNRS, 0, Serialized)
                {
                    Debug = "[ACPI RST] Restore Remapped Device and Hidden RP context |start"
                    ADBG (Concatenate ("CNRSs ", ToDecimalString (Timer)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0x10, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x14, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x18, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x1C, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x20, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x24, Zero, Zero, 0x03)
                    RDCA (NCRN, PRBI, Zero, PRBD, 0x03)
                    RDCA (NCRN, 0x04, 0xFFFFFFF8, PCMD, 0x03)
                    If ((NL1V != Zero))
                    {
                        RDCA (NCRN, (NL1V + 0x0C), 0xFFFFFF00, ND2V, 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0x0F, (ND1V & 0xFFFFFFF0), 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0xFFFFFFFF, ND1V, 0x03)
                    }

                    If ((NLRV != Zero))
                    {
                        RDCA (NCRN, (NLRV + 0x04), 0xFFFFFFFF, NLDV, 0x03)
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFEBF, (NEAV & 0xFFFC), 0x03)
                    RDCA (NCRN, (NPCV + 0x28), 0xFFFFFBFF, NECV, 0x03)
                    RDCA (NCRN, (NPCV + 0x08), 0xFFFFFF1F, NEBV, 0x03)
                    RDCA (NCRN, 0x68, 0xFFFFFBFF, NRAV, One)
                    If (((NEAV & 0x40) == 0x40))
                    {
                        RDCA (NCRN, 0x50, 0xFFFFFFDF, 0x20, One)
                        ADBG (Concatenate ("CNRSw ", ToDecimalString (Timer)))
                        While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                        {
                            Stall (0x0A)
                        }
                    }

                    ADBG (Concatenate ("CNRSx ", ToDecimalString (Timer)))
                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFFFC, (NEAV & 0x03), 0x03)
                    If ((NMVV != Zero))
                    {
                        RDCA (NCRN, NMBV, Zero, NMVV, 0x03)
                    }

                    If ((NPVV != Zero))
                    {
                        RDCA (NCRN, NPBV, Zero, NPVV, 0x03)
                    }

                    ADBG (Concatenate ("CNRSe ", ToDecimalString (Timer)))
                    Debug = "[ACPI RST] Restore Remapped Device and Hidden RP context |complete"
                }
            }

            Method (PSTA, 1, Serialized)
            {
                If ((DerefOf (Arg0 [Zero]) == Zero))
                {
                    Return (One)
                }

                If ((DerefOf (Arg0 [Zero]) == One))
                {
                    If ((GGOV (DerefOf (Arg0 [0x02])) == DerefOf (Arg0 [0x03])))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If ((DerefOf (Arg0 [Zero]) == 0x02))
                {
                    If ((^^GEXP.GEPS (DerefOf (Arg0 [One]), DerefOf (Arg0 [0x02])) == DerefOf (Arg0 [0x03])))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Return (Zero)
            }

            Method (PON, 1, Serialized)
            {
                If ((DerefOf (Arg0 [Zero]) != Zero))
                {
                    If ((DerefOf (Arg0 [Zero]) == One))
                    {
                        ADBG (Concatenate ("PON GPIO=", ToHexString (DerefOf (Arg0 [0x02]))))
                        SGOV (DerefOf (Arg0 [0x02]), DerefOf (Arg0 [0x03]))
                    }

                    If ((DerefOf (Arg0 [Zero]) == 0x02))
                    {
                        ADBG (Concatenate ("PON IOEX=", ToHexString (DerefOf (Arg0 [0x02]))))
                        ^^GEXP.SGEP (DerefOf (Arg0 [One]), DerefOf (Arg0 [0x02]), DerefOf (Arg0 [0x03]))
                    }
                }
            }

            Method (POFF, 1, Serialized)
            {
                If ((DerefOf (Arg0 [Zero]) != Zero))
                {
                    If ((DerefOf (Arg0 [Zero]) == One))
                    {
                        ADBG (Concatenate ("POFF GPIO=", ToHexString (DerefOf (Arg0 [0x02]))))
                        SGOV (DerefOf (Arg0 [0x02]), (DerefOf (Arg0 [0x03]) ^ One))
                    }

                    If ((DerefOf (Arg0 [Zero]) == 0x02))
                    {
                        ADBG (Concatenate ("POFF IOEX=", ToHexString (DerefOf (Arg0 [0x02]))))
                        ^^GEXP.SGEP (DerefOf (Arg0 [One]), DerefOf (Arg0 [0x02]), (DerefOf (Arg0 [0x03]) ^ One))
                    }
                }
            }
        }

        Device (CIO2)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((CIOE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_HID, "INT343E")  // _HID: Hardware ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (CBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y1B)
                    {
                        0x00000010,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFE400000,         // Address Base
                        0x00010000,         // Address Length
                        )
                })
                CreateDWordField (CBUF, \_SB.PCI0.CIO2._CRS._Y1B._INT, CIOV)  // _INT: Interrupts
                CIOV = CIOI
                Return (CBUF)
            }
        }

        Device (TERM)
        {
            Name (_HID, "INT343D")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFE03C000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y1C)
                    {
                        0x00000012,
                    }
                })
                CreateDWordField (RBUF, \_SB.PCI0.TERM._CRS._Y1C._INT, IRQN)  // _INT: Interrupts
                IRQN = TIRQ
                Return (RBUF)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TAEN == Zero))
                {
                    Return (Zero)
                }

                If ((TIRQ == Zero))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }
        }
    }

    Scope (_SB)
    {
        Name (HDAA, Zero)
        Name (DISA, One)
        Method (DION, 0, NotSerialized)
        {
            VMMH (One, One)
        }

        Method (DIOF, 0, NotSerialized)
        {
            VMMH (One, Zero)
        }

        Method (VMMH, 2, Serialized)
        {
            If ((!CondRefOf (\_SB.VMON) || !CondRefOf (\_SB.VMOF)))
            {
                Return (Zero)
            }

            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    HDAA = Arg1
                }
                Case (One)
                {
                    DISA = Arg1
                }
                Default
                {
                    Return (Zero)
                }

            }

            If ((!DISA && !HDAA))
            {
                XSQD = Zero
                SLS0 = One
                VMON ()
            }
            Else
            {
                XSQD = One
                SLS0 = Zero
                VMOF ()
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (LPD3, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, (Arg0 + 0x84), 0x04)
            Field (ICB1, DWordAcc, NoLock, Preserve)
            {
                PMEC,   32
            }

            PMEC = 0x03
            TEMP = PMEC
        }

        Method (LPD0, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, (Arg0 + 0x84), 0x04)
            Field (ICB1, DWordAcc, NoLock, Preserve)
            {
                PMEC,   32
            }

            PMEC &= 0xFFFF7FFC
            TEMP = PMEC
        }

        Method (LHRV, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, (Arg0 + 0x08), 0x04)
            Field (ICB1, DWordAcc, NoLock, Preserve)
            {
                HRV,    8
            }

            Return (HRV)
        }

        Method (GETD, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, (Arg0 + 0x84), 0x04)
            Field (ICB1, DWordAcc, NoLock, Preserve)
            {
                PMEC,   32
            }

            Return ((PMEC & 0x03))
        }

        Method (LCRS, 3, Serialized)
        {
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y1D)
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y1E)
                {
                    0x00000014,
                }
            })
            CreateDWordField (RBUF, \_SB.PCI0.LCRS._Y1D._BAS, BVAL)  // _BAS: Base Address
            CreateDWordField (RBUF, \_SB.PCI0.LCRS._Y1D._LEN, BLEN)  // _LEN: Length
            CreateDWordField (RBUF, \_SB.PCI0.LCRS._Y1E._INT, IRQN)  // _INT: Interrupts
            BVAL = Arg1
            IRQN = Arg2
            If ((Arg0 == 0x04))
            {
                BLEN = 0x08
            }

            Return (RBUF)
        }

        Method (LSTA, 1, Serialized)
        {
            If (((Arg0 == Zero) || (Arg0 == 0x03)))
            {
                Return (Zero)
            }

            If ((OSYS < 0x07DC))
            {
                Return (Zero)
            }

            Return (0x0F)
        }

        Method (GIRQ, 1, Serialized)
        {
            Return ((0x18 + (Arg0 % 0x60)))
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SIRC)
        {
            Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
            Name (_STA, 0x03)  // _STA: Status
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (ADDB, 3, Serialized)
            {
                Name (BUFF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00001000,         // Address Length
                        _Y1F)
                })
                CreateDWordField (BUFF, \_SB.PCI0.SIRC.ADDB._Y1F._BAS, ADDR)  // _BAS: Base Address
                CreateDWordField (BUFF, \_SB.PCI0.SIRC.ADDB._Y1F._LEN, LENG)  // _LEN: Length
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                     
                    }
                If ((((Arg0 == One) || (Arg0 == 0x03)) || (Arg0 == 0x04)))
                {
                    ADDR = Arg2
                    ConcatenateResTemplate (Local0, BUFF, Local1)
                    Local0 = Local1
                }

                If ((Arg0 == 0x03))
                {
                    ADDR = Arg1
                    ConcatenateResTemplate (Local0, BUFF, Local1)
                    Local0 = Local1
                }

                If ((Arg0 == 0x04))
                {
                    ADDR = (0x08 + Arg1)
                    LENG = 0x0FF8
                    ConcatenateResTemplate (Local0, BUFF, Local1)
                    Local0 = Local1
                }

                Return (Local0)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                     
                    }
                ConcatenateResTemplate (Local0, ADDB (SMD0, SB00, SB10), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD1, SB01, SB11), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD2, SB02, SB12), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD3, SB03, SB13), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD4, SB04, SB14), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD5, SB05, SB15), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD6, SB06, SB16), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD7, SB07, SB17), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD8, SB08, SB18), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD9, SB09, SB19), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMDA, SB0A, SB1A), Local1)
                Local0 = Local1
                If ((^^GPI0._STA () == Zero))
                {
                    ConcatenateResTemplate (Local0, ^^GPI0._CRS (), Local1)
                    Local0 = Local1
                }

                Return (Local0)
            }
        }

        Device (GPI0)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((PCHV () == SPTH))
                {
                    If ((PCHG == 0x02))
                    {
                        Return ("INT3451")
                    }

                    Return ("INT345D")
                }

                Return ("INT344B")
            }

            Name (LINK, "\\_SB.PCI0.GPI0")
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y20)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y21)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y23)
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y22)
                    {
                        0x0000000E,
                    }
                })
                CreateDWordField (RBUF, \_SB.PCI0.GPI0._CRS._Y20._BAS, COM0)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.GPI0._CRS._Y21._BAS, COM1)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.GPI0._CRS._Y22._INT, IRQN)  // _INT: Interrupts
                COM0 = (SBRG + 0x00AF0000)
                COM1 = (SBRG + 0x00AE0000)
                CreateDWordField (RBUF, \_SB.PCI0.GPI0._CRS._Y23._BAS, COM3)  // _BAS: Base Address
                COM3 = (SBRG + 0x00AC0000)
                IRQN = SGIR
                Return (RBUF)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SBRG == Zero))
                {
                    Return (Zero)
                }

                If ((GPEN == Zero))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C0)
        {
            Name (LINK, "\\_SB.PCI0.I2C0")
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB10))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB10)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB10)
            }

            If ((SMD0 != 0x02))
            {
                Name (_HID, "INT3442")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB10))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD0, SB00, SIR0))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD0))
                }
            }

            If ((SMD0 == 0x02))
            {
                Name (_ADR, 0x00150000)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C1)
        {
            Name (LINK, "\\_SB.PCI0.I2C1")
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB11))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB11)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB11)
            }

            If ((SMD1 != 0x02))
            {
                Name (_HID, "INT3443")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB11))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD1, SB01, SIR1))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD1))
                }
            }

            If ((SMD1 == 0x02))
            {
                Name (_ADR, 0x00150001)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C2)
        {
            Name (LINK, "\\_SB.PCI0.I2C2")
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB12))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB12)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB12)
            }

            If ((SMD2 != 0x02))
            {
                Name (_HID, "INT3444")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB12))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD2, SB02, SIR2))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD2))
                }
            }

            If ((SMD2 == 0x02))
            {
                Name (_ADR, 0x00150002)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C3)
        {
            Name (LINK, "\\_SB.PCI0.I2C3")
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB13))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB13)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB13)
            }

            If ((SMD3 != 0x02))
            {
                Name (_HID, "INT3445")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB13))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD3, SB03, SIR3))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD3))
                }
            }

            If ((SMD3 == 0x02))
            {
                Name (_ADR, 0x00150003)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C4)
        {
            Name (LINK, "\\_SB.PCI0.I2C4")
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB14))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB14)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB14)
            }

            If ((SMD4 != 0x02))
            {
                Name (_HID, "INT3446")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB14))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD4, SB04, SIR4))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD4))
                }
            }

            If ((SMD4 == 0x02))
            {
                Name (_ADR, 0x00190002)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C5)
        {
            Name (LINK, "\\_SB.PCI0.I2C5")
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB15))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB15)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB15)
            }

            If ((SMD5 != 0x02))
            {
                Name (_HID, "INT3447")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB15))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD5, SB05, SIR5))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD5))
                }
            }

            If ((SMD5 == 0x02))
            {
                Name (_ADR, 0x00190001)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SPI0)
        {
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB16))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB16)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB16)
            }

            If ((SMD6 != 0x02))
            {
                Name (_HID, "INT3440")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB16))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD6, SB06, SIR6))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD6))
                }
            }

            If ((SMD6 == 0x02))
            {
                Name (_ADR, 0x001E0002)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SPI1)
        {
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB17))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB17)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB17)
            }

            If ((SMD7 != 0x02))
            {
                Name (_HID, "INT3441")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB17))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD7, SB07, SIR7))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD7))
                }
            }

            If ((SMD7 == 0x02))
            {
                Name (_ADR, 0x001E0003)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UA00)
        {
            If ((SMD8 != 0x02))
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((SMD8 == 0x04))
                    {
                        Return (0x020CD041)
                    }
                    Else
                    {
                        Return ("INT3448")
                    }
                }

                Name (_UID, "SerialIoUart0")  // _UID: Unique ID
                Name (_DDN, "SerialIoUart0")  // _DDN: DOS Device Name
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB18))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD8, SB08, SIR8))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD8))
                }
            }

            If ((SMD8 == 0x02))
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }

            If ((SMD8 != 0x04))
            {
                Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                {
                    Return (GETD (SB18))
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                    LPD0 (SB18)
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    LPD3 (SB18)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UA01)
        {
            If ((SMD9 != 0x02))
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((SMD9 == 0x04))
                    {
                        Return (0x020CD041)
                    }
                    Else
                    {
                        Return ("INT3449")
                    }
                }

                Name (_UID, "SerialIoUart1")  // _UID: Unique ID
                Name (_DDN, "SerialIoUart1")  // _DDN: DOS Device Name
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB19))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD9, SB09, SIR9))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD9))
                }
            }

            If ((SMD9 == 0x02))
            {
                Name (_ADR, 0x001E0001)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }

            If ((SMD9 != 0x04))
            {
                Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                {
                    Return (GETD (SB19))
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                    LPD0 (SB19)
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    LPD3 (SB19)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UA02)
        {
            If ((SMDA != 0x02))
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((SMDA == 0x04))
                    {
                        Return (0x020CD041)
                    }
                    Else
                    {
                        Return ("INT344A")
                    }
                }

                Name (_UID, "SerialIoUart2")  // _UID: Unique ID
                Name (_DDN, "SerialIoUart2")  // _DDN: DOS Device Name
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB1A))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMDA, SB0A, SIRA))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMDA))
                }
            }

            If ((SMDA == 0x02))
            {
                Name (_ADR, 0x00190000)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }

            If ((SMDA != 0x04))
            {
                Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                {
                    Return (GETD (SB1A))
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                    LPD0 (SB1A)
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    LPD3 (SB1A)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Name (HIDG, ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */)
        Name (TP7G, ToUUID ("ef87eb82-f951-46da-84ec-14871ac6f84b"))
        Method (HIDD, 5, Serialized)
        {
            If ((Arg0 == HIDG))
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == One))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                           
                        })
                    }
                }

                If ((Arg2 == One))
                {
                    Return (Arg4)
                }
            }

            Return (Buffer (One)
            {
                 0x00                                           
            })
        }

        Method (TP7D, 6, Serialized)
        {
            If ((Arg0 == TP7G))
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == One))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                           
                        })
                    }
                }

                If ((Arg2 == One))
                {
                    Return (ConcatenateResTemplate (Arg4, Arg5))
                }
            }

            Return (Buffer (One)
            {
                 0x00                                           
            })
        }
    }

    Scope (_SB.PCI0.I2C0)
    {
        Device (TPD0)
        {
            Name (HID2, Zero)
            Name (SBFB, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                    0x00, ResourceConsumer, _Y24, Exclusive,
                    )
            })
            Name (SBFI, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y25)
                {
                    0x00000000,
                }
            })
            Name (SBFG, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                    "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
            })
            CreateWordField (SBFB, \_SB.PCI0.I2C0.TPD0._Y24._ADR, BADR)  // _ADR: Address
            CreateDWordField (SBFB, \_SB.PCI0.I2C0.TPD0._Y24._SPE, SPED)  // _SPE: Speed
            CreateWordField (SBFG, 0x17, INT1)
            CreateDWordField (SBFI, \_SB.PCI0.I2C0.TPD0._Y25._INT, INT2)  // _INT: Interrupts
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((OSYS < 0x07DC))
                {
                    SRXO (GPDI, One)
                }

                INT1 = GNUM (GPDI)
                INT2 = INUM (GPDI)
                If ((SDM0 == Zero))
                {
                    SHPO (GPDI, One)
                }

                If ((SDS0 == One))
                {
                    _HID = "SYNA2393"
                    HID2 = 0x20
                    Return (Zero)
                }

                If ((SDS0 == 0x02))
                {
                    _HID = "06CB2846"
                    HID2 = 0x20
                    Return (Zero)
                }

                If ((SDS0 == 0x06))
                {
                    _HID = "ALPS0000"
                    HID2 = 0x20
                    BADR = 0x2C
                    Return (Zero)
                }

                If ((SDS0 == 0x05))
                {
                    _HID = "CUST0001"
                    HID2 = TPDH
                    BADR = TPDB
                    If ((TPDS == Zero))
                    {
                        SPED = 0x000186A0
                    }

                    If ((TPDS == One))
                    {
                        SPED = 0x00061A80
                    }

                    If ((TPDS == 0x02))
                    {
                        SPED = 0x000F4240
                    }

                    Return (Zero)
                }
            }

            Name (_HID, "XXXX0000")  // _HID: Hardware ID
            Name (_CID, "PNP0C50")  // _CID: Compatible ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == HIDG))
                {
                    Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                }

                If ((Arg0 == TP7G))
                {
                    Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((OSYS < 0x07DC))
                {
                    Return (SBFI)
                }

                If ((SDM0 == Zero))
                {
                    Return (ConcatenateResTemplate (SBFB, SBFG))
                }

                Return (ConcatenateResTemplate (SBFB, SBFI))
            }
        }

        Device (HDAC)
        {
            Name (_HID, "INT0000")  // _HID: Hardware ID
            Name (_CID, "INT0000")  // _CID: Compatible ID
            Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Name (CADR, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (((I2SC == One) || (I2SC == 0x02)))
                {
                    _HID = "INT343A"
                    _CID = "INT343A"
                    CADR = 0x1C
                    Return (Zero)
                }

                If ((I2SC == 0x03))
                {
                    _HID = "INT343B"
                    _CID = "INT343B"
                    CADR = 0x34
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFB, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                        0x00, ResourceConsumer, _Y26, Exclusive,
                        )
                })
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y27)
                    {
                        0x00000000,
                    }
                })
                CreateWordField (SBFB, \_SB.PCI0.I2C0.HDAC._CRS._Y26._ADR, ADR)  // _ADR: Address
                ADR = CADR
                CreateDWordField (SBFI, \_SB.PCI0.I2C0.HDAC._CRS._Y27._INT, AINT)  // _INT: Interrupts
                AINT = INUM (0x02040016)
                If ((HAID == One))
                {
                    Return (SBFB)
                }

                Return (ConcatenateResTemplate (SBFB, SBFI))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((I2SC != Zero))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }

        Device (UCM1)
        {
            Name (_HID, "INT3515")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFB, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y28)
                    {
                        0x00000000,
                    }
                })
                CreateDWordField (SBFI, \_SB.PCI0.I2C0.UCM1._CRS._Y28._INT, GINT)  // _INT: Interrupts
                GINT = INUM (UCG1)
                Return (ConcatenateResTemplate (SBFB, SBFI))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((UCSI == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (UCM2)
        {
            Name (_HID, "INT3515")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFB, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y29)
                    {
                        0x00000000,
                    }
                })
                CreateDWordField (SBFI, \_SB.PCI0.I2C0.UCM2._CRS._Y29._INT, GINT)  // _INT: Interrupts
                GINT = INUM (UCG2)
                Return (ConcatenateResTemplate (SBFB, SBFI))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((UCSI == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PCI0.I2C1)
    {
        Device (TPL1)
        {
            Name (HID2, Zero)
            Name (SBFB, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x004C, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.PCI0.I2C1",
                    0x00, ResourceConsumer, _Y2A, Exclusive,
                    )
            })
            Name (SBFG, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                    "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
            })
            Name (SBFI, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y2B)
                {
                    0x00000000,
                }
            })
            CreateWordField (SBFB, \_SB.PCI0.I2C1.TPL1._Y2A._ADR, BADR)  // _ADR: Address
            CreateDWordField (SBFB, \_SB.PCI0.I2C1.TPL1._Y2A._SPE, SPED)  // _SPE: Speed
            CreateDWordField (SBFI, \_SB.PCI0.I2C1.TPL1._Y2B._INT, INT2)  // _INT: Interrupts
            CreateWordField (SBFG, 0x17, INT1)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((OSYS < 0x07DC))
                {
                    SRXO (GPLI, One)
                }

                INT1 = GNUM (GPLI)
                INT2 = INUM (GPLI)
                If ((SDM1 == Zero))
                {
                    SHPO (GPLI, One)
                }

                If ((TCTP == One))
                {
                    _HID = "SYNA7DB5"
                    HID2 = 0x20
                    BADR = 0x2C
                    SPED = 0x00061A80
                    Return (Zero)
                }

                If ((TCTP == 0x02))
                {
                    _HID = "ELAN0504"
                    HID2 = One
                    BADR = 0x15
                    SPED = 0x00061A80
                    Return (Zero)
                }

                _HID = "ELAN0504"
                HID2 = One
                BADR = 0x15
                SPED = 0x00061A80
                Return (Zero)
            }

            Name (_HID, "XXXX0000")  // _HID: Hardware ID
            Name (_CID, "PNP0C50")  // _CID: Compatible ID
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == HIDG))
                {
                    Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                }

                If ((Arg0 == TP7G))
                {
                    Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSYS < 0x07DD))
                {
                    I2CT = Zero
                    Return (Zero)
                }
                Else
                {
                    I2CT = One
                    Return (0x0F)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((OSYS < 0x07DC))
                {
                    Return (SBFI)
                }

                If ((SDM1 == Zero))
                {
                    Return (ConcatenateResTemplate (SBFB, SBFG))
                }

                Return (ConcatenateResTemplate (SBFB, SBFI))
            }
        }

        Device (IMP3)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "IMPJ0003")  // _HID: Hardware ID
            Name (_CID, "IMPJ0003")  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((HAID == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x006E, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C1",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (SBUF)
            }
        }
    }

    Scope (_SB.PCI0.SPI1)
    {
        Device (FPNT)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((SDS7 == One))
                {
                    Return ("FPC1011")
                }

                If ((SDS7 == 0x02))
                {
                    Return ("FPC1020")
                }

                If ((SDS7 == 0x03))
                {
                    Return ("VFSI6101")
                }

                If ((SDS7 == 0x04))
                {
                    Return ("VFSI7500")
                }

                If ((SDS7 == 0x05))
                {
                    Return ("EGIS0300")
                }

                If ((SDS7 == 0x06))
                {
                    Return ("FPC1021")
                }

                Return ("FPNT_DIS")
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                SHPO (GFPI, One)
                SHPO (GFPS, One)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SDS7 != Zero))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BBUF, ResourceTemplate ()
                {
                    SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                        ControllerInitiated, 0x00989680, ClockPolarityLow,
                        ClockPhaseFirst, "\\_SB.PCI0.SPI1",
                        0x00, ResourceConsumer, _Y2C, Exclusive,
                        )
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0008
                        }
                })
                Name (IBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y2D)
                    {
                        0x00000000,
                    }
                })
                Name (GBUF, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, _Y2E,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                Name (UBUF, ResourceTemplate ()
                {
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                CreateDWordField (BBUF, \_SB.PCI0.SPI1.FPNT._CRS._Y2C._SPE, SPEX)  // _SPE: Speed
                CreateByteField (BBUF, \_SB.PCI0.SPI1.FPNT._CRS._Y2C._PHA, PHAX)  // _PHA: Clock Phase
                CreateWordField (BBUF, 0x3B, SPIN)
                CreateWordField (GBUF, 0x17, GPIN)
                CreateDWordField (IBUF, \_SB.PCI0.SPI1.FPNT._CRS._Y2D._INT, IPIN)  // _INT: Interrupts
                CreateBitField (IBUF, \_SB.PCI0.SPI1.FPNT._CRS._Y2D._LL, ILVL)  // _LL_: Low Level
                CreateBitField (IBUF, \_SB.PCI0.SPI1.FPNT._CRS._Y2D._HE, ITRG)  // _HE_: High-Edge
                CreateField (GBUF, \_SB.PCI0.SPI1.FPNT._CRS._Y2E._POL, 0x02, GLVL)  // _POL: Polarity
                CreateBitField (GBUF, \_SB.PCI0.SPI1.FPNT._CRS._Y2E._MOD, GTRG)  // _MOD: Mode
                CreateBitField (BBUF, \_SB.PCI0.SPI1.FPNT._CRS._Y2C._DPL, SCSP)  // _DPL: Device Selection Polarity
                CreateWordField (UBUF, 0x17, UPIN)
                SPIN = GNUM (GFPS)
                GPIN = GNUM (GFPI)
                IPIN = INUM (GFPI)
                UPIN = GNUM (GFPI)
                If (((SDS7 == 0x02) || (SDS7 == 0x06)))
                {
                    ILVL = Zero
                    ITRG = One
                    GLVL = Zero
                    GTRG = One
                }

                If ((SDS7 == 0x04))
                {
                    ILVL = Zero
                    ITRG = One
                }

                Switch (ToInteger (SDS7))
                {
                    Case (One)
                    {
                        SPEX = 0x00989680
                        PHAX = Zero
                    }
                    Case (0x02)
                    {
                        SPEX = 0x002DC6C0
                        PHAX = Zero
                    }
                    Case (0x03)
                    {
                        SPEX = 0x007A1200
                        PHAX = One
                    }
                    Case (0x04)
                    {
                        SPEX = 0x007A1200
                        PHAX = Zero
                    }
                    Case (0x05)
                    {
                        SPEX = 0x00F42400
                        PHAX = Zero
                    }
                    Case (0x06)
                    {
                        SPEX = 0x002DC6C0
                        PHAX = Zero
                    }
                    Default
                    {
                    }

                }

                If ((SDS7 == One))
                {
                    Return (BBUF)
                }

                If (((SDS7 == 0x04) && (SDM7 == Zero)))
                {
                    Return (ConcatenateResTemplate (BBUF, ConcatenateResTemplate (UBUF, GBUF)))
                }

                If (((SDS7 == 0x04) && (SDM7 != Zero)))
                {
                    Return (ConcatenateResTemplate (BBUF, ConcatenateResTemplate (UBUF, IBUF)))
                }

                If ((SDM7 == Zero))
                {
                    Return (ConcatenateResTemplate (BBUF, GBUF))
                }

                Return (ConcatenateResTemplate (BBUF, IBUF))
            }
        }
    }

    Scope (_SB.PCI0.UA00)
    {
        Device (BTH0)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((SDS8 == One))
                {
                    Return ("INT33E1")
                }

                If ((SDS8 == 0x02))
                {
                    Return ("BCM2E40")
                }

                Return ("INT33E1")
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                SHPO (GBTI, One)
                SHPO (GBTW, One)
                SHPO (GBTK, One)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFG, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                        0x0020, 0x0020, "\\_SB.PCI0.UA00",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                    GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                CreateWordField (SBFG, 0x8C, INT3)
                CreateWordField (SBFG, 0x3C, WAK3)
                CreateWordField (SBFG, 0x64, KIL3)
                INT3 = GNUM (GBTI)
                WAK3 = GNUM (GBTW)
                KIL3 = GNUM (GBTK)
                Name (SBFI, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                        0x0020, 0x0020, "\\_SB.PCI0.UA00",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                    Interrupt (ResourceConsumer, Edge, ActiveLow, ExclusiveAndWake, ,, _Y2F)
                    {
                        0x00000000,
                    }
                })
                CreateDWordField (SBFI, \_SB.PCI0.UA00.BTH0._CRS._Y2F._INT, INT4)  // _INT: Interrupts
                CreateWordField (SBFI, 0x3C, WAK4)
                CreateWordField (SBFI, 0x64, KIL4)
                INT4 = INUM (GBTI)
                WAK4 = GNUM (GBTW)
                KIL4 = GNUM (GBTK)
                If ((SDM8 == Zero))
                {
                    Return (SBFG)
                }
                Else
                {
                    Return (SBFI)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SDS8 != Zero))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Name (_S0W, 0x02)  // _S0W: S0 Device Wake State
        }
    }

    Scope (_SB.PCI0)
    {
        Device (GNSS)
        {
            Name (_HID, "INT33A2")  // _HID: Hardware ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF1, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                        0x0040, 0x0040, "\\_SB.PCI0.UA01",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Name (BUF2, ResourceTemplate ()
                {
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                CreateWordField (BUF2, 0x17, RPIN)
                RPIN = GNUM (GGNR)
                If ((GNSC == One))
                {
                    Return (ConcatenateResTemplate (BUF1, BUF2))
                }
                Else
                {
                    Return (BUF2)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((GNSC == Zero))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (GEXP)
        {
            Name (_ADR, One)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
            OperationRegion (BAR0, SystemMemory, SB04, 0x0208)
            Field (BAR0, DWordAcc, NoLock, Preserve)
            {
                ICON,   32, 
                TAR,    32, 
                Offset (0x10), 
                DATA,   32, 
                HCNT,   32, 
                LCNT,   32, 
                Offset (0x2C), 
                    ,   5, 
                ABRT,   1, 
                Offset (0x40), 
                RBCK,   32, 
                Offset (0x54), 
                CLR,    32, 
                Offset (0x6C), 
                ENB,    1, 
                Offset (0x70), 
                ACTV,   1, 
                TFNF,   1, 
                    ,   1, 
                RFNE,   1, 
                Offset (0x7C), 
                HOLD,   32, 
                Offset (0x9C), 
                ENSB,   1, 
                Offset (0x204), 
                RST,    32
            }

            Method (SGEP, 3, Serialized)
            {
                CSER (GEXN, Arg0, Arg1, Arg2, Zero)
            }

            Method (SGED, 3, Serialized)
            {
                CSER (GEXN, Arg0, Arg1, Arg2, One)
            }

            Method (GEPS, 2, Serialized)
            {
                Return (CSER (GEXN, Arg0, Arg1, Zero, 0x02))
            }

            Method (SGEI, 3, Serialized)
            {
                CSER (GEXN, Arg0, Arg1, Arg2, 0x03)
            }

            Method (INVC, 0, NotSerialized)
            {
                Local0 = Zero
                While ((Local0 < 0x10))
                {
                    If ((R3DC (Zero, Local0, Zero) == 0x02))
                    {
                        W3DC (Zero, Local0, Zero, One)
                    }

                    If ((R3DC (One, Local0, Zero) == 0x02))
                    {
                        W3DC (One, Local0, Zero, One)
                    }

                    Local0 += One
                }
            }

            Name (PPR, 0x08)
            Name (INR, Package (0x03)
            {
                Zero, 
                One, 
                0x02
            })
            Name (OUTR, Package (0x03)
            {
                0x04, 
                0x05, 
                0x06
            })
            Name (CFGR, Package (0x03)
            {
                0x0C, 
                0x0D, 
                0x0E
            })
            Name (POLR, Package (0x03)
            {
                0x08, 
                0x09, 
                0x0A
            })
            Name (EXPA, 0x22)
            Name (UCCH, One)
            Name (END, 0x0200)
            Name (READ, 0x0100)
            Name (TEMP, Zero)
            Name (CACH, Package (0x02)
            {
                Package (0x10)
                {
                    Package (0x02)
                    {
                        Zero, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        Zero, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        Zero, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x03, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x03, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x03, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x03, 
                        Zero
                    }
                }, 

                Package (0x10)
                {
                    Package (0x02)
                    {
                        Zero, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        Zero, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        Zero, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x03, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x03, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x03, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x03, 
                        Zero
                    }
                }
            })
            Method (W3DC, 4, NotSerialized)
            {
                DerefOf (DerefOf (CACH [Arg0]) [Arg1]) [Arg2] = Arg3
            }

            Method (R3DC, 3, NotSerialized)
            {
                Return (DerefOf (DerefOf (DerefOf (CACH [Arg0]) [Arg1]) [Arg2]))
            }

            Method (WREG, 4, Serialized)
            {
                Local1 = (Timer + 0xC350)
                RST = 0x07
                ENB = Zero
                TEMP = RBCK
                TEMP = CLR
                HOLD = 0x001C001C
                HCNT = 0x0210
                LCNT = 0x0280
                TAR = (EXPA + Arg1)
                ICON = 0x65
                ENB = One
                While ((ENSB != One))
                {
                    If ((Timer > Local1))
                    {
                        Return (Zero)
                    }
                }

                DATA = Arg2
                DATA = (END + Arg3)
                While ((ACTV != Zero))
                {
                    If ((Timer > Local1))
                    {
                        Return (Zero)
                    }
                }

                ENB = Zero
                While ((ENSB != Zero))
                {
                    If ((Timer > Local1))
                    {
                        Return (Zero)
                    }
                }

                W3DC (Arg1, Arg2, One, Arg3)
                If ((R3DC (Arg1, Arg2, Zero) == One))
                {
                    W3DC (Arg1, Arg2, Zero, 0x02)
                }

                Return (Zero)
            }

            Method (RREG, 3, Serialized)
            {
                If ((UCCH == One))
                {
                    If ((R3DC (Arg1, Arg2, Zero) == 0x02))
                    {
                        Return (R3DC (Arg1, Arg2, One))
                    }
                }

                Local1 = (Timer + 0xC350)
                RST = 0x07
                ENB = Zero
                TEMP = RBCK
                TEMP = CLR
                HOLD = 0x001C001C
                HCNT = 0x0210
                LCNT = 0x0280
                TAR = (EXPA + Arg1)
                ICON = 0x65
                ENB = One
                While ((ENSB != One))
                {
                    If ((Timer > Local1))
                    {
                        Return (Zero)
                    }
                }

                DATA = Arg2
                DATA = (END + READ)
                While ((ACTV != Zero))
                {
                    If ((Timer > Local1))
                    {
                        Return (Zero)
                    }
                }

                Local0 = DATA
                ENB = Zero
                While ((ENSB != Zero))
                {
                    If ((Timer > Local1))
                    {
                        Return (Zero)
                    }
                }

                Return (Local0)
            }

            Method (PS0, 1, Serialized)
            {
                OperationRegion (BAR1, SystemMemory, Arg0, 0x88)
                Field (BAR1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    D0D3,   2
                }

                D0D3 = Zero
                TEMP = D0D3
            }

            Method (PS3, 1, Serialized)
            {
                OperationRegion (BAR1, SystemMemory, Arg0, 0x88)
                Field (BAR1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    D0D3,   2
                }

                D0D3 = 0x03
                TEMP = D0D3
            }

            Method (CSER, 5, Serialized)
            {
                Name (SB1X, Zero)
                Name (SB0X, Zero)
                Name (SMDX, Zero)
                Name (PINN, Zero)
                Name (REGN, Zero)
                Name (REGA, Zero)
                Name (OLDV, Zero)
                Name (NEWV, Zero)
                Name (RETV, Zero)
                If ((Arg0 > 0x05))
                {
                    Return (Zero)
                }

                If ((Arg0 == Zero))
                {
                    SB1X = SB10
                    SB0X = SB00
                    SMDX = SMD0
                }

                If ((Arg0 == One))
                {
                    SB1X = SB11
                    SB0X = SB01
                    SMDX = SMD1
                }

                If ((Arg0 == 0x02))
                {
                    SB1X = SB12
                    SB0X = SB02
                    SMDX = SMD2
                }

                If ((Arg0 == 0x03))
                {
                    SB1X = SB13
                    SB0X = SB03
                    SMDX = SMD3
                }

                If ((Arg0 == 0x04))
                {
                    SB1X = SB14
                    SB0X = SB04
                    SMDX = SMD4
                }

                If ((Arg0 == 0x05))
                {
                    SB1X = SB15
                    SB0X = SB05
                    SMDX = SMD5
                }

                If ((Arg0 > 0x05))
                {
                    Return (Zero)
                }

                If ((Arg1 > One))
                {
                    Return (Zero)
                }

                If ((Arg2 > 0x17))
                {
                    Return (Zero)
                }

                If ((Arg3 > One))
                {
                    Return (Zero)
                }

                If ((Arg4 > 0x02))
                {
                    Return (Zero)
                }

                If ((SMDX != 0x03))
                {
                    Return (Zero)
                }

                If ((Arg4 == Zero))
                {
                    Local0 = OUTR
                }

                If ((Arg4 == One))
                {
                    Local0 = CFGR
                }

                If ((Arg4 == 0x02))
                {
                    Local0 = INR
                }

                If ((Arg4 == 0x03))
                {
                    Local0 = POLR
                }

                PS0 (SB1X)
                Divide (Arg2, PPR, PINN, REGN)
                REGA = DerefOf (Local0 [REGN])
                OLDV = RREG (SB0X, Arg1, REGA)
                If ((Arg4 == 0x02))
                {
                    RETV = (One & (OLDV >> PINN))
                }
                Else
                {
                    NEWV = (OLDV & ~(One << PINN))
                    NEWV |= (Arg3 << PINN)
                    If ((NEWV != OLDV))
                    {
                        WREG (SB0X, Arg1, REGA, NEWV)
                    }
                }

                PS3 (SB1X)
                Return (RETV)
            }
        }
    }

    If ((PCHV () == SPTL))
    {
        Scope (_SB.PCI0)
        {
            Device (PEMC)
            {
                Name (_ADR, 0x001E0004)  // _ADR: Address
                OperationRegion (SCSR, PCI_Config, Zero, 0x0100)
                Field (SCSR, WordAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    PSTA,   32, 
                    Offset (0xA2), 
                        ,   2, 
                    PGEN,   1
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    PGEN = Zero
                    PCRA (0xC0, 0x0600, 0x7FFFFFBA)
                    Sleep (0x02)
                    PCRO (0xC0, 0x0600, 0x80000045)
                    PSTA &= 0xFFFFFFFC
                    TEMP = PSTA
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    PGEN = One
                    PSTA |= 0x03
                    TEMP = PSTA
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    ADBG (Concatenate ("EMH4=", ToDecimalString (EMH4)))
                    If ((Arg0 == ToUUID ("f6c13ea5-65cd-461f-ab7a-29f7e8d5bd61")))
                    {
                        If ((Arg1 >= Zero))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    If ((EMH4 == One))
                                    {
                                        Return (Buffer (0x02)
                                        {
                                             0x61, 0x02                                     
                                        })
                                    }

                                    Return (Buffer (0x02)
                                    {
                                         0x21, 0x02                                     
                                    })
                                }
                                Case (0x05)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                           
                                    })
                                }
                                Case (0x06)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x05                                           
                                    })
                                }
                                Case (0x09)
                                {
                                    Switch (EMDS)
                                    {
                                        Case (Zero)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x00                                           
                                            })
                                        }
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                           
                                            })
                                        }
                                        Case (0x04)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x04                                           
                                            })
                                        }

                                    }
                                }

                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (CARD)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PSDC)
            {
                Name (_ADR, 0x001E0006)  // _ADR: Address
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                OperationRegion (SCSR, PCI_Config, Zero, 0x0100)
                Field (SCSR, WordAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    PSTA,   32, 
                    Offset (0xA2), 
                        ,   2, 
                    PGEN,   1
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    PGEN = Zero
                    PCRA (0xC0, 0x0600, 0xFFFFFE7A)
                    Sleep (0x02)
                    PCRO (0xC0, 0x0600, 0x0185)
                    PSTA &= 0xFFFFFFFC
                    TEMP = PSTA
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    PGEN = One
                    PSTA |= 0x03
                    TEMP = PSTA
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("f6c13ea5-65cd-461f-ab7a-29f7e8d5bd61")))
                    {
                        If ((Arg1 >= Zero))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x19                                           
                                    })
                                }
                                Case (0x03)
                                {
                                    Sleep (0x64)
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }
                                Case (0x04)
                                {
                                    Sleep (0x64)
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }

                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (ISHD)
        {
            Name (_ADR, 0x00130000)  // _ADR: Address
            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (HECI)
        {
            Name (_ADR, 0x00160000)  // _ADR: Address
            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    Name (ECUP, One)
    Mutex (EHLD, 0x00)
    Scope (\)
    {
        Device (CHUB)
        {
            Name (_HID, EisaId ("INT339B"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((CHEN == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                {
                    If ((ToInteger (Arg1) >= Zero))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Case (One)
                            {
                                Switch (ToInteger (DerefOf (Arg3 [Zero])))
                                {
                                    Case (Zero)
                                    {
                                    }

                                }
                            }

                        }

                        Return (Zero)
                    }

                    Return (Zero)
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    Scope (_SB)
    {
        OperationRegion (ITSS, SystemMemory, 0xFDC43100, 0x0208)
        Field (ITSS, ByteAcc, NoLock, Preserve)
        {
            PARC,   8, 
            PBRC,   8, 
            PCRC,   8, 
            PDRC,   8, 
            PERC,   8, 
            PFRC,   8, 
            PGRC,   8, 
            PHRC,   8, 
            Offset (0x200), 
                ,   1, 
                ,   1, 
            SCGE,   1
        }
    }

    Mutex (MUTX, 0x00)
    OperationRegion (PRT0, SystemIO, 0x80, 0x02)
    Field (PRT0, WordAcc, Lock, Preserve)
    {
        P80B,   16
    }

    Name (P80T, Zero)
    Method (D8XH, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            P80T = ((P80T & 0xFF00) | (Arg1 & 0xFF))
        }

        If ((Arg0 == One))
        {
            P80T = ((P80T & 0xFF) | (Arg1 << 0x08))
        }

        P80B = P80T
        Local0 = POS0
        POS1 = Local0
        POS0 = P80T
    }

    Method (P8XH, 2, Serialized)
    {
        If (CondRefOf (MDBG))
        {
            D8XH (Arg0, Arg1)
        }
    }

    Method (ADBG, 1, Serialized)
    {
        If (CondRefOf (MDBG))
        {
            Return (MDBG (Arg0))
        }

        Return (Zero)
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        PICM = Arg0
    }

    Method (RPTS, 1, NotSerialized)
    {
        P80T = Zero
        D8XH (Zero, Arg0)
        ADBG (Concatenate ("_PTS=", ToHexString (Arg0)))
        If ((Arg0 == 0x03))
        {
            If (CondRefOf (\_PR.DTSE))
            {
                If ((\_PR.DTSE && (TCNT > One)))
                {
                    TRAP (0x02, 0x1E)
                }
            }
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((CondRefOf (\_SB.PCI0.LPCB.H_EC.PB10) && ECON))
            {
                If (\_SB.PCI0.LPCB.H_EC.ECAV)
                {
                    If (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PB10)))
                    {
                        PB1E |= 0x80
                    }
                    Else
                    {
                        PB1E &= 0x7F
                    }
                }
            }
        }

        If ((IVCM == One))
        {
            \_SB.SGOV (0x02040000, Zero)
            \_SB.SGOV (0x02010002, Zero)
        }

        If (CondRefOf (\_SB.TPM.PTS))
        {
            \_SB.TPM.PTS (Arg0)
        }

        If ((((Arg0 == 0x03) || (Arg0 == 0x04)) || (Arg0 == 0x05)))
        {
            If ((PFLV == 0x02))
            {
                \_SB.SGOV (0x02010003, One)
            }
        }

        \_SB.PCI0.LPCB.EC0.EC_S (Arg0)
    }

    Method (PBCL, 0, NotSerialized)
    {
        Return (Package (0x67)
        {
            0x50, 
            0x32, 
            Zero, 
            One, 
            0x02, 
            0x03, 
            0x04, 
            0x05, 
            0x06, 
            0x07, 
            0x08, 
            0x09, 
            0x0A, 
            0x0B, 
            0x0C, 
            0x0D, 
            0x0E, 
            0x0F, 
            0x10, 
            0x11, 
            0x12, 
            0x13, 
            0x14, 
            0x15, 
            0x16, 
            0x17, 
            0x18, 
            0x19, 
            0x1A, 
            0x1B, 
            0x1C, 
            0x1D, 
            0x1E, 
            0x1F, 
            0x20, 
            0x21, 
            0x22, 
            0x23, 
            0x24, 
            0x25, 
            0x26, 
            0x27, 
            0x28, 
            0x29, 
            0x2A, 
            0x2B, 
            0x2C, 
            0x2D, 
            0x2E, 
            0x2F, 
            0x30, 
            0x31, 
            0x32, 
            0x33, 
            0x34, 
            0x35, 
            0x36, 
            0x37, 
            0x38, 
            0x39, 
            0x3A, 
            0x3B, 
            0x3C, 
            0x3D, 
            0x3E, 
            0x3F, 
            0x40, 
            0x41, 
            0x42, 
            0x43, 
            0x44, 
            0x45, 
            0x46, 
            0x47, 
            0x48, 
            0x49, 
            0x4A, 
            0x4B, 
            0x4C, 
            0x4D, 
            0x4E, 
            0x4F, 
            0x50, 
            0x51, 
            0x52, 
            0x53, 
            0x54, 
            0x55, 
            0x56, 
            0x57, 
            0x58, 
            0x59, 
            0x5A, 
            0x5B, 
            0x5C, 
            0x5D, 
            0x5E, 
            0x5F, 
            0x60, 
            0x61, 
            0x62, 
            0x63, 
            0x64
        })
    }

    Method (RWAK, 1, Serialized)
    {
        D8XH (One, 0xAB)
        D8XH (Zero, Arg0)
        ADBG ("_WAK")
        \_TZ.FCRN = Zero
        \_SB.PCI0.GEXP.INVC ()
        If ((S0ID == One))
        {
            \_SB.SCGE = One
        }

        If (NEXP)
        {
            If ((OSCC & One))
            {
                \_SB.PCI0.NHPG ()
            }

            If ((OSCC & 0x04))
            {
                \_SB.PCI0.NPME ()
            }
        }

        If ((Arg0 == 0x03))
        {
            If ((Zero == ACTT))
            {
                If ((ECON == One))
                {
                    \_SB.PCI0.LPCB.H_EC.ECWT (Zero, RefOf (\_SB.PCI0.LPCB.H_EC.CFAN))
                }
            }
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((CondRefOf (\_SB.PCI0.LPCB.H_EC.PB10) && ECON))
            {
                If ((PB1E & 0x80))
                {
                    \_SB.PCI0.LPCB.H_EC.ECWT (One, RefOf (\_SB.PCI0.LPCB.H_EC.PB10))
                }
            }

            If ((GBSX & 0x40))
            {
                \_SB.PCI0.GFX0.IUEH (0x06)
            }

            If ((GBSX & 0x80))
            {
                \_SB.PCI0.GFX0.IUEH (0x07)
            }

            If (CondRefOf (\_PR.DTSE))
            {
                If ((\_PR.DTSE && (TCNT > One)))
                {
                    TRAP (0x02, 0x14)
                }
            }

            If ((\_SB.PCI0.RP01.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP01, Zero)
            }

            If ((\_SB.PCI0.RP02.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP02, Zero)
            }

            If ((\_SB.PCI0.RP03.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP03, Zero)
            }

            If ((\_SB.PCI0.RP04.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP04, Zero)
            }

            If ((\_SB.PCI0.RP05.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP05, Zero)
            }

            If ((\_SB.PCI0.RP06.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP06, Zero)
            }

            If ((\_SB.PCI0.RP07.VDID != 0xFFFFFFFF))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PCI0.RP07, Zero)
                }
            }

            If ((\_SB.PCI0.RP08.VDID != 0xFFFFFFFF))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PCI0.RP08, Zero)
                }
            }

            If ((\_SB.PCI0.RP09.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP09, Zero)
            }

            If ((\_SB.PCI0.RP10.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP10, Zero)
            }

            If ((\_SB.PCI0.RP11.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP11, Zero)
            }

            If ((\_SB.PCI0.RP12.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP12, Zero)
            }

            If ((\_SB.PCI0.RP13.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP13, Zero)
            }

            If ((\_SB.PCI0.RP14.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP14, Zero)
            }

            If ((\_SB.PCI0.RP15.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP15, Zero)
            }

            If ((\_SB.PCI0.RP16.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP16, Zero)
            }

            If ((\_SB.PCI0.RP17.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP17, Zero)
            }

            If ((\_SB.PCI0.RP18.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP18, Zero)
            }

            If ((\_SB.PCI0.RP19.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP19, Zero)
            }

            If ((\_SB.PCI0.RP20.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP20, Zero)
            }

            If ((\_SB.PCI0.RP21.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP21, Zero)
            }

            If ((\_SB.PCI0.RP22.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP22, Zero)
            }

            If ((\_SB.PCI0.RP23.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP23, Zero)
            }

            If ((\_SB.PCI0.RP24.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP24, Zero)
            }

            If (CondRefOf (\_SB.VMEN))
            {
                \_SB.VMEN = 0xFF
            }
        }

        If ((Arg0 == 0x03))
        {
            Notify (\_SB.PWRB, 0x02)
        }

        \_SB.PCI0.LPCB.EC0.EC_W (Arg0)
        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Method (GETB, 3, Serialized)
    {
        Local0 = (Arg0 * 0x08)
        Local1 = (Arg1 * 0x08)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3)
    }

    Method (PNOT, 0, Serialized)
    {
        If ((TCNT > One))
        {
            If ((PC00 & 0x08))
            {
                Notify (\_PR.PR00, 0x80)
            }

            If ((PC01 & 0x08))
            {
                Notify (\_PR.PR01, 0x80)
            }

            If ((PC02 & 0x08))
            {
                Notify (\_PR.PR02, 0x80)
            }

            If ((PC03 & 0x08))
            {
                Notify (\_PR.PR03, 0x80)
            }

            If ((PC04 & 0x08))
            {
                Notify (\_PR.PR04, 0x80)
            }

            If ((PC05 & 0x08))
            {
                Notify (\_PR.PR05, 0x80)
            }

            If ((PC06 & 0x08))
            {
                Notify (\_PR.PR06, 0x80)
            }

            If ((PC07 & 0x08))
            {
                Notify (\_PR.PR07, 0x80)
            }

            If ((PC08 & 0x08))
            {
                Notify (\_PR.PR08, 0x80)
            }

            If ((PC09 & 0x08))
            {
                Notify (\_PR.PR09, 0x80)
            }

            If ((PC10 & 0x08))
            {
                Notify (\_PR.PR10, 0x80)
            }

            If ((PC11 & 0x08))
            {
                Notify (\_PR.PR11, 0x80)
            }

            If ((PC12 & 0x08))
            {
                Notify (\_PR.PR12, 0x80)
            }

            If ((PC13 & 0x08))
            {
                Notify (\_PR.PR13, 0x80)
            }

            If ((PC14 & 0x08))
            {
                Notify (\_PR.PR14, 0x80)
            }

            If ((PC15 & 0x08))
            {
                Notify (\_PR.PR15, 0x80)
            }
        }
        Else
        {
            Notify (\_PR.PR00, 0x80)
        }

        If ((TCNT > One))
        {
            If (((PC00 & 0x08) && (PC00 & 0x10)))
            {
                Notify (\_PR.PR00, 0x81)
            }

            If (((PC01 & 0x08) && (PC01 & 0x10)))
            {
                Notify (\_PR.PR01, 0x81)
            }

            If (((PC02 & 0x08) && (PC02 & 0x10)))
            {
                Notify (\_PR.PR02, 0x81)
            }

            If (((PC03 & 0x08) && (PC03 & 0x10)))
            {
                Notify (\_PR.PR03, 0x81)
            }

            If (((PC04 & 0x08) && (PC04 & 0x10)))
            {
                Notify (\_PR.PR04, 0x81)
            }

            If (((PC05 & 0x08) && (PC05 & 0x10)))
            {
                Notify (\_PR.PR05, 0x81)
            }

            If (((PC06 & 0x08) && (PC06 & 0x10)))
            {
                Notify (\_PR.PR06, 0x81)
            }

            If (((PC07 & 0x08) && (PC07 & 0x10)))
            {
                Notify (\_PR.PR07, 0x81)
            }

            If (((PC08 & 0x08) && (PC08 & 0x10)))
            {
                Notify (\_PR.PR08, 0x81)
            }

            If (((PC09 & 0x08) && (PC09 & 0x10)))
            {
                Notify (\_PR.PR09, 0x81)
            }

            If (((PC10 & 0x08) && (PC10 & 0x10)))
            {
                Notify (\_PR.PR10, 0x81)
            }

            If (((PC11 & 0x08) && (PC11 & 0x10)))
            {
                Notify (\_PR.PR11, 0x81)
            }

            If (((PC12 & 0x08) && (PC12 & 0x10)))
            {
                Notify (\_PR.PR12, 0x81)
            }

            If (((PC13 & 0x08) && (PC13 & 0x10)))
            {
                Notify (\_PR.PR13, 0x81)
            }

            If (((PC14 & 0x08) && (PC14 & 0x10)))
            {
                Notify (\_PR.PR14, 0x81)
            }

            If (((PC15 & 0x08) && (PC15 & 0x10)))
            {
                Notify (\_PR.PR15, 0x81)
            }
        }
        Else
        {
            Notify (\_PR.PR00, 0x81)
        }

        If ((ECON == One))
        {
            Notify (\_SB.PCI0.LPCB.H_EC.BAT0, 0x81)
            Notify (\_SB.PCI0.LPCB.H_EC.BAT1, 0x81)
            Notify (\_SB.PCI0.LPCB.H_EC.BAT2, 0x81)
        }

        If ((DPTF == One))
        {
            Notify (\_SB.IETM, 0x86)
            If ((CHGE == One))
            {
                Notify (\_SB.PCI0.LPCB.H_EC.CHRG, 0x80)
            }
        }
    }

    OperationRegion (MBAR, SystemMemory, (\_SB.PCI0.GMHB () + 0x5000), 0x1000)
    Field (MBAR, ByteAcc, NoLock, Preserve)
    {
        Offset (0x938), 
        PWRU,   4, 
        Offset (0x9A0), 
        PPL1,   15, 
        PL1E,   1, 
        CLP1,   1
    }

    Name (CLMP, Zero)
    Name (PLEN, Zero)
    Name (PLSV, 0x8000)
    Name (CSEM, Zero)
    Method (SPL1, 0, Serialized)
    {
        Name (PPUU, Zero)
        If ((CSEM == One))
        {
            Return (Zero)
        }

        CSEM = One
        PLSV = PPL1
        PLEN = PL1E
        CLMP = CLP1
        If ((PWRU == Zero))
        {
            PPUU = One
        }
        Else
        {
            PPUU = (PWRU-- << 0x02)
        }

        Local0 = (PLVL * PPUU)
        Local1 = (Local0 / 0x03E8)
        PPL1 = Local1
        PL1E = One
        CLP1 = One
    }

    Method (RPL1, 0, Serialized)
    {
        PPL1 = PLSV
        PL1E = PLEN
        CLP1 = CLMP
        CSEM = Zero
    }

    Name (UAMS, Zero)
    Name (GLCK, Zero)
    Method (GUAM, 1, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                If ((GLCK == One))
                {
                    GLCK = Zero
                    P8XH (Zero, 0xE1)
                    P8XH (One, 0xAB)
                    ADBG ("Exit Resiliency")
                    \_SB.DION ()
                    If ((OSYS < 0x07DF))
                    {
                        \_SB.PCI0.LPCB.H_EC.ECNT (Zero)
                    }

                    If (PSCP)
                    {
                        If (CondRefOf (\_PR.PR00._PPC))
                        {
                            \_PR.CPPC = Zero
                            PNOT ()
                        }
                    }

                    If (PLCS)
                    {
                        RPL1 ()
                    }
                }
            }
            Case (One)
            {
                If ((GLCK == Zero))
                {
                    GLCK = One
                    P8XH (Zero, 0xE0)
                    P8XH (One, Zero)
                    ADBG ("Enter Resiliency")
                    \_SB.DIOF ()
                    If ((OSYS < 0x07DF))
                    {
                        \_SB.PCI0.LPCB.H_EC.ECNT (One)
                    }

                    If (PSCP)
                    {
                        If ((CondRefOf (\_PR.PR00._PSS) && CondRefOf (\_PR.PR00._PPC)))
                        {
                            If ((PC00 & 0x0400))
                            {
                                \_PR.CPPC = (SizeOf (\_PR.PR00.TPSS) - One)
                            }
                            Else
                            {
                                \_PR.CPPC = (SizeOf (\_PR.PR00.LPSS) - One)
                            }

                            PNOT ()
                        }
                    }

                    If (PLCS)
                    {
                        SPL1 ()
                    }
                }
            }
            Default
            {
                Return (Zero)
            }

        }

        UAMS = (Arg0 && !PWRS)
        P_CS ()
    }

    Method (P_CS, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.PAUD.PUAM))
        {
            \_SB.PCI0.PAUD.PUAM ()
        }

        If ((OSYS == 0x07DC))
        {
            If (CondRefOf (\_SB.PCI0.XHC.DUAM))
            {
                \_SB.PCI0.XHC.DUAM ()
            }
        }
    }

    Scope (\)
    {
        OperationRegion (IO_H, SystemIO, 0x1000, 0x04)
        Field (IO_H, ByteAcc, NoLock, Preserve)
        {
            TRPH,   8
        }
    }

    Method (TRAP, 2, Serialized)
    {
        SMIF = Arg1
        If ((Arg0 == 0x02))
        {
            \_PR.DTSF = Arg1
            \_PR.TRPD = Zero
            Return (\_PR.DTSF)
        }

        If ((Arg0 == 0x03))
        {
            TRPH = Zero
        }

        If ((Arg0 == 0x04))
        {
            \_PR.TRPF = Zero
        }

        Return (SMIF)
    }

    Scope (_SB.PCI0)
    {
        Method (PTMA, 0, NotSerialized)
        {
            Return (\_PR.BGMA)
        }

        Method (PTMS, 0, NotSerialized)
        {
            Return (\_PR.BGMS)
        }

        Method (PTIA, 0, NotSerialized)
        {
            Return (\_PR.BGIA)
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            OSYS = 0x07D0
            If (CondRefOf (\_OSI))
            {
                If (_OSI ("Windows 2001"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSYS = 0x07D2
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSYS = 0x07D3
                }

                If (_OSI ("Windows 2006"))
                {
                    OSYS = 0x07D6
                }

                If (_OSI ("Windows 2009"))
                {
                    OSYS = 0x07D9
                }

                If (_OSI ("Windows 2012"))
                {
                    OSYS = 0x07DC
                }

                If (_OSI ("Windows 2013"))
                {
                    OSYS = 0x07DD
                }

                If (_OSI ("Windows 2015"))
                {
                    OSYS = 0x07DF
                }
            }

            If (CondRefOf (\_PR.DTSE))
            {
                If ((\_PR.DTSE >= One))
                {
                    \_PR.DSAE = One
                }
            }
        }

        Method (NHPG, 0, Serialized)
        {
            ^RP01.HPEX = Zero
            ^RP02.HPEX = Zero
            ^RP03.HPEX = Zero
            ^RP04.HPEX = Zero
            ^RP05.HPEX = Zero
            ^RP06.HPEX = Zero
            ^RP07.HPEX = Zero
            ^RP08.HPEX = Zero
            ^RP09.HPEX = Zero
            ^RP10.HPEX = Zero
            ^RP11.HPEX = Zero
            ^RP12.HPEX = Zero
            ^RP13.HPEX = Zero
            ^RP14.HPEX = Zero
            ^RP15.HPEX = Zero
            ^RP16.HPEX = Zero
            ^RP17.HPEX = Zero
            ^RP18.HPEX = Zero
            ^RP19.HPEX = Zero
            ^RP20.HPEX = Zero
            ^RP01.HPSX = One
            ^RP02.HPSX = One
            ^RP03.HPSX = One
            ^RP04.HPSX = One
            ^RP05.HPSX = One
            ^RP06.HPSX = One
            ^RP07.HPSX = One
            ^RP08.HPSX = One
            ^RP09.HPSX = One
            ^RP10.HPSX = One
            ^RP11.HPSX = One
            ^RP12.HPSX = One
            ^RP13.HPSX = One
            ^RP14.HPSX = One
            ^RP15.HPSX = One
            ^RP16.HPSX = One
            ^RP17.HPSX = One
            ^RP18.HPSX = One
            ^RP19.HPSX = One
            ^RP20.HPSX = One
            ^RP21.HPSX = One
            ^RP22.HPSX = One
            ^RP23.HPSX = One
            ^RP24.HPSX = One
        }

        Method (NPME, 0, Serialized)
        {
            ^RP01.PMEX = Zero
            ^RP02.PMEX = Zero
            ^RP03.PMEX = Zero
            ^RP04.PMEX = Zero
            ^RP05.PMEX = Zero
            ^RP06.PMEX = Zero
            ^RP07.PMEX = Zero
            ^RP08.PMEX = Zero
            ^RP09.PMEX = Zero
            ^RP10.PMEX = Zero
            ^RP11.PMEX = Zero
            ^RP12.PMEX = Zero
            ^RP13.PMEX = Zero
            ^RP14.PMEX = Zero
            ^RP15.PMEX = Zero
            ^RP16.PMEX = Zero
            ^RP17.PMEX = Zero
            ^RP18.PMEX = Zero
            ^RP19.PMEX = Zero
            ^RP20.PMEX = Zero
            ^RP01.PMSX = One
            ^RP02.PMSX = One
            ^RP03.PMSX = One
            ^RP04.PMSX = One
            ^RP05.PMSX = One
            ^RP06.PMSX = One
            ^RP07.PMSX = One
            ^RP08.PMSX = One
            ^RP09.PMSX = One
            ^RP10.PMSX = One
            ^RP11.PMSX = One
            ^RP12.PMSX = One
            ^RP13.PMSX = One
            ^RP14.PMSX = One
            ^RP15.PMSX = One
            ^RP16.PMSX = One
            ^RP17.PMSX = One
            ^RP18.PMSX = One
            ^RP19.PMSX = One
            ^RP20.PMSX = One
            ^RP21.PMSX = One
            ^RP22.PMSX = One
            ^RP23.PMSX = One
            ^RP24.PMSX = One
        }
    }

    Scope (\)
    {
        Name (PICM, Zero)
        Name (PRWP, Package (0x02)
        {
            Zero, 
            Zero
        })
        Method (GPRW, 2, NotSerialized)
        {
            PRWP [Zero] = Arg0
            Local0 = (SS1 << One)
            Local0 |= (SS2 << 0x02)
            Local0 |= (SS3 << 0x03)
            Local0 |= (SS4 << 0x04)
            If (((One << Arg1) & Local0))
            {
                PRWP [One] = Arg1
            }
            Else
            {
                Local0 >>= One
                FindSetLeftBit (Local0, PRWP [One])
            }

            Return (PRWP)
        }
    }

    Scope (_SB)
    {
        Name (OSCI, Zero)
        Name (OSCO, Zero)
        Name (OSCP, Zero)
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            If ((S0ID == One))
            {
                SCGE = One
            }

            If ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If ((Arg1 == One))
                {
                    OSCP = CAP0
                    If ((CAP0 & 0x04))
                    {
                        OSCO = 0x04
                        If (((SGMD & 0x0F) != 0x02))
                        {
                            If ((RTD3 == Zero))
                            {
                                CAP0 &= 0x3B
                                STS0 |= 0x10
                            }
                        }
                    }
                }
                Else
                {
                    STS0 &= 0xFFFFFF00
                    STS0 |= 0x0A
                }
            }
            Else
            {
                STS0 &= 0xFFFFFF00
                STS0 |= 0x06
            }

            Return (Arg3)
        }

        Device (EPC)
        {
            Name (_HID, EisaId ("INT0E0C"))  // _HID: Hardware ID
            Name (_STR, Unicode ("Enclave Page Cache 1.0"))  // _STR: Description String
            Name (_MLS, Package (0x01)  // _MLS: Multiple Language String
            {
                Package (0x02)
                {
                    "en", 
                    Unicode ("Enclave Page Cache 1.0")
                }
            })
            Name (RBUF, ResourceTemplate ()
            {
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000001, // Length
                    ,, _Y30, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateQWordField (RBUF, \_SB.EPC._Y30._MIN, EMIN)  // _MIN: Minimum Base Address
                CreateQWordField (RBUF, \_SB.EPC._Y30._MAX, EMAX)  // _MAX: Maximum Base Address
                CreateQWordField (RBUF, \_SB.EPC._Y30._LEN, ELEN)  // _LEN: Length
                EMIN = \_PR.EMNA
                ELEN = \_PR.ELNG
                EMAX = ((\_PR.EMNA + \_PR.ELNG) - One)
                Return (RBUF)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\_PR.EPCS != Zero))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB)
    {
        Device (BTKL)
        {
            Name (_HID, "INT3420")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
            }

            Method (PSTS, 0, NotSerialized)
            {
            }
        }
    }

    Scope (_SB)
    {
        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E"))  // _HID: Hardware ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    If ((RTVM != Zero))
    {
        Scope (_SB)
        {
            Name (VMEN, 0xFF)
            Method (VMON, 0, Serialized)
            {
                If ((VMEN == One))
                {
                    Return (Zero)
                }

                If ((RTVM == One))
                {
                    ^PCI0.LPCB.H_EC.ECWT (0x7A, RefOf (^PCI0.LPCB.H_EC.PVOL))
                    ^PCI0.LPCB.H_EC.ECMD (0x1C)
                }
                ElseIf ((RTVM == 0x02))
                {
                    SGOV (VRGP, Zero)
                }

                VMEN = One
            }

            Method (VMOF, 0, Serialized)
            {
                If ((VMEN == Zero))
                {
                    Return (Zero)
                }

                If ((RTVM == One))
                {
                    ^PCI0.LPCB.H_EC.ECWT (0x3A, RefOf (^PCI0.LPCB.H_EC.PVOL))
                    ^PCI0.LPCB.H_EC.ECMD (0x1C)
                }
                ElseIf ((RTVM == 0x02))
                {
                    SGOV (VRGP, One)
                }

                VMEN = Zero
            }
        }
    }

    Scope (_SB)
    {
        Method (CGWR, 4, Serialized)
        {
            If ((Arg0 == One))
            {
                If (CondRefOf (\_SB.SGOV))
                {
                    SGOV (Arg2, Arg3)
                }
            }
            ElseIf ((Arg0 == 0x02))
            {
                If (CondRefOf (\_SB.PCI0.GEXP.SGEP))
                {
                    ^PCI0.GEXP.SGEP (Arg1, Arg2, Arg3)
                }
            }
        }

        Method (CGRD, 4, Serialized)
        {
            Local0 = One
            If ((Arg0 == One))
            {
                If ((Arg3 == Zero))
                {
                    If (CondRefOf (\_SB.GGOV))
                    {
                        Local0 = GGOV (Arg2)
                    }
                }
                ElseIf ((Arg3 == One))
                {
                    If (CondRefOf (\_SB.GGIV))
                    {
                        Local0 = GGIV (Arg2)
                    }
                }
            }
            ElseIf ((Arg0 == 0x02))
            {
                If (CondRefOf (\_SB.PCI0.GEXP.GEPS))
                {
                    Local0 = ^PCI0.GEXP.GEPS (Arg1, Arg2)
                }
            }

            Return (Local0)
        }

        Method (WRGP, 2, Serialized)
        {
            Local0 = Arg0
            Local1 = Arg0
            Local0 &= 0xFFFFFFFF
            Local1 >>= 0x20
            If (((Local0 & 0xFF) == One))
            {
                CGWR ((Local0 & 0xFF), (Local1 >> 0x18), Local1, Arg1)
            }
            ElseIf (((Local0 & 0xFF) == 0x02))
            {
                CGWR ((Local0 & 0xFF), (Local1 >> 0x18), ((Local1 << 0x08) >> 0x18), Arg1)
            }
        }

        Method (RDGP, 2, Serialized)
        {
            Local7 = One
            Local0 = Arg0
            Local1 = Arg0
            Local0 &= 0xFFFFFFFF
            Local1 >>= 0x20
            If (((Local0 & 0xFF) == One))
            {
                Local7 = CGRD ((Local0 & 0xFF), (Local1 >> 0x18), Local1, Arg1)
            }
            ElseIf (((Local0 & 0xFF) == 0x02))
            {
                Local7 = CGRD ((Local0 & 0xFF), (Local1 >> 0x18), ((Local1 << 0x08) >> 0x18), Arg1)
            }

            Return (Local7)
        }
    }

    OperationRegion (_SB.PCI0.LPCB.LPCR, PCI_Config, 0x80, 0x04)
    Field (\_SB.PCI0.LPCB.LPCR, ByteAcc, NoLock, Preserve)
    {
        CARN,   3, 
            ,   1, 
        CBDR,   3, 
        Offset (0x01), 
        LTDR,   2, 
            ,   2, 
        FDDR,   1, 
        Offset (0x02), 
        CALE,   1, 
        CBLE,   1, 
        LTLE,   1, 
        FDLE,   1, 
        Offset (0x03), 
        GLLE,   1, 
        GHLE,   1, 
        KCLE,   1, 
        MCLE,   1, 
        C1LE,   1, 
        C2LE,   1, 
        Offset (0x04)
    }

    Method (UXDV, 1, Serialized)
    {
        Local0 = 0xFF
        Switch ((Arg0 + Zero))
        {
            Case (0x03F8)
            {
                Local0 = Zero
            }
            Case (0x02F8)
            {
                Local0 = One
            }
            Case (0x0220)
            {
                Local0 = 0x02
            }
            Case (0x0228)
            {
                Local0 = 0x03
            }
            Case (0x0238)
            {
                Local0 = 0x04
            }
            Case (0x02E8)
            {
                Local0 = 0x05
            }
            Case (0x0338)
            {
                Local0 = 0x06
            }
            Case (0x03E8)
            {
                Local0 = 0x07
            }

        }

        Return (Local0)
    }

    Method (RRIO, 4, Serialized)
    {
        Switch ((Arg0 + Zero))
        {
            Case (Zero)
            {
                CALE = Zero
                Local0 = UXDV (Arg2)
                If ((Local0 != 0xFF))
                {
                    CARN = Local0
                }

                If (Arg1)
                {
                    CALE = One
                }
            }
            Case (One)
            {
                CBLE = Zero
                Local0 = UXDV (Arg2)
                If ((Local0 != 0xFF))
                {
                    CBDR = Local0
                }

                If (Arg1)
                {
                    CBLE = One
                }
            }
            Case (0x02)
            {
                LTLE = Zero
                If ((Arg2 == 0x0378))
                {
                    LTDR = Zero
                }

                If ((Arg2 == 0x0278))
                {
                    LTDR = One
                }

                If ((Arg2 == 0x03BC))
                {
                    LTDR = 0x02
                }

                If (Arg1)
                {
                    LTLE = One
                }
            }
            Case (0x03)
            {
                FDLE = Zero
                If ((Arg2 == 0x03F0))
                {
                    FDDR = Zero
                }

                If ((Arg2 == 0x0370))
                {
                    FDDR = One
                }

                If (Arg1)
                {
                    FDLE = One
                }
            }
            Case (0x08)
            {
                If ((Arg2 == 0x0200))
                {
                    If (Arg1)
                    {
                        GLLE = One
                    }
                    Else
                    {
                        GLLE = Zero
                    }
                }

                If ((Arg2 == 0x0208))
                {
                    If (Arg1)
                    {
                        GHLE = One
                    }
                    Else
                    {
                        GHLE = Zero
                    }
                }
            }
            Case (0x09)
            {
                If ((Arg2 == 0x0200))
                {
                    If (Arg1)
                    {
                        GLLE = One
                    }
                    Else
                    {
                        GLLE = Zero
                    }
                }

                If ((Arg2 == 0x0208))
                {
                    If (Arg1)
                    {
                        GHLE = One
                    }
                    Else
                    {
                        GHLE = Zero
                    }
                }
            }
            Case (0x0A)
            {
                If (((Arg2 == 0x60) || (Arg2 == 0x64)))
                {
                    If (Arg1)
                    {
                        KCLE = One
                    }
                    Else
                    {
                        KCLE = Zero
                    }
                }
            }
            Case (0x0B)
            {
                If (((Arg2 == 0x62) || (Arg2 == 0x66)))
                {
                    If (Arg1)
                    {
                        MCLE = One
                    }
                    Else
                    {
                        MCLE = Zero
                    }
                }
            }
            Case (0x0C)
            {
                If ((Arg2 == 0x2E))
                {
                    If (Arg1)
                    {
                        C1LE = One
                    }
                    Else
                    {
                        C1LE = Zero
                    }
                }

                If ((Arg2 == 0x4E))
                {
                    If (Arg1)
                    {
                        C2LE = One
                    }
                    Else
                    {
                        C2LE = Zero
                    }
                }
            }
            Case (0x0D)
            {
                If ((Arg2 == 0x2E))
                {
                    If (Arg1)
                    {
                        C1LE = One
                    }
                    Else
                    {
                        C1LE = Zero
                    }
                }

                If ((Arg2 == 0x4E))
                {
                    If (Arg1)
                    {
                        C2LE = One
                    }
                    Else
                    {
                        C2LE = Zero
                    }
                }
            }

        }
    }

    Method (RDMA, 3, NotSerialized)
    {
    }

    Scope (_GPE)
    {
        Method (_L69, 0, Serialized)  // _Lxx: Level-Triggered GPE
        {
            \_SB.PCI0.RP01.HPME ()
            \_SB.PCI0.RP02.HPME ()
            \_SB.PCI0.RP03.HPME ()
            \_SB.PCI0.RP04.HPME ()
            \_SB.PCI0.RP05.HPME ()
            \_SB.PCI0.RP06.HPME ()
            \_SB.PCI0.RP07.HPME ()
            \_SB.PCI0.RP08.HPME ()
            \_SB.PCI0.RP09.HPME ()
            \_SB.PCI0.RP10.HPME ()
            \_SB.PCI0.RP11.HPME ()
            \_SB.PCI0.RP12.HPME ()
            \_SB.PCI0.RP13.HPME ()
            \_SB.PCI0.RP14.HPME ()
            \_SB.PCI0.RP15.HPME ()
            \_SB.PCI0.RP16.HPME ()
            \_SB.PCI0.RP17.HPME ()
            \_SB.PCI0.RP18.HPME ()
            \_SB.PCI0.RP19.HPME ()
            \_SB.PCI0.RP20.HPME ()
            \_SB.PCI0.RP21.HPME ()
            \_SB.PCI0.RP22.HPME ()
            \_SB.PCI0.RP23.HPME ()
            \_SB.PCI0.RP24.HPME ()
            If ((\_SB.PCI0.D1F0 == One))
            {
                \_SB.PCI0.PEG0.HPME ()
                Notify (\_SB.PCI0.PEG0, 0x02)
                Notify (\_SB.PCI0.PEG0.PEGP, 0x02)
            }

            If ((\_SB.PCI0.D1F1 == One))
            {
                \_SB.PCI0.PEG1.HPME ()
                Notify (\_SB.PCI0.PEG1, 0x02)
            }

            If ((\_SB.PCI0.D1F2 == One))
            {
                \_SB.PCI0.PEG2.HPME ()
                Notify (\_SB.PCI0.PEG2, 0x02)
            }
        }

        Method (_L61, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            L01C += One
            P8XH (Zero, One)
            P8XH (One, L01C)
            If (((\_SB.PCI0.RP01.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP01.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP01.PDCX)
                {
                    \_SB.PCI0.RP01.PDCX = One
                    \_SB.PCI0.RP01.HPSX = One
                    If (!\_SB.PCI0.RP01.PDSX)
                    {
                        \_SB.PCI0.RP01.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP01, Zero)
                }
                Else
                {
                    \_SB.PCI0.RP01.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP02.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP02.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP02.PDCX)
                {
                    \_SB.PCI0.RP02.PDCX = One
                    \_SB.PCI0.RP02.HPSX = One
                    If (!\_SB.PCI0.RP02.PDSX)
                    {
                        \_SB.PCI0.RP02.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP02, Zero)
                }
                Else
                {
                    \_SB.PCI0.RP02.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP03.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP03.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP03.PDCX)
                {
                    \_SB.PCI0.RP03.PDCX = One
                    \_SB.PCI0.RP03.HPSX = One
                    If (!\_SB.PCI0.RP03.PDSX)
                    {
                        \_SB.PCI0.RP03.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP03, Zero)
                }
                Else
                {
                    \_SB.PCI0.RP03.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP04.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP04.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP04.PDCX)
                {
                    \_SB.PCI0.RP04.PDCX = One
                    \_SB.PCI0.RP04.HPSX = One
                    If (!\_SB.PCI0.RP04.PDSX)
                    {
                        \_SB.PCI0.RP04.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP04, Zero)
                }
                Else
                {
                    \_SB.PCI0.RP04.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP05.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP05.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP05.PDCX)
                {
                    \_SB.PCI0.RP05.PDCX = One
                    \_SB.PCI0.RP05.HPSX = One
                    If (!\_SB.PCI0.RP05.PDSX)
                    {
                        \_SB.PCI0.RP05.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP05, Zero)
                }
                Else
                {
                    \_SB.PCI0.RP05.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP06.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP06.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP06.PDCX)
                {
                    \_SB.PCI0.RP06.PDCX = One
                    \_SB.PCI0.RP06.HPSX = One
                    If (!\_SB.PCI0.RP06.PDSX)
                    {
                        \_SB.PCI0.RP06.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP06, Zero)
                }
                Else
                {
                    \_SB.PCI0.RP06.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP07.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP07.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP07.PDCX)
                {
                    \_SB.PCI0.RP07.PDCX = One
                    \_SB.PCI0.RP07.HPSX = One
                    If (!\_SB.PCI0.RP07.PDSX)
                    {
                        \_SB.PCI0.RP07.L0SE = Zero
                    }

                    If ((PFLV == 0x02))
                    {
                        Notify (\_SB.PCI0.RP07, Zero)
                    }
                    ElseIf (ECON){}
                }
                Else
                {
                    \_SB.PCI0.RP07.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP08.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP08.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP08.PDCX)
                {
                    \_SB.PCI0.RP08.PDCX = One
                    \_SB.PCI0.RP08.HPSX = One
                    If (!\_SB.PCI0.RP08.PDSX)
                    {
                        \_SB.PCI0.RP08.L0SE = Zero
                    }

                    If ((PFLV == 0x02))
                    {
                        Notify (\_SB.PCI0.RP08, Zero)
                    }
                    ElseIf (ECON){}
                }
                Else
                {
                    \_SB.PCI0.RP08.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP09.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP09.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP09.PDCX)
                {
                    \_SB.PCI0.RP09.PDCX = One
                    \_SB.PCI0.RP09.HPSX = One
                    If (!\_SB.PCI0.RP09.PDSX)
                    {
                        \_SB.PCI0.RP09.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP09, Zero)
                }
                Else
                {
                    \_SB.PCI0.RP09.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP10.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP10.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP10.PDCX)
                {
                    \_SB.PCI0.RP10.PDCX = One
                    \_SB.PCI0.RP10.HPSX = One
                    If (!\_SB.PCI0.RP10.PDSX)
                    {
                        \_SB.PCI0.RP10.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP10, Zero)
                }
                Else
                {
                    \_SB.PCI0.RP10.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP11.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP11.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP11.PDCX)
                {
                    \_SB.PCI0.RP11.PDCX = One
                    \_SB.PCI0.RP11.HPSX = One
                    If (!\_SB.PCI0.RP11.PDSX)
                    {
                        \_SB.PCI0.RP11.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP11, Zero)
                }
                Else
                {
                    \_SB.PCI0.RP11.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP12.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP12.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP12.PDCX)
                {
                    \_SB.PCI0.RP12.PDCX = One
                    \_SB.PCI0.RP12.HPSX = One
                    If (!\_SB.PCI0.RP12.PDSX)
                    {
                        \_SB.PCI0.RP12.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP12, Zero)
                }
                Else
                {
                    \_SB.PCI0.RP12.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP13.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP13.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP13.PDCX)
                {
                    \_SB.PCI0.RP13.PDCX = One
                    \_SB.PCI0.RP13.HPSX = One
                    If (!\_SB.PCI0.RP13.PDSX)
                    {
                        \_SB.PCI0.RP13.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP13, Zero)
                }
                Else
                {
                    \_SB.PCI0.RP13.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP14.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP14.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP14.PDCX)
                {
                    \_SB.PCI0.RP14.PDCX = One
                    \_SB.PCI0.RP14.HPSX = One
                    If (!\_SB.PCI0.RP14.PDSX)
                    {
                        \_SB.PCI0.RP14.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP14, Zero)
                }
                Else
                {
                    \_SB.PCI0.RP14.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP15.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP15.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP15.PDCX)
                {
                    \_SB.PCI0.RP15.PDCX = One
                    \_SB.PCI0.RP15.HPSX = One
                    If (!\_SB.PCI0.RP15.PDSX)
                    {
                        \_SB.PCI0.RP15.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP15, Zero)
                }
                Else
                {
                    \_SB.PCI0.RP15.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP16.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP16.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP16.PDCX)
                {
                    \_SB.PCI0.RP16.PDCX = One
                    \_SB.PCI0.RP16.HPSX = One
                    If (!\_SB.PCI0.RP16.PDSX)
                    {
                        \_SB.PCI0.RP16.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP16, Zero)
                }
                Else
                {
                    \_SB.PCI0.RP16.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP17.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP17.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP17.PDCX)
                {
                    \_SB.PCI0.RP17.PDCX = One
                    \_SB.PCI0.RP17.HPSX = One
                    If (!\_SB.PCI0.RP17.PDSX)
                    {
                        \_SB.PCI0.RP17.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP17, Zero)
                }
                Else
                {
                    \_SB.PCI0.RP17.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP18.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP18.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP18.PDCX)
                {
                    \_SB.PCI0.RP18.PDCX = One
                    \_SB.PCI0.RP18.HPSX = One
                    If (!\_SB.PCI0.RP18.PDSX)
                    {
                        \_SB.PCI0.RP18.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP18, Zero)
                }
                Else
                {
                    \_SB.PCI0.RP18.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP19.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP19.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP19.PDCX)
                {
                    \_SB.PCI0.RP19.PDCX = One
                    \_SB.PCI0.RP19.HPSX = One
                    If (!\_SB.PCI0.RP19.PDSX)
                    {
                        \_SB.PCI0.RP19.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP19, Zero)
                }
                Else
                {
                    \_SB.PCI0.RP19.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP20.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP20.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP20.PDCX)
                {
                    \_SB.PCI0.RP20.PDCX = One
                    \_SB.PCI0.RP20.HPSX = One
                    If (!\_SB.PCI0.RP20.PDSX)
                    {
                        \_SB.PCI0.RP20.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP20, Zero)
                }
                Else
                {
                    \_SB.PCI0.RP20.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP21.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP21.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP21.PDCX)
                {
                    \_SB.PCI0.RP21.PDCX = One
                    \_SB.PCI0.RP21.HPSX = One
                    If (!\_SB.PCI0.RP21.PDSX)
                    {
                        \_SB.PCI0.RP21.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP21, Zero)
                }
                Else
                {
                    \_SB.PCI0.RP21.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP22.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP22.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP22.PDCX)
                {
                    \_SB.PCI0.RP22.PDCX = One
                    \_SB.PCI0.RP22.HPSX = One
                    If (!\_SB.PCI0.RP22.PDSX)
                    {
                        \_SB.PCI0.RP22.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP22, Zero)
                }
                Else
                {
                    \_SB.PCI0.RP22.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP23.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP23.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP23.PDCX)
                {
                    \_SB.PCI0.RP23.PDCX = One
                    \_SB.PCI0.RP23.HPSX = One
                    If (!\_SB.PCI0.RP23.PDSX)
                    {
                        \_SB.PCI0.RP23.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP23, Zero)
                }
                Else
                {
                    \_SB.PCI0.RP23.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP24.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP24.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP24.PDCX)
                {
                    \_SB.PCI0.RP24.PDCX = One
                    \_SB.PCI0.RP24.HPSX = One
                    If (!\_SB.PCI0.RP24.PDSX)
                    {
                        \_SB.PCI0.RP24.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP24, Zero)
                }
                Else
                {
                    \_SB.PCI0.RP24.HPSX = One
                }
            }
        }

        Method (_L62, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            GPEC = Zero
            If (CondRefOf (\_PR.DTSE))
            {
                If ((\_PR.DTSE >= One))
                {
                    If ((\_PR.DTSI == One))
                    {
                        Notify (\_TZ.TZ00, 0x80)
                        Notify (\_TZ.TZ01, 0x80)
                        \_PR.DTSI = Zero
                    }
                }
            }

            If ((\_PR.HWPI == One))
            {
                If (CondRefOf (\_GPE.HLVT))
                {
                    HLVT ()
                }

                \_PR.HWPI = Zero
            }
        }

        Method (_L66, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            If ((\_SB.PCI0.GFX0.GSSE && !GSMI))
            {
                \_SB.PCI0.GFX0.GSCI ()
            }
        }

        Name (PRES, One)
        Method (_L6F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            If ((RTD3 == One))
            {
                If (CondRefOf (\_GPE.AL6F))
                {
                    AL6F ()
                }
            }

            If ((SGGP == One))
            {
                If (CondRefOf (\_GPE.P0L6))
                {
                    P0L6 ()
                }
            }

            If ((P1GP == One))
            {
                If (CondRefOf (\_GPE.P1L6))
                {
                    P1L6 ()
                }
            }

            If ((P2GP == One))
            {
                If (CondRefOf (\_GPE.P2L6))
                {
                    P2L6 ()
                }
            }
        }
    }

    If ((CAMT == One))
    {
        Scope (_SB)
        {
            Device (ICAM)
            {
                Name (_HID, "INT33A3")  // _HID: Hardware ID
                Name (IDFU, Zero)
                Name (IPWR, Zero)
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    If ((IVDF == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("f5cf0ff7-5d60-4842-82c0-fa1a61d873f2")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((ToInteger (Arg1) == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }

                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                            Case (One)
                            {
                                If ((DerefOf (Arg3 [Zero]) == Zero))
                                {
                                    WRGP (IFWG, Zero)
                                    IDFU = Zero
                                }
                                Else
                                {
                                    WRGP (IFWG, One)
                                    IDFU = One
                                }

                                Return (Zero)
                            }
                            Case (0x02)
                            {
                                If ((DerefOf (Arg3 [Zero]) == Zero))
                                {
                                    WRGP (IVDG, Zero)
                                    IPWR = Zero
                                }
                                Else
                                {
                                    WRGP (IVDG, One)
                                    IPWR = One
                                }

                                Return (Zero)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    If ((PCHV () == SPTL))
    {
        If ((SDWE != Zero))
        {
            Scope (_SB.PCI0.PSDC)
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((OSYS < 0x07DC))
                    {
                        Return (Buffer (0x02)
                        {
                             0x79, 0x00                                     
                        })
                    }

                    Name (RBUF, ResourceTemplate ()
                    {
                        GpioInt (Edge, ActiveBoth, SharedAndWake, PullNone, 0x2710,
                            "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0000
                            }
                        GpioIo (Shared, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0000
                            }
                    })
                    CreateWordField (RBUF, 0x17, SDIP)
                    CreateWordField (RBUF, 0x3F, SDGP)
                    If ((SDWE == One))
                    {
                        SDIP = GNUM (0x02010011)
                        SDGP = GNUM (0x02010011)
                    }

                    If ((SDWE == 0x02))
                    {
                        SDIP = GNUM (0x0203000A)
                        SDGP = GNUM (0x0203000A)
                    }

                    Return (RBUF)
                }
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP01.PXSX))
    {
        Scope (_SB.PCI0.RP01.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x50)
            Field (RPXX, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x44), 
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1
                    DerefOf (SPLX [One]) [One] = LIM1
                    DerefOf (SPLX [One]) [0x02] = TIM1
                    DerefOf (SPLX [0x02]) [Zero] = DOM2
                    DerefOf (SPLX [0x02]) [One] = LIM2
                    DerefOf (SPLX [0x02]) [0x02] = TIM2
                    DerefOf (SPLX [0x03]) [Zero] = DOM3
                    DerefOf (SPLX [0x03]) [One] = LIM3
                    DerefOf (SPLX [0x03]) [0x02] = TIM3
                    Return (SPLX)
                }

                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                {
                    WRST
                })
                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0
                    DerefOf (WANX [One]) [0x02] = TRL0
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1
                    DerefOf (WANX [0x02]) [0x02] = TRL1
                    Return (WANX)
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1
                    DerefOf (WRDX [One]) [One] = CID1
                    DerefOf (WRDX [0x02]) [Zero] = WDM2
                    DerefOf (WRDX [0x02]) [One] = CID2
                    Return (WRDX)
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE
                    DerefOf (WRDY [One]) [0x02] = STX0
                    DerefOf (WRDY [One]) [0x03] = STX1
                    DerefOf (WRDY [One]) [0x04] = STX2
                    DerefOf (WRDY [One]) [0x05] = STX3
                    DerefOf (WRDY [One]) [0x06] = STX4
                    DerefOf (WRDY [One]) [0x07] = STX5
                    DerefOf (WRDY [One]) [0x08] = STX6
                    DerefOf (WRDY [One]) [0x09] = STX7
                    DerefOf (WRDY [One]) [0x0A] = STX8
                    DerefOf (WRDY [One]) [0x0B] = STX9
                    DerefOf (WRDY [0x02]) [One] = WRFE
                    DerefOf (WRDY [0x02]) [0x02] = WRC1
                    DerefOf (WRDY [0x02]) [0x03] = WRC2
                    DerefOf (WRDY [0x02]) [0x04] = WRC3
                    DerefOf (WRDY [0x02]) [0x05] = WRC4
                    Return (WRDY)
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI)
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80)
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02)
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP02.PXSX))
    {
        Scope (_SB.PCI0.RP02.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x50)
            Field (RPXX, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x44), 
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1
                    DerefOf (SPLX [One]) [One] = LIM1
                    DerefOf (SPLX [One]) [0x02] = TIM1
                    DerefOf (SPLX [0x02]) [Zero] = DOM2
                    DerefOf (SPLX [0x02]) [One] = LIM2
                    DerefOf (SPLX [0x02]) [0x02] = TIM2
                    DerefOf (SPLX [0x03]) [Zero] = DOM3
                    DerefOf (SPLX [0x03]) [One] = LIM3
                    DerefOf (SPLX [0x03]) [0x02] = TIM3
                    Return (SPLX)
                }

                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                {
                    WRST
                })
                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0
                    DerefOf (WANX [One]) [0x02] = TRL0
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1
                    DerefOf (WANX [0x02]) [0x02] = TRL1
                    Return (WANX)
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1
                    DerefOf (WRDX [One]) [One] = CID1
                    DerefOf (WRDX [0x02]) [Zero] = WDM2
                    DerefOf (WRDX [0x02]) [One] = CID2
                    Return (WRDX)
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE
                    DerefOf (WRDY [One]) [0x02] = STX0
                    DerefOf (WRDY [One]) [0x03] = STX1
                    DerefOf (WRDY [One]) [0x04] = STX2
                    DerefOf (WRDY [One]) [0x05] = STX3
                    DerefOf (WRDY [One]) [0x06] = STX4
                    DerefOf (WRDY [One]) [0x07] = STX5
                    DerefOf (WRDY [One]) [0x08] = STX6
                    DerefOf (WRDY [One]) [0x09] = STX7
                    DerefOf (WRDY [One]) [0x0A] = STX8
                    DerefOf (WRDY [One]) [0x0B] = STX9
                    DerefOf (WRDY [0x02]) [One] = WRFE
                    DerefOf (WRDY [0x02]) [0x02] = WRC1
                    DerefOf (WRDY [0x02]) [0x03] = WRC2
                    DerefOf (WRDY [0x02]) [0x04] = WRC3
                    DerefOf (WRDY [0x02]) [0x05] = WRC4
                    Return (WRDY)
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI)
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80)
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02)
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP03.PXSX))
    {
        Scope (_SB.PCI0.RP03.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x50)
            Field (RPXX, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x44), 
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1
                    DerefOf (SPLX [One]) [One] = LIM1
                    DerefOf (SPLX [One]) [0x02] = TIM1
                    DerefOf (SPLX [0x02]) [Zero] = DOM2
                    DerefOf (SPLX [0x02]) [One] = LIM2
                    DerefOf (SPLX [0x02]) [0x02] = TIM2
                    DerefOf (SPLX [0x03]) [Zero] = DOM3
                    DerefOf (SPLX [0x03]) [One] = LIM3
                    DerefOf (SPLX [0x03]) [0x02] = TIM3
                    Return (SPLX)
                }

                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                {
                    WRST
                })
                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0
                    DerefOf (WANX [One]) [0x02] = TRL0
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1
                    DerefOf (WANX [0x02]) [0x02] = TRL1
                    Return (WANX)
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1
                    DerefOf (WRDX [One]) [One] = CID1
                    DerefOf (WRDX [0x02]) [Zero] = WDM2
                    DerefOf (WRDX [0x02]) [One] = CID2
                    Return (WRDX)
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE
                    DerefOf (WRDY [One]) [0x02] = STX0
                    DerefOf (WRDY [One]) [0x03] = STX1
                    DerefOf (WRDY [One]) [0x04] = STX2
                    DerefOf (WRDY [One]) [0x05] = STX3
                    DerefOf (WRDY [One]) [0x06] = STX4
                    DerefOf (WRDY [One]) [0x07] = STX5
                    DerefOf (WRDY [One]) [0x08] = STX6
                    DerefOf (WRDY [One]) [0x09] = STX7
                    DerefOf (WRDY [One]) [0x0A] = STX8
                    DerefOf (WRDY [One]) [0x0B] = STX9
                    DerefOf (WRDY [0x02]) [One] = WRFE
                    DerefOf (WRDY [0x02]) [0x02] = WRC1
                    DerefOf (WRDY [0x02]) [0x03] = WRC2
                    DerefOf (WRDY [0x02]) [0x04] = WRC3
                    DerefOf (WRDY [0x02]) [0x05] = WRC4
                    Return (WRDY)
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI)
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80)
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02)
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP04.PXSX))
    {
        Scope (_SB.PCI0.RP04.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x50)
            Field (RPXX, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x44), 
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1
                    DerefOf (SPLX [One]) [One] = LIM1
                    DerefOf (SPLX [One]) [0x02] = TIM1
                    DerefOf (SPLX [0x02]) [Zero] = DOM2
                    DerefOf (SPLX [0x02]) [One] = LIM2
                    DerefOf (SPLX [0x02]) [0x02] = TIM2
                    DerefOf (SPLX [0x03]) [Zero] = DOM3
                    DerefOf (SPLX [0x03]) [One] = LIM3
                    DerefOf (SPLX [0x03]) [0x02] = TIM3
                    Return (SPLX)
                }

                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                {
                    WRST
                })
                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0
                    DerefOf (WANX [One]) [0x02] = TRL0
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1
                    DerefOf (WANX [0x02]) [0x02] = TRL1
                    Return (WANX)
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1
                    DerefOf (WRDX [One]) [One] = CID1
                    DerefOf (WRDX [0x02]) [Zero] = WDM2
                    DerefOf (WRDX [0x02]) [One] = CID2
                    Return (WRDX)
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE
                    DerefOf (WRDY [One]) [0x02] = STX0
                    DerefOf (WRDY [One]) [0x03] = STX1
                    DerefOf (WRDY [One]) [0x04] = STX2
                    DerefOf (WRDY [One]) [0x05] = STX3
                    DerefOf (WRDY [One]) [0x06] = STX4
                    DerefOf (WRDY [One]) [0x07] = STX5
                    DerefOf (WRDY [One]) [0x08] = STX6
                    DerefOf (WRDY [One]) [0x09] = STX7
                    DerefOf (WRDY [One]) [0x0A] = STX8
                    DerefOf (WRDY [One]) [0x0B] = STX9
                    DerefOf (WRDY [0x02]) [One] = WRFE
                    DerefOf (WRDY [0x02]) [0x02] = WRC1
                    DerefOf (WRDY [0x02]) [0x03] = WRC2
                    DerefOf (WRDY [0x02]) [0x04] = WRC3
                    DerefOf (WRDY [0x02]) [0x05] = WRC4
                    Return (WRDY)
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI)
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80)
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02)
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP05.PXSX))
    {
        Scope (_SB.PCI0.RP05.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x50)
            Field (RPXX, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x44), 
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1
                    DerefOf (SPLX [One]) [One] = LIM1
                    DerefOf (SPLX [One]) [0x02] = TIM1
                    DerefOf (SPLX [0x02]) [Zero] = DOM2
                    DerefOf (SPLX [0x02]) [One] = LIM2
                    DerefOf (SPLX [0x02]) [0x02] = TIM2
                    DerefOf (SPLX [0x03]) [Zero] = DOM3
                    DerefOf (SPLX [0x03]) [One] = LIM3
                    DerefOf (SPLX [0x03]) [0x02] = TIM3
                    Return (SPLX)
                }

                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                {
                    WRST
                })
                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0
                    DerefOf (WANX [One]) [0x02] = TRL0
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1
                    DerefOf (WANX [0x02]) [0x02] = TRL1
                    Return (WANX)
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1
                    DerefOf (WRDX [One]) [One] = CID1
                    DerefOf (WRDX [0x02]) [Zero] = WDM2
                    DerefOf (WRDX [0x02]) [One] = CID2
                    Return (WRDX)
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE
                    DerefOf (WRDY [One]) [0x02] = STX0
                    DerefOf (WRDY [One]) [0x03] = STX1
                    DerefOf (WRDY [One]) [0x04] = STX2
                    DerefOf (WRDY [One]) [0x05] = STX3
                    DerefOf (WRDY [One]) [0x06] = STX4
                    DerefOf (WRDY [One]) [0x07] = STX5
                    DerefOf (WRDY [One]) [0x08] = STX6
                    DerefOf (WRDY [One]) [0x09] = STX7
                    DerefOf (WRDY [One]) [0x0A] = STX8
                    DerefOf (WRDY [One]) [0x0B] = STX9
                    DerefOf (WRDY [0x02]) [One] = WRFE
                    DerefOf (WRDY [0x02]) [0x02] = WRC1
                    DerefOf (WRDY [0x02]) [0x03] = WRC2
                    DerefOf (WRDY [0x02]) [0x04] = WRC3
                    DerefOf (WRDY [0x02]) [0x05] = WRC4
                    Return (WRDY)
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI)
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80)
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02)
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP06.PXSX))
    {
        Scope (_SB.PCI0.RP06.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x50)
            Field (RPXX, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x44), 
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1
                    DerefOf (SPLX [One]) [One] = LIM1
                    DerefOf (SPLX [One]) [0x02] = TIM1
                    DerefOf (SPLX [0x02]) [Zero] = DOM2
                    DerefOf (SPLX [0x02]) [One] = LIM2
                    DerefOf (SPLX [0x02]) [0x02] = TIM2
                    DerefOf (SPLX [0x03]) [Zero] = DOM3
                    DerefOf (SPLX [0x03]) [One] = LIM3
                    DerefOf (SPLX [0x03]) [0x02] = TIM3
                    Return (SPLX)
                }

                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                {
                    WRST
                })
                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0
                    DerefOf (WANX [One]) [0x02] = TRL0
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1
                    DerefOf (WANX [0x02]) [0x02] = TRL1
                    Return (WANX)
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1
                    DerefOf (WRDX [One]) [One] = CID1
                    DerefOf (WRDX [0x02]) [Zero] = WDM2
                    DerefOf (WRDX [0x02]) [One] = CID2
                    Return (WRDX)
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE
                    DerefOf (WRDY [One]) [0x02] = STX0
                    DerefOf (WRDY [One]) [0x03] = STX1
                    DerefOf (WRDY [One]) [0x04] = STX2
                    DerefOf (WRDY [One]) [0x05] = STX3
                    DerefOf (WRDY [One]) [0x06] = STX4
                    DerefOf (WRDY [One]) [0x07] = STX5
                    DerefOf (WRDY [One]) [0x08] = STX6
                    DerefOf (WRDY [One]) [0x09] = STX7
                    DerefOf (WRDY [One]) [0x0A] = STX8
                    DerefOf (WRDY [One]) [0x0B] = STX9
                    DerefOf (WRDY [0x02]) [One] = WRFE
                    DerefOf (WRDY [0x02]) [0x02] = WRC1
                    DerefOf (WRDY [0x02]) [0x03] = WRC2
                    DerefOf (WRDY [0x02]) [0x04] = WRC3
                    DerefOf (WRDY [0x02]) [0x05] = WRC4
                    Return (WRDY)
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI)
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80)
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02)
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP07.PXSX))
    {
        Scope (_SB.PCI0.RP07.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x50)
            Field (RPXX, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x44), 
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1
                    DerefOf (SPLX [One]) [One] = LIM1
                    DerefOf (SPLX [One]) [0x02] = TIM1
                    DerefOf (SPLX [0x02]) [Zero] = DOM2
                    DerefOf (SPLX [0x02]) [One] = LIM2
                    DerefOf (SPLX [0x02]) [0x02] = TIM2
                    DerefOf (SPLX [0x03]) [Zero] = DOM3
                    DerefOf (SPLX [0x03]) [One] = LIM3
                    DerefOf (SPLX [0x03]) [0x02] = TIM3
                    Return (SPLX)
                }

                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                {
                    WRST
                })
                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0
                    DerefOf (WANX [One]) [0x02] = TRL0
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1
                    DerefOf (WANX [0x02]) [0x02] = TRL1
                    Return (WANX)
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1
                    DerefOf (WRDX [One]) [One] = CID1
                    DerefOf (WRDX [0x02]) [Zero] = WDM2
                    DerefOf (WRDX [0x02]) [One] = CID2
                    Return (WRDX)
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE
                    DerefOf (WRDY [One]) [0x02] = STX0
                    DerefOf (WRDY [One]) [0x03] = STX1
                    DerefOf (WRDY [One]) [0x04] = STX2
                    DerefOf (WRDY [One]) [0x05] = STX3
                    DerefOf (WRDY [One]) [0x06] = STX4
                    DerefOf (WRDY [One]) [0x07] = STX5
                    DerefOf (WRDY [One]) [0x08] = STX6
                    DerefOf (WRDY [One]) [0x09] = STX7
                    DerefOf (WRDY [One]) [0x0A] = STX8
                    DerefOf (WRDY [One]) [0x0B] = STX9
                    DerefOf (WRDY [0x02]) [One] = WRFE
                    DerefOf (WRDY [0x02]) [0x02] = WRC1
                    DerefOf (WRDY [0x02]) [0x03] = WRC2
                    DerefOf (WRDY [0x02]) [0x04] = WRC3
                    DerefOf (WRDY [0x02]) [0x05] = WRC4
                    Return (WRDY)
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI)
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80)
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02)
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP08.PXSX))
    {
        Scope (_SB.PCI0.RP08.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x50)
            Field (RPXX, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x44), 
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1
                    DerefOf (SPLX [One]) [One] = LIM1
                    DerefOf (SPLX [One]) [0x02] = TIM1
                    DerefOf (SPLX [0x02]) [Zero] = DOM2
                    DerefOf (SPLX [0x02]) [One] = LIM2
                    DerefOf (SPLX [0x02]) [0x02] = TIM2
                    DerefOf (SPLX [0x03]) [Zero] = DOM3
                    DerefOf (SPLX [0x03]) [One] = LIM3
                    DerefOf (SPLX [0x03]) [0x02] = TIM3
                    Return (SPLX)
                }

                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                {
                    WRST
                })
                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0
                    DerefOf (WANX [One]) [0x02] = TRL0
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1
                    DerefOf (WANX [0x02]) [0x02] = TRL1
                    Return (WANX)
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1
                    DerefOf (WRDX [One]) [One] = CID1
                    DerefOf (WRDX [0x02]) [Zero] = WDM2
                    DerefOf (WRDX [0x02]) [One] = CID2
                    Return (WRDX)
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE
                    DerefOf (WRDY [One]) [0x02] = STX0
                    DerefOf (WRDY [One]) [0x03] = STX1
                    DerefOf (WRDY [One]) [0x04] = STX2
                    DerefOf (WRDY [One]) [0x05] = STX3
                    DerefOf (WRDY [One]) [0x06] = STX4
                    DerefOf (WRDY [One]) [0x07] = STX5
                    DerefOf (WRDY [One]) [0x08] = STX6
                    DerefOf (WRDY [One]) [0x09] = STX7
                    DerefOf (WRDY [One]) [0x0A] = STX8
                    DerefOf (WRDY [One]) [0x0B] = STX9
                    DerefOf (WRDY [0x02]) [One] = WRFE
                    DerefOf (WRDY [0x02]) [0x02] = WRC1
                    DerefOf (WRDY [0x02]) [0x03] = WRC2
                    DerefOf (WRDY [0x02]) [0x04] = WRC3
                    DerefOf (WRDY [0x02]) [0x05] = WRC4
                    Return (WRDY)
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI)
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80)
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02)
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP09.PXSX))
    {
        Scope (_SB.PCI0.RP09.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x50)
            Field (RPXX, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x44), 
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1
                    DerefOf (SPLX [One]) [One] = LIM1
                    DerefOf (SPLX [One]) [0x02] = TIM1
                    DerefOf (SPLX [0x02]) [Zero] = DOM2
                    DerefOf (SPLX [0x02]) [One] = LIM2
                    DerefOf (SPLX [0x02]) [0x02] = TIM2
                    DerefOf (SPLX [0x03]) [Zero] = DOM3
                    DerefOf (SPLX [0x03]) [One] = LIM3
                    DerefOf (SPLX [0x03]) [0x02] = TIM3
                    Return (SPLX)
                }

                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                {
                    WRST
                })
                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0
                    DerefOf (WANX [One]) [0x02] = TRL0
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1
                    DerefOf (WANX [0x02]) [0x02] = TRL1
                    Return (WANX)
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1
                    DerefOf (WRDX [One]) [One] = CID1
                    DerefOf (WRDX [0x02]) [Zero] = WDM2
                    DerefOf (WRDX [0x02]) [One] = CID2
                    Return (WRDX)
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE
                    DerefOf (WRDY [One]) [0x02] = STX0
                    DerefOf (WRDY [One]) [0x03] = STX1
                    DerefOf (WRDY [One]) [0x04] = STX2
                    DerefOf (WRDY [One]) [0x05] = STX3
                    DerefOf (WRDY [One]) [0x06] = STX4
                    DerefOf (WRDY [One]) [0x07] = STX5
                    DerefOf (WRDY [One]) [0x08] = STX6
                    DerefOf (WRDY [One]) [0x09] = STX7
                    DerefOf (WRDY [One]) [0x0A] = STX8
                    DerefOf (WRDY [One]) [0x0B] = STX9
                    DerefOf (WRDY [0x02]) [One] = WRFE
                    DerefOf (WRDY [0x02]) [0x02] = WRC1
                    DerefOf (WRDY [0x02]) [0x03] = WRC2
                    DerefOf (WRDY [0x02]) [0x04] = WRC3
                    DerefOf (WRDY [0x02]) [0x05] = WRC4
                    Return (WRDY)
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI)
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80)
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02)
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP10.PXSX))
    {
        Scope (_SB.PCI0.RP10.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x50)
            Field (RPXX, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x44), 
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1
                    DerefOf (SPLX [One]) [One] = LIM1
                    DerefOf (SPLX [One]) [0x02] = TIM1
                    DerefOf (SPLX [0x02]) [Zero] = DOM2
                    DerefOf (SPLX [0x02]) [One] = LIM2
                    DerefOf (SPLX [0x02]) [0x02] = TIM2
                    DerefOf (SPLX [0x03]) [Zero] = DOM3
                    DerefOf (SPLX [0x03]) [One] = LIM3
                    DerefOf (SPLX [0x03]) [0x02] = TIM3
                    Return (SPLX)
                }

                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                {
                    WRST
                })
                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0
                    DerefOf (WANX [One]) [0x02] = TRL0
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1
                    DerefOf (WANX [0x02]) [0x02] = TRL1
                    Return (WANX)
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1
                    DerefOf (WRDX [One]) [One] = CID1
                    DerefOf (WRDX [0x02]) [Zero] = WDM2
                    DerefOf (WRDX [0x02]) [One] = CID2
                    Return (WRDX)
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE
                    DerefOf (WRDY [One]) [0x02] = STX0
                    DerefOf (WRDY [One]) [0x03] = STX1
                    DerefOf (WRDY [One]) [0x04] = STX2
                    DerefOf (WRDY [One]) [0x05] = STX3
                    DerefOf (WRDY [One]) [0x06] = STX4
                    DerefOf (WRDY [One]) [0x07] = STX5
                    DerefOf (WRDY [One]) [0x08] = STX6
                    DerefOf (WRDY [One]) [0x09] = STX7
                    DerefOf (WRDY [One]) [0x0A] = STX8
                    DerefOf (WRDY [One]) [0x0B] = STX9
                    DerefOf (WRDY [0x02]) [One] = WRFE
                    DerefOf (WRDY [0x02]) [0x02] = WRC1
                    DerefOf (WRDY [0x02]) [0x03] = WRC2
                    DerefOf (WRDY [0x02]) [0x04] = WRC3
                    DerefOf (WRDY [0x02]) [0x05] = WRC4
                    Return (WRDY)
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI)
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80)
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02)
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP11.PXSX))
    {
        Scope (_SB.PCI0.RP11.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x50)
            Field (RPXX, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x44), 
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1
                    DerefOf (SPLX [One]) [One] = LIM1
                    DerefOf (SPLX [One]) [0x02] = TIM1
                    DerefOf (SPLX [0x02]) [Zero] = DOM2
                    DerefOf (SPLX [0x02]) [One] = LIM2
                    DerefOf (SPLX [0x02]) [0x02] = TIM2
                    DerefOf (SPLX [0x03]) [Zero] = DOM3
                    DerefOf (SPLX [0x03]) [One] = LIM3
                    DerefOf (SPLX [0x03]) [0x02] = TIM3
                    Return (SPLX)
                }

                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                {
                    WRST
                })
                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0
                    DerefOf (WANX [One]) [0x02] = TRL0
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1
                    DerefOf (WANX [0x02]) [0x02] = TRL1
                    Return (WANX)
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1
                    DerefOf (WRDX [One]) [One] = CID1
                    DerefOf (WRDX [0x02]) [Zero] = WDM2
                    DerefOf (WRDX [0x02]) [One] = CID2
                    Return (WRDX)
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE
                    DerefOf (WRDY [One]) [0x02] = STX0
                    DerefOf (WRDY [One]) [0x03] = STX1
                    DerefOf (WRDY [One]) [0x04] = STX2
                    DerefOf (WRDY [One]) [0x05] = STX3
                    DerefOf (WRDY [One]) [0x06] = STX4
                    DerefOf (WRDY [One]) [0x07] = STX5
                    DerefOf (WRDY [One]) [0x08] = STX6
                    DerefOf (WRDY [One]) [0x09] = STX7
                    DerefOf (WRDY [One]) [0x0A] = STX8
                    DerefOf (WRDY [One]) [0x0B] = STX9
                    DerefOf (WRDY [0x02]) [One] = WRFE
                    DerefOf (WRDY [0x02]) [0x02] = WRC1
                    DerefOf (WRDY [0x02]) [0x03] = WRC2
                    DerefOf (WRDY [0x02]) [0x04] = WRC3
                    DerefOf (WRDY [0x02]) [0x05] = WRC4
                    Return (WRDY)
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI)
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80)
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02)
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP12.PXSX))
    {
        Scope (_SB.PCI0.RP12.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x50)
            Field (RPXX, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x44), 
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1
                    DerefOf (SPLX [One]) [One] = LIM1
                    DerefOf (SPLX [One]) [0x02] = TIM1
                    DerefOf (SPLX [0x02]) [Zero] = DOM2
                    DerefOf (SPLX [0x02]) [One] = LIM2
                    DerefOf (SPLX [0x02]) [0x02] = TIM2
                    DerefOf (SPLX [0x03]) [Zero] = DOM3
                    DerefOf (SPLX [0x03]) [One] = LIM3
                    DerefOf (SPLX [0x03]) [0x02] = TIM3
                    Return (SPLX)
                }

                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                {
                    WRST
                })
                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0
                    DerefOf (WANX [One]) [0x02] = TRL0
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1
                    DerefOf (WANX [0x02]) [0x02] = TRL1
                    Return (WANX)
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1
                    DerefOf (WRDX [One]) [One] = CID1
                    DerefOf (WRDX [0x02]) [Zero] = WDM2
                    DerefOf (WRDX [0x02]) [One] = CID2
                    Return (WRDX)
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE
                    DerefOf (WRDY [One]) [0x02] = STX0
                    DerefOf (WRDY [One]) [0x03] = STX1
                    DerefOf (WRDY [One]) [0x04] = STX2
                    DerefOf (WRDY [One]) [0x05] = STX3
                    DerefOf (WRDY [One]) [0x06] = STX4
                    DerefOf (WRDY [One]) [0x07] = STX5
                    DerefOf (WRDY [One]) [0x08] = STX6
                    DerefOf (WRDY [One]) [0x09] = STX7
                    DerefOf (WRDY [One]) [0x0A] = STX8
                    DerefOf (WRDY [One]) [0x0B] = STX9
                    DerefOf (WRDY [0x02]) [One] = WRFE
                    DerefOf (WRDY [0x02]) [0x02] = WRC1
                    DerefOf (WRDY [0x02]) [0x03] = WRC2
                    DerefOf (WRDY [0x02]) [0x04] = WRC3
                    DerefOf (WRDY [0x02]) [0x05] = WRC4
                    Return (WRDY)
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI)
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80)
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02)
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP13.PXSX))
    {
        Scope (_SB.PCI0.RP13.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x50)
            Field (RPXX, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x44), 
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1
                    DerefOf (SPLX [One]) [One] = LIM1
                    DerefOf (SPLX [One]) [0x02] = TIM1
                    DerefOf (SPLX [0x02]) [Zero] = DOM2
                    DerefOf (SPLX [0x02]) [One] = LIM2
                    DerefOf (SPLX [0x02]) [0x02] = TIM2
                    DerefOf (SPLX [0x03]) [Zero] = DOM3
                    DerefOf (SPLX [0x03]) [One] = LIM3
                    DerefOf (SPLX [0x03]) [0x02] = TIM3
                    Return (SPLX)
                }

                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                {
                    WRST
                })
                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0
                    DerefOf (WANX [One]) [0x02] = TRL0
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1
                    DerefOf (WANX [0x02]) [0x02] = TRL1
                    Return (WANX)
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1
                    DerefOf (WRDX [One]) [One] = CID1
                    DerefOf (WRDX [0x02]) [Zero] = WDM2
                    DerefOf (WRDX [0x02]) [One] = CID2
                    Return (WRDX)
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE
                    DerefOf (WRDY [One]) [0x02] = STX0
                    DerefOf (WRDY [One]) [0x03] = STX1
                    DerefOf (WRDY [One]) [0x04] = STX2
                    DerefOf (WRDY [One]) [0x05] = STX3
                    DerefOf (WRDY [One]) [0x06] = STX4
                    DerefOf (WRDY [One]) [0x07] = STX5
                    DerefOf (WRDY [One]) [0x08] = STX6
                    DerefOf (WRDY [One]) [0x09] = STX7
                    DerefOf (WRDY [One]) [0x0A] = STX8
                    DerefOf (WRDY [One]) [0x0B] = STX9
                    DerefOf (WRDY [0x02]) [One] = WRFE
                    DerefOf (WRDY [0x02]) [0x02] = WRC1
                    DerefOf (WRDY [0x02]) [0x03] = WRC2
                    DerefOf (WRDY [0x02]) [0x04] = WRC3
                    DerefOf (WRDY [0x02]) [0x05] = WRC4
                    Return (WRDY)
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI)
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80)
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02)
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP14.PXSX))
    {
        Scope (_SB.PCI0.RP14.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x50)
            Field (RPXX, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x44), 
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1
                    DerefOf (SPLX [One]) [One] = LIM1
                    DerefOf (SPLX [One]) [0x02] = TIM1
                    DerefOf (SPLX [0x02]) [Zero] = DOM2
                    DerefOf (SPLX [0x02]) [One] = LIM2
                    DerefOf (SPLX [0x02]) [0x02] = TIM2
                    DerefOf (SPLX [0x03]) [Zero] = DOM3
                    DerefOf (SPLX [0x03]) [One] = LIM3
                    DerefOf (SPLX [0x03]) [0x02] = TIM3
                    Return (SPLX)
                }

                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                {
                    WRST
                })
                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0
                    DerefOf (WANX [One]) [0x02] = TRL0
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1
                    DerefOf (WANX [0x02]) [0x02] = TRL1
                    Return (WANX)
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1
                    DerefOf (WRDX [One]) [One] = CID1
                    DerefOf (WRDX [0x02]) [Zero] = WDM2
                    DerefOf (WRDX [0x02]) [One] = CID2
                    Return (WRDX)
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE
                    DerefOf (WRDY [One]) [0x02] = STX0
                    DerefOf (WRDY [One]) [0x03] = STX1
                    DerefOf (WRDY [One]) [0x04] = STX2
                    DerefOf (WRDY [One]) [0x05] = STX3
                    DerefOf (WRDY [One]) [0x06] = STX4
                    DerefOf (WRDY [One]) [0x07] = STX5
                    DerefOf (WRDY [One]) [0x08] = STX6
                    DerefOf (WRDY [One]) [0x09] = STX7
                    DerefOf (WRDY [One]) [0x0A] = STX8
                    DerefOf (WRDY [One]) [0x0B] = STX9
                    DerefOf (WRDY [0x02]) [One] = WRFE
                    DerefOf (WRDY [0x02]) [0x02] = WRC1
                    DerefOf (WRDY [0x02]) [0x03] = WRC2
                    DerefOf (WRDY [0x02]) [0x04] = WRC3
                    DerefOf (WRDY [0x02]) [0x05] = WRC4
                    Return (WRDY)
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI)
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80)
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02)
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP15.PXSX))
    {
        Scope (_SB.PCI0.RP15.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x50)
            Field (RPXX, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x44), 
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1
                    DerefOf (SPLX [One]) [One] = LIM1
                    DerefOf (SPLX [One]) [0x02] = TIM1
                    DerefOf (SPLX [0x02]) [Zero] = DOM2
                    DerefOf (SPLX [0x02]) [One] = LIM2
                    DerefOf (SPLX [0x02]) [0x02] = TIM2
                    DerefOf (SPLX [0x03]) [Zero] = DOM3
                    DerefOf (SPLX [0x03]) [One] = LIM3
                    DerefOf (SPLX [0x03]) [0x02] = TIM3
                    Return (SPLX)
                }

                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                {
                    WRST
                })
                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0
                    DerefOf (WANX [One]) [0x02] = TRL0
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1
                    DerefOf (WANX [0x02]) [0x02] = TRL1
                    Return (WANX)
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1
                    DerefOf (WRDX [One]) [One] = CID1
                    DerefOf (WRDX [0x02]) [Zero] = WDM2
                    DerefOf (WRDX [0x02]) [One] = CID2
                    Return (WRDX)
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE
                    DerefOf (WRDY [One]) [0x02] = STX0
                    DerefOf (WRDY [One]) [0x03] = STX1
                    DerefOf (WRDY [One]) [0x04] = STX2
                    DerefOf (WRDY [One]) [0x05] = STX3
                    DerefOf (WRDY [One]) [0x06] = STX4
                    DerefOf (WRDY [One]) [0x07] = STX5
                    DerefOf (WRDY [One]) [0x08] = STX6
                    DerefOf (WRDY [One]) [0x09] = STX7
                    DerefOf (WRDY [One]) [0x0A] = STX8
                    DerefOf (WRDY [One]) [0x0B] = STX9
                    DerefOf (WRDY [0x02]) [One] = WRFE
                    DerefOf (WRDY [0x02]) [0x02] = WRC1
                    DerefOf (WRDY [0x02]) [0x03] = WRC2
                    DerefOf (WRDY [0x02]) [0x04] = WRC3
                    DerefOf (WRDY [0x02]) [0x05] = WRC4
                    Return (WRDY)
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI)
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80)
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02)
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP16.PXSX))
    {
        Scope (_SB.PCI0.RP16.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x50)
            Field (RPXX, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x44), 
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1
                    DerefOf (SPLX [One]) [One] = LIM1
                    DerefOf (SPLX [One]) [0x02] = TIM1
                    DerefOf (SPLX [0x02]) [Zero] = DOM2
                    DerefOf (SPLX [0x02]) [One] = LIM2
                    DerefOf (SPLX [0x02]) [0x02] = TIM2
                    DerefOf (SPLX [0x03]) [Zero] = DOM3
                    DerefOf (SPLX [0x03]) [One] = LIM3
                    DerefOf (SPLX [0x03]) [0x02] = TIM3
                    Return (SPLX)
                }

                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                {
                    WRST
                })
                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0
                    DerefOf (WANX [One]) [0x02] = TRL0
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1
                    DerefOf (WANX [0x02]) [0x02] = TRL1
                    Return (WANX)
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1
                    DerefOf (WRDX [One]) [One] = CID1
                    DerefOf (WRDX [0x02]) [Zero] = WDM2
                    DerefOf (WRDX [0x02]) [One] = CID2
                    Return (WRDX)
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE
                    DerefOf (WRDY [One]) [0x02] = STX0
                    DerefOf (WRDY [One]) [0x03] = STX1
                    DerefOf (WRDY [One]) [0x04] = STX2
                    DerefOf (WRDY [One]) [0x05] = STX3
                    DerefOf (WRDY [One]) [0x06] = STX4
                    DerefOf (WRDY [One]) [0x07] = STX5
                    DerefOf (WRDY [One]) [0x08] = STX6
                    DerefOf (WRDY [One]) [0x09] = STX7
                    DerefOf (WRDY [One]) [0x0A] = STX8
                    DerefOf (WRDY [One]) [0x0B] = STX9
                    DerefOf (WRDY [0x02]) [One] = WRFE
                    DerefOf (WRDY [0x02]) [0x02] = WRC1
                    DerefOf (WRDY [0x02]) [0x03] = WRC2
                    DerefOf (WRDY [0x02]) [0x04] = WRC3
                    DerefOf (WRDY [0x02]) [0x05] = WRC4
                    Return (WRDY)
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI)
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80)
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02)
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP17.PXSX))
    {
        Scope (_SB.PCI0.RP17.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x50)
            Field (RPXX, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x44), 
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1
                    DerefOf (SPLX [One]) [One] = LIM1
                    DerefOf (SPLX [One]) [0x02] = TIM1
                    DerefOf (SPLX [0x02]) [Zero] = DOM2
                    DerefOf (SPLX [0x02]) [One] = LIM2
                    DerefOf (SPLX [0x02]) [0x02] = TIM2
                    DerefOf (SPLX [0x03]) [Zero] = DOM3
                    DerefOf (SPLX [0x03]) [One] = LIM3
                    DerefOf (SPLX [0x03]) [0x02] = TIM3
                    Return (SPLX)
                }

                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                {
                    WRST
                })
                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0
                    DerefOf (WANX [One]) [0x02] = TRL0
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1
                    DerefOf (WANX [0x02]) [0x02] = TRL1
                    Return (WANX)
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1
                    DerefOf (WRDX [One]) [One] = CID1
                    DerefOf (WRDX [0x02]) [Zero] = WDM2
                    DerefOf (WRDX [0x02]) [One] = CID2
                    Return (WRDX)
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE
                    DerefOf (WRDY [One]) [0x02] = STX0
                    DerefOf (WRDY [One]) [0x03] = STX1
                    DerefOf (WRDY [One]) [0x04] = STX2
                    DerefOf (WRDY [One]) [0x05] = STX3
                    DerefOf (WRDY [One]) [0x06] = STX4
                    DerefOf (WRDY [One]) [0x07] = STX5
                    DerefOf (WRDY [One]) [0x08] = STX6
                    DerefOf (WRDY [One]) [0x09] = STX7
                    DerefOf (WRDY [One]) [0x0A] = STX8
                    DerefOf (WRDY [One]) [0x0B] = STX9
                    DerefOf (WRDY [0x02]) [One] = WRFE
                    DerefOf (WRDY [0x02]) [0x02] = WRC1
                    DerefOf (WRDY [0x02]) [0x03] = WRC2
                    DerefOf (WRDY [0x02]) [0x04] = WRC3
                    DerefOf (WRDY [0x02]) [0x05] = WRC4
                    Return (WRDY)
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI)
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80)
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02)
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP18.PXSX))
    {
        Scope (_SB.PCI0.RP18.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x50)
            Field (RPXX, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x44), 
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1
                    DerefOf (SPLX [One]) [One] = LIM1
                    DerefOf (SPLX [One]) [0x02] = TIM1
                    DerefOf (SPLX [0x02]) [Zero] = DOM2
                    DerefOf (SPLX [0x02]) [One] = LIM2
                    DerefOf (SPLX [0x02]) [0x02] = TIM2
                    DerefOf (SPLX [0x03]) [Zero] = DOM3
                    DerefOf (SPLX [0x03]) [One] = LIM3
                    DerefOf (SPLX [0x03]) [0x02] = TIM3
                    Return (SPLX)
                }

                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                {
                    WRST
                })
                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0
                    DerefOf (WANX [One]) [0x02] = TRL0
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1
                    DerefOf (WANX [0x02]) [0x02] = TRL1
                    Return (WANX)
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1
                    DerefOf (WRDX [One]) [One] = CID1
                    DerefOf (WRDX [0x02]) [Zero] = WDM2
                    DerefOf (WRDX [0x02]) [One] = CID2
                    Return (WRDX)
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE
                    DerefOf (WRDY [One]) [0x02] = STX0
                    DerefOf (WRDY [One]) [0x03] = STX1
                    DerefOf (WRDY [One]) [0x04] = STX2
                    DerefOf (WRDY [One]) [0x05] = STX3
                    DerefOf (WRDY [One]) [0x06] = STX4
                    DerefOf (WRDY [One]) [0x07] = STX5
                    DerefOf (WRDY [One]) [0x08] = STX6
                    DerefOf (WRDY [One]) [0x09] = STX7
                    DerefOf (WRDY [One]) [0x0A] = STX8
                    DerefOf (WRDY [One]) [0x0B] = STX9
                    DerefOf (WRDY [0x02]) [One] = WRFE
                    DerefOf (WRDY [0x02]) [0x02] = WRC1
                    DerefOf (WRDY [0x02]) [0x03] = WRC2
                    DerefOf (WRDY [0x02]) [0x04] = WRC3
                    DerefOf (WRDY [0x02]) [0x05] = WRC4
                    Return (WRDY)
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI)
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80)
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02)
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP19.PXSX))
    {
        Scope (_SB.PCI0.RP19.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x50)
            Field (RPXX, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x44), 
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1
                    DerefOf (SPLX [One]) [One] = LIM1
                    DerefOf (SPLX [One]) [0x02] = TIM1
                    DerefOf (SPLX [0x02]) [Zero] = DOM2
                    DerefOf (SPLX [0x02]) [One] = LIM2
                    DerefOf (SPLX [0x02]) [0x02] = TIM2
                    DerefOf (SPLX [0x03]) [Zero] = DOM3
                    DerefOf (SPLX [0x03]) [One] = LIM3
                    DerefOf (SPLX [0x03]) [0x02] = TIM3
                    Return (SPLX)
                }

                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                {
                    WRST
                })
                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0
                    DerefOf (WANX [One]) [0x02] = TRL0
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1
                    DerefOf (WANX [0x02]) [0x02] = TRL1
                    Return (WANX)
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1
                    DerefOf (WRDX [One]) [One] = CID1
                    DerefOf (WRDX [0x02]) [Zero] = WDM2
                    DerefOf (WRDX [0x02]) [One] = CID2
                    Return (WRDX)
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE
                    DerefOf (WRDY [One]) [0x02] = STX0
                    DerefOf (WRDY [One]) [0x03] = STX1
                    DerefOf (WRDY [One]) [0x04] = STX2
                    DerefOf (WRDY [One]) [0x05] = STX3
                    DerefOf (WRDY [One]) [0x06] = STX4
                    DerefOf (WRDY [One]) [0x07] = STX5
                    DerefOf (WRDY [One]) [0x08] = STX6
                    DerefOf (WRDY [One]) [0x09] = STX7
                    DerefOf (WRDY [One]) [0x0A] = STX8
                    DerefOf (WRDY [One]) [0x0B] = STX9
                    DerefOf (WRDY [0x02]) [One] = WRFE
                    DerefOf (WRDY [0x02]) [0x02] = WRC1
                    DerefOf (WRDY [0x02]) [0x03] = WRC2
                    DerefOf (WRDY [0x02]) [0x04] = WRC3
                    DerefOf (WRDY [0x02]) [0x05] = WRC4
                    Return (WRDY)
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI)
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80)
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02)
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP20.PXSX))
    {
        Scope (_SB.PCI0.RP20.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x50)
            Field (RPXX, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x44), 
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (VDID)
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1
                    DerefOf (SPLX [One]) [One] = LIM1
                    DerefOf (SPLX [One]) [0x02] = TIM1
                    DerefOf (SPLX [0x02]) [Zero] = DOM2
                    DerefOf (SPLX [0x02]) [One] = LIM2
                    DerefOf (SPLX [0x02]) [0x02] = TIM2
                    DerefOf (SPLX [0x03]) [Zero] = DOM3
                    DerefOf (SPLX [0x03]) [One] = LIM3
                    DerefOf (SPLX [0x03]) [0x02] = TIM3
                    Return (SPLX)
                }

                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
                {
                    WRST
                })
                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0
                    DerefOf (WANX [One]) [0x02] = TRL0
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1
                    DerefOf (WANX [0x02]) [0x02] = TRL1
                    Return (WANX)
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1
                    DerefOf (WRDX [One]) [One] = CID1
                    DerefOf (WRDX [0x02]) [Zero] = WDM2
                    DerefOf (WRDX [0x02]) [One] = CID2
                    Return (WRDX)
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE
                    DerefOf (WRDY [One]) [0x02] = STX0
                    DerefOf (WRDY [One]) [0x03] = STX1
                    DerefOf (WRDY [One]) [0x04] = STX2
                    DerefOf (WRDY [One]) [0x05] = STX3
                    DerefOf (WRDY [One]) [0x06] = STX4
                    DerefOf (WRDY [One]) [0x07] = STX5
                    DerefOf (WRDY [One]) [0x08] = STX6
                    DerefOf (WRDY [One]) [0x09] = STX7
                    DerefOf (WRDY [One]) [0x0A] = STX8
                    DerefOf (WRDY [One]) [0x0B] = STX9
                    DerefOf (WRDY [0x02]) [One] = WRFE
                    DerefOf (WRDY [0x02]) [0x02] = WRC1
                    DerefOf (WRDY [0x02]) [0x03] = WRC2
                    DerefOf (WRDY [0x02]) [0x04] = WRC3
                    DerefOf (WRDY [0x02]) [0x05] = WRC4
                    Return (WRDY)
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI)
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80)
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02)
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (WHIT, 0, NotSerialized)
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    "DockOemId", 
                    "DockSkuId", 
                    Zero, 
                    0x02, 
                    0x02
                }
            })
        }

        Method (SELF, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                "PcOemId", 
                "PcSkuId"
            })
        }
    }

    Scope (_SB.PCI0.GFX0)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB.PCI0.ISP0)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB.PCI0.SAT0)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((((S0ID == One) || (OSYS >= 0x07DF)) && ((PEPC & 0x03) != Zero)))
            {
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB.PCI0.SAT0.VOL0)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((OSYS == 0x07DD))
            {
                Return (Package (0x00){})
            }

            Return (Package (0x01)
            {
                PEPD
            })
        }
    }

    If (((S0ID == One) || (OSYS >= 0x07DF)))
    {
        Scope (_SB.PCI0.I2C0)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.I2C1)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.I2C2)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.I2C3)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.I2C4)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.I2C5)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.SPI0)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.SPI1)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.UA00)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.UA01)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.UA02)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.HECI)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }
    }

    Scope (_SB.PCI0.XHC)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB.PCI0.HDAS)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((S0ID == One))
            {
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP01.PXSX))
    {
        Scope (_SB.PCI0.RP01.PXSX)
        {
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If ((PAHC () || PNVM ()))
                {
                    If ((((S0ID == One) || (OSYS >= 0x07DF)) && (((PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                Return (Package (0x00){})
            }

            OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
            Field (PCCX, ByteAcc, NoLock, Preserve)
            {
                PIXX,   8, 
                SCCX,   8, 
                BCCX,   8
            }

            Method (PAHC, 0, Serialized)
            {
                If ((BCCX == One))
                {
                    If ((SCCX == 0x06))
                    {
                        If ((PIXX == One))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PNVM, 0, Serialized)
            {
                If ((BCCX == One))
                {
                    If ((SCCX == 0x08))
                    {
                        If ((PIXX == 0x02))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP02.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && (((PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP03.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && (((PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP04.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && (((PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    If (CondRefOf (\_SB.PCI0.RP05.PXSX))
    {
        Scope (_SB.PCI0.RP05.PXSX)
        {
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If ((PAHC () || PNVM ()))
                {
                    If ((((S0ID == One) || (OSYS >= 0x07DF)) && (((PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                Return (Package (0x00){})
            }

            OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
            Field (PCCX, ByteAcc, NoLock, Preserve)
            {
                PIXX,   8, 
                SCCX,   8, 
                BCCX,   8
            }

            Method (PAHC, 0, Serialized)
            {
                If ((BCCX == One))
                {
                    If ((SCCX == 0x06))
                    {
                        If ((PIXX == One))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PNVM, 0, Serialized)
            {
                If ((BCCX == One))
                {
                    If ((SCCX == 0x08))
                    {
                        If ((PIXX == 0x02))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP06.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && (((PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP07.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && (((PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP08.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && (((PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    If (CondRefOf (\_SB.PCI0.RP09.PXSX))
    {
        Scope (_SB.PCI0.RP09.PXSX)
        {
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If ((PAHC () || PNVM ()))
                {
                    If ((((S0ID == One) || (OSYS >= 0x07DF)) && (((PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                Return (Package (0x00){})
            }

            OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
            Field (PCCX, ByteAcc, NoLock, Preserve)
            {
                PIXX,   8, 
                SCCX,   8, 
                BCCX,   8
            }

            Method (PAHC, 0, Serialized)
            {
                If ((BCCX == One))
                {
                    If ((SCCX == 0x06))
                    {
                        If ((PIXX == One))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PNVM, 0, Serialized)
            {
                If ((BCCX == One))
                {
                    If ((SCCX == 0x08))
                    {
                        If ((PIXX == 0x02))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP10.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && (((PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP11.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && (((PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP12.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && (((PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP13.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && (((PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP14.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && (((PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP15.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && (((PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP16.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && (((PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP17.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && (((PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP18.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && (((PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP19.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && (((PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP20.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && (((PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_PR.PR00)
    {
        Method (XDEP, 0, NotSerialized)
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_PR.PR01)
    {
        Method (XDEP, 0, NotSerialized)
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_PR.PR02)
    {
        Method (XDEP, 0, NotSerialized)
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_PR.PR03)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("PR03 DEP Call")
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_PR.PR04)
    {
        Method (XDEP, 0, NotSerialized)
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_PR.PR05)
    {
        Method (XDEP, 0, NotSerialized)
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_PR.PR06)
    {
        Method (XDEP, 0, NotSerialized)
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_PR.PR07)
    {
        Method (XDEP, 0, NotSerialized)
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_PR.PR08)
    {
        Method (XDEP, 0, NotSerialized)
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_PR.PR09)
    {
        Method (XDEP, 0, NotSerialized)
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_PR.PR10)
    {
        Method (XDEP, 0, NotSerialized)
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_PR.PR11)
    {
        Method (XDEP, 0, NotSerialized)
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_PR.PR12)
    {
        Method (XDEP, 0, NotSerialized)
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_PR.PR13)
    {
        Method (XDEP, 0, NotSerialized)
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_PR.PR14)
    {
        Method (XDEP, 0, NotSerialized)
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_PR.PR15)
    {
        Method (XDEP, 0, NotSerialized)
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB)
    {
        Device (PEPD)
        {
            Name (_HID, "INT33A1")  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0D80"))  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (DEVY, Package (0x43)
            {
                Package (0x03)
                {
                    "\\_PR.PR00", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR01", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR02", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR03", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR04", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR05", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR06", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR07", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.GFX0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.UA00", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.UA01", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.XHC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.HDAS", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.PEMC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.PSDC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C2", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C3", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C4", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C5", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.UA02", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SPI0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SPI1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP01.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP02.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP03.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP04.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP05.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP06.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP07.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP08.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP09.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP10.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP11.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP12.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP13.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP14.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP15.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP16.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP17.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP18.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP19.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP20.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.ISP0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.PRT0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.PRT1", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.PRT2", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.PRT3", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.PRT4", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.PRT5", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.NVM1", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.NVM2", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.NVM3", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.VOL0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR08", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR09", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR10", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR11", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR12", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR13", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR14", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR15", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.HECI", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP01", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP12", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }
            })
            Name (BCCD, Package (0x1A)
            {
                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.PRT0", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.PRT1", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.PRT2", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.PRT3", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.VOL0", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP01.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP02.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP03.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP04.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP05.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP06.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP07.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP08.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP09.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP10.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP11.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP12.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP13.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP14.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP15.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP16.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP17.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP18.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP19.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP20.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((OSYS >= 0x07DF) || ((OSYS >= 0x07DC) && (S0ID == One))))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("c4eb40a0-6cd2-11e2-bcfd-0800200c9a66")))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x7F                                           
                        })
                    }

                    If ((Arg2 == One))
                    {
                        If ((S0ID == Zero))
                        {
                            Return (Package (0x00){})
                        }

                        If (((PEPC & 0x00100000) != Zero))
                        {
                            If ((SPST != Zero))
                            {
                                DerefOf (DEVY [0x09]) [One] = One
                            }

                            If (CondRefOf (\_SB.PCI0.RP01.PXSX))
                            {
                                If ((^^PCI0.RP01.PXSX.PAHC () || ^^PCI0.RP01.PXSX.PNVM ()))
                                {
                                    DerefOf (DEVY [0x19]) [One] = One
                                }
                            }

                            If ((^^PCI0.RP02.PXSX.PAHC () || ^^PCI0.RP02.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1A]) [One] = One
                            }

                            If ((^^PCI0.RP03.PXSX.PAHC () || ^^PCI0.RP03.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1B]) [One] = One
                            }

                            If ((^^PCI0.RP04.PXSX.PAHC () || ^^PCI0.RP04.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1C]) [One] = One
                            }

                            If (CondRefOf (\_SB.PCI0.RP05.PXSX))
                            {
                                If ((^^PCI0.RP05.PXSX.PAHC () || ^^PCI0.RP05.PXSX.PNVM ()))
                                {
                                    DerefOf (DEVY [0x1D]) [One] = One
                                }
                            }

                            If ((^^PCI0.RP06.PXSX.PAHC () || ^^PCI0.RP06.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1E]) [One] = One
                            }

                            If ((^^PCI0.RP07.PXSX.PAHC () || ^^PCI0.RP07.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1F]) [One] = One
                            }

                            If ((^^PCI0.RP08.PXSX.PAHC () || ^^PCI0.RP08.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x20]) [One] = One
                            }

                            If (CondRefOf (\_SB.PCI0.RP09.PXSX))
                            {
                                If ((^^PCI0.RP09.PXSX.PAHC () || ^^PCI0.RP09.PXSX.PNVM ()))
                                {
                                    DerefOf (DEVY [0x21]) [One] = One
                                }
                            }

                            If ((^^PCI0.RP10.PXSX.PAHC () || ^^PCI0.RP10.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x22]) [One] = One
                            }

                            If ((^^PCI0.RP11.PXSX.PAHC () || ^^PCI0.RP11.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x23]) [One] = One
                            }

                            If ((^^PCI0.RP12.PXSX.PAHC () || ^^PCI0.RP12.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x24]) [One] = One
                            }

                            If ((^^PCI0.RP13.PXSX.PAHC () || ^^PCI0.RP13.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x25]) [One] = One
                            }

                            If ((^^PCI0.RP14.PXSX.PAHC () || ^^PCI0.RP14.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x26]) [One] = One
                            }

                            If ((^^PCI0.RP15.PXSX.PAHC () || ^^PCI0.RP15.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x27]) [One] = One
                            }

                            If ((^^PCI0.RP16.PXSX.PAHC () || ^^PCI0.RP16.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x28]) [One] = One
                            }

                            If ((^^PCI0.RP17.PXSX.PAHC () || ^^PCI0.RP17.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x29]) [One] = One
                            }

                            If ((^^PCI0.RP18.PXSX.PAHC () || ^^PCI0.RP18.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x2A]) [One] = One
                            }

                            If ((^^PCI0.RP19.PXSX.PAHC () || ^^PCI0.RP19.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x2B]) [One] = One
                            }

                            If ((^^PCI0.RP20.PXSX.PAHC () || ^^PCI0.RP20.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x2C]) [One] = One
                            }
                        }

                        If (^^PCI0.RP01.PXSX.WWST ())
                        {
                            If ((WRTO == One))
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x41]) [0x02]) [One]) [One] = 0x03
                            }
                            Else
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x41]) [0x02]) [One]) [One] = Zero
                            }

                            DerefOf (DEVY [0x41]) [One] = One
                        }

                        If (^^PCI0.RP12.PXSX.WWST ())
                        {
                            If ((WRTO == One))
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x42]) [0x02]) [One]) [One] = 0x03
                            }
                            Else
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x42]) [0x02]) [One]) [One] = Zero
                            }

                            DerefOf (DEVY [0x42]) [One] = One
                        }

                        If (((PEPC & 0x00200000) != Zero))
                        {
                            DerefOf (DEVY [0x37]) [One] = One
                        }

                        If (((PEPC & 0x00400000) != Zero))
                        {
                            DerefOf (DEVY [0x2E]) [One] = One
                        }

                        If (((PEPC & 0x00800000) != Zero))
                        {
                            DerefOf (DEVY [0x2F]) [One] = One
                        }

                        If (((PEPC & 0x01000000) != Zero))
                        {
                            DerefOf (DEVY [0x30]) [One] = One
                        }

                        If (((PEPC & 0x02000000) != Zero))
                        {
                            DerefOf (DEVY [0x31]) [One] = One
                        }

                        If (((PEPC & 0x04000000) != Zero))
                        {
                            DerefOf (DEVY [0x32]) [One] = One
                        }

                        If (((PEPC & 0x08000000) != Zero))
                        {
                            DerefOf (DEVY [0x33]) [One] = One
                        }

                        If (((PEPC & 0x10000000) != Zero))
                        {
                            DerefOf (DEVY [0x34]) [One] = One
                        }

                        If (((PEPC & 0x20000000) != Zero))
                        {
                            DerefOf (DEVY [0x35]) [One] = One
                        }

                        If (((PEPC & 0x40000000) != Zero))
                        {
                            DerefOf (DEVY [0x36]) [One] = One
                        }

                        If (((PEPC & 0x80000000) == Zero))
                        {
                            DerefOf (DEVY [0x40]) [One] = Zero
                        }

                        If (((PEPC & 0x04) == Zero))
                        {
                            DerefOf (DEVY [0x0A]) [One] = Zero
                        }

                        If (((PEPC & 0x08) == Zero))
                        {
                            DerefOf (DEVY [0x0B]) [One] = Zero
                        }

                        If (((PEPC & 0x10) == Zero)){}
                        If (((PEPC & 0x20) == Zero))
                        {
                            DerefOf (DEVY [0x0C]) [One] = Zero
                        }

                        If (((PEPC & 0x40) == Zero))
                        {
                            DerefOf (DEVY [0x0D]) [One] = Zero
                        }

                        If (((PEPC & 0x80) == Zero))
                        {
                            DerefOf (DEVY [0x0E]) [One] = Zero
                        }

                        If (((PEPC & 0x0100) == Zero))
                        {
                            DerefOf (DEVY [0x0F]) [One] = Zero
                        }

                        If (((PEPC & 0x0200) == Zero))
                        {
                            DerefOf (DEVY [0x08]) [One] = Zero
                        }

                        If ((TCNT >= One))
                        {
                            DerefOf (DEVY [Zero]) [One] = One
                        }

                        If ((TCNT >= 0x02))
                        {
                            DerefOf (DEVY [One]) [One] = One
                        }

                        If ((TCNT >= 0x03))
                        {
                            DerefOf (DEVY [0x02]) [One] = One
                        }

                        If ((TCNT >= 0x04))
                        {
                            DerefOf (DEVY [0x03]) [One] = One
                        }

                        If ((TCNT >= 0x05))
                        {
                            DerefOf (DEVY [0x04]) [One] = One
                        }

                        If ((TCNT >= 0x06))
                        {
                            DerefOf (DEVY [0x05]) [One] = One
                        }

                        If ((TCNT >= 0x07))
                        {
                            DerefOf (DEVY [0x06]) [One] = One
                        }

                        If ((TCNT >= 0x08))
                        {
                            DerefOf (DEVY [0x07]) [One] = One
                        }

                        If ((TCNT >= 0x09))
                        {
                            DerefOf (DEVY [0x38]) [One] = One
                        }

                        If ((TCNT >= 0x0A))
                        {
                            DerefOf (DEVY [0x39]) [One] = One
                        }

                        If ((TCNT >= 0x0B))
                        {
                            DerefOf (DEVY [0x3A]) [One] = One
                        }

                        If ((TCNT >= 0x0C))
                        {
                            DerefOf (DEVY [0x3B]) [One] = One
                        }

                        If ((TCNT >= 0x0D))
                        {
                            DerefOf (DEVY [0x3C]) [One] = One
                        }

                        If ((TCNT >= 0x0E))
                        {
                            DerefOf (DEVY [0x3D]) [One] = One
                        }

                        If ((TCNT >= 0x0F))
                        {
                            DerefOf (DEVY [0x3E]) [One] = One
                        }

                        If ((TCNT >= 0x10))
                        {
                            DerefOf (DEVY [0x3F]) [One] = One
                        }

                        If (((PEPC & 0x0400) == Zero))
                        {
                            DerefOf (DEVY [Zero]) [One] = Zero
                            DerefOf (DEVY [One]) [One] = Zero
                            DerefOf (DEVY [0x02]) [One] = Zero
                            DerefOf (DEVY [0x03]) [One] = Zero
                            DerefOf (DEVY [0x04]) [One] = Zero
                            DerefOf (DEVY [0x05]) [One] = Zero
                            DerefOf (DEVY [0x06]) [One] = Zero
                            DerefOf (DEVY [0x07]) [One] = Zero
                            DerefOf (DEVY [0x38]) [One] = Zero
                            DerefOf (DEVY [0x39]) [One] = Zero
                            DerefOf (DEVY [0x3A]) [One] = Zero
                            DerefOf (DEVY [0x3B]) [One] = Zero
                            DerefOf (DEVY [0x3C]) [One] = Zero
                            DerefOf (DEVY [0x3D]) [One] = Zero
                            DerefOf (DEVY [0x3E]) [One] = Zero
                            DerefOf (DEVY [0x3F]) [One] = Zero
                        }

                        If (((PEPC & 0x0800) == Zero))
                        {
                            DerefOf (DEVY [0x10]) [One] = Zero
                        }

                        If (((PEPC & 0x1000) == Zero))
                        {
                            DerefOf (DEVY [0x11]) [One] = Zero
                        }

                        If (((PEPC & 0x2000) == Zero))
                        {
                            DerefOf (DEVY [0x12]) [One] = Zero
                        }

                        If (((PEPC & 0x4000) == Zero))
                        {
                            DerefOf (DEVY [0x13]) [One] = Zero
                        }

                        If (((PEPC & 0x8000) == Zero))
                        {
                            DerefOf (DEVY [0x14]) [One] = Zero
                        }

                        If (((PEPC & 0x00010000) == Zero))
                        {
                            DerefOf (DEVY [0x15]) [One] = Zero
                        }

                        If (((PEPC & 0x00020000) == Zero))
                        {
                            DerefOf (DEVY [0x16]) [One] = Zero
                        }

                        If (((PEPC & 0x00040000) == Zero))
                        {
                            DerefOf (DEVY [0x17]) [One] = Zero
                        }

                        If (((PEPC & 0x00080000) == Zero))
                        {
                            DerefOf (DEVY [0x18]) [One] = Zero
                        }

                        If (((PEPC & 0x02) == Zero))
                        {
                            DerefOf (DEVY [0x2D]) [One] = Zero
                        }

                        If ((OSYS >= 0x07DF))
                        {
                            If (CondRefOf (\_SB.PCI0.RP01.PXSX))
                            {
                                If (^^PCI0.RP01.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x19]) [0x02]) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x19]) [0x02]) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x19]) [One] = One
                                }
                            }

                            If (^^PCI0.RP02.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x1A]) [0x02]) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x1A]) [0x02]) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x1A]) [One] = One
                            }

                            If (^^PCI0.RP03.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x1B]) [0x02]) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x1B]) [0x02]) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x1B]) [One] = One
                            }

                            If (^^PCI0.RP04.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x1C]) [0x02]) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x1C]) [0x02]) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x1C]) [One] = One
                            }

                            If (CondRefOf (\_SB.PCI0.RP05.PXSX))
                            {
                                If (^^PCI0.RP05.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x1D]) [0x02]) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x1D]) [0x02]) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x1D]) [One] = One
                                }
                            }

                            If (^^PCI0.RP06.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x1E]) [0x02]) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x1E]) [0x02]) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x1E]) [One] = One
                            }

                            If (^^PCI0.RP07.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x1F]) [0x02]) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x1F]) [0x02]) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x1F]) [One] = One
                            }

                            If (^^PCI0.RP08.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x20]) [0x02]) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x20]) [0x02]) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x20]) [One] = One
                            }

                            If (CondRefOf (\_SB.PCI0.RP09.PXSX))
                            {
                                If (^^PCI0.RP09.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x21]) [0x02]) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x21]) [0x02]) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x21]) [One] = One
                                }
                            }

                            If (^^PCI0.RP10.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x22]) [0x02]) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x22]) [0x02]) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x22]) [One] = One
                            }

                            If (^^PCI0.RP11.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x23]) [0x02]) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x23]) [0x02]) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x23]) [One] = One
                            }

                            If (^^PCI0.RP12.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x24]) [0x02]) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x24]) [0x02]) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x24]) [One] = One
                            }

                            If (^^PCI0.RP13.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x25]) [0x02]) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x25]) [0x02]) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x25]) [One] = One
                            }

                            If (^^PCI0.RP14.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x26]) [0x02]) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x26]) [0x02]) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x26]) [One] = One
                            }

                            If (^^PCI0.RP15.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x27]) [0x02]) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x27]) [0x02]) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x27]) [One] = One
                            }

                            If (^^PCI0.RP16.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x28]) [0x02]) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x28]) [0x02]) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x28]) [One] = One
                            }

                            If (^^PCI0.RP17.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x29]) [0x02]) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x29]) [0x02]) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x29]) [One] = One
                            }

                            If (^^PCI0.RP18.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x2A]) [0x02]) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x2A]) [0x02]) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x2A]) [One] = One
                            }

                            If (^^PCI0.RP19.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x2B]) [0x02]) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x2B]) [0x02]) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x2B]) [One] = One
                            }

                            If (^^PCI0.RP20.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x2C]) [0x02]) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x2C]) [0x02]) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x2C]) [One] = One
                            }
                        }

                        If (((OSYS >= 0x07DF) && (PWIG == One)))
                        {
                            If (CondRefOf (\_SB.PCI0.RP01.PXSX))
                            {
                                If (^^PCI0.RP01.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x19]) [One] = One
                                }
                            }

                            If (^^PCI0.RP02.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x1A]) [One] = One
                            }

                            If (^^PCI0.RP03.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x1B]) [One] = One
                            }

                            If (^^PCI0.RP04.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x1C]) [One] = One
                            }

                            If (CondRefOf (\_SB.PCI0.RP01.PXSX))
                            {
                                If (^^PCI0.RP05.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x1D]) [One] = One
                                }
                            }

                            If (^^PCI0.RP06.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x1E]) [One] = One
                            }

                            If (^^PCI0.RP07.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x1F]) [One] = One
                            }

                            If (^^PCI0.RP08.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x20]) [One] = One
                            }

                            If (CondRefOf (\_SB.PCI0.RP01.PXSX))
                            {
                                If (^^PCI0.RP09.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x21]) [One] = One
                                }
                            }

                            If (^^PCI0.RP10.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x22]) [One] = One
                            }

                            If (^^PCI0.RP11.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x23]) [One] = One
                            }

                            If (^^PCI0.RP12.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x24]) [One] = One
                            }

                            If (^^PCI0.RP13.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x25]) [One] = One
                            }

                            If (^^PCI0.RP14.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x26]) [One] = One
                            }

                            If (^^PCI0.RP15.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x27]) [One] = One
                            }

                            If (^^PCI0.RP16.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x28]) [One] = One
                            }

                            If (^^PCI0.RP17.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x29]) [One] = One
                            }

                            If (^^PCI0.RP18.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x2A]) [One] = One
                            }

                            If (^^PCI0.RP19.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x2B]) [One] = One
                            }

                            If (^^PCI0.RP20.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x2C]) [One] = One
                            }
                        }

                        Return (DEVY)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (BCCD)
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((S0ID == One)){}
                    }

                    If ((Arg2 == 0x04))
                    {
                        If ((S0ID == One))
                        {
                            If (((RTBT == One) && CondRefOf (\_GPE.TBNF)))
                            {
                                \_GPE.TBNF ()
                            }
                        }
                    }

                    If ((Arg2 == 0x05))
                    {
                        If ((S0ID == One))
                        {
                            GUAM (One)
                        }

                        ^^PCI0.LPCB.H_EC.ECNT (One)
                    }

                    If ((Arg2 == 0x06))
                    {
                        If ((S0ID == One))
                        {
                            GUAM (Zero)
                        }

                        ^^PCI0.LPCB.H_EC.ECNT (Zero)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (IICB, 2, Serialized)
        {
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Name (IIC0, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                            0x00, ResourceConsumer, _Y31, Exclusive,
                            )
                    })
                    CreateWordField (IIC0, \_SB.PCI0.IICB._Y31._ADR, DAD0)  // _ADR: Address
                    DAD0 = Arg0
                    Return (IIC0)
                }
                Case (One)
                {
                    Name (IIC1, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C1",
                            0x00, ResourceConsumer, _Y32, Exclusive,
                            )
                    })
                    CreateWordField (IIC1, \_SB.PCI0.IICB._Y32._ADR, DAD1)  // _ADR: Address
                    DAD1 = Arg0
                    Return (IIC1)
                }
                Case (0x02)
                {
                    Name (IIC2, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                            0x00, ResourceConsumer, _Y33, Exclusive,
                            )
                    })
                    CreateWordField (IIC2, \_SB.PCI0.IICB._Y33._ADR, DAD2)  // _ADR: Address
                    DAD2 = Arg0
                    Return (IIC2)
                }
                Case (0x03)
                {
                    Name (IIC3, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C3",
                            0x00, ResourceConsumer, _Y34, Exclusive,
                            )
                    })
                    CreateWordField (IIC3, \_SB.PCI0.IICB._Y34._ADR, DAD3)  // _ADR: Address
                    DAD3 = Arg0
                    Return (IIC3)
                }
                Case (0x04)
                {
                    Name (IIC4, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                            0x00, ResourceConsumer, _Y35, Exclusive,
                            )
                    })
                    CreateWordField (IIC4, \_SB.PCI0.IICB._Y35._ADR, DAD4)  // _ADR: Address
                    DAD4 = Arg0
                    Return (IIC4)
                }
                Default
                {
                    Name (IIC5, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C5",
                            0x00, ResourceConsumer, _Y36, Exclusive,
                            )
                    })
                    CreateWordField (IIC5, \_SB.PCI0.IICB._Y36._ADR, DAD5)  // _ADR: Address
                    DAD5 = Arg0
                    Return (IIC5)
                }

            }
        }

        Method (PINR, 2, Serialized)
        {
            Name (GPIR, ResourceTemplate ()
            {
                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                    "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0xFFFF
                    }
            })
            CreateWordField (GPIR, 0x17, PINF)
            PINF = ((0x18 * Arg1) + Arg0)
            Return (GPIR)
        }

        Method (DSMI, 4, Serialized)
        {
            Local3 = (Arg3 << 0x18)
            Local2 = (Arg2 << 0x10)
            Local1 = (Arg1 << 0x08)
            Local0 = (Local1 | Arg0)
            Local0 |= Local2
            Local0 |= Local3
            Return (Local0)
        }

        Method (GPPI, 4, Serialized)
        {
            Local3 = (Arg3 << 0x18)
            Local2 = (Arg2 << 0x10)
            Local1 = (Arg1 << 0x08)
            Local0 = (Local1 | Arg0)
            Local0 |= Local2
            Local0 |= Local3
            Return (Local0)
        }

        Method (GRID, 1, Serialized)
        {
            Name (BUF, Buffer (0x09){})
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    BUF [Zero] = L0H0
                    BUF [One] = L0H1
                    BUF [0x02] = L0H2
                    BUF [0x03] = L0H3
                    BUF [0x04] = L0H4
                    BUF [0x05] = L0H5
                    BUF [0x06] = L0H6
                    BUF [0x07] = L0H7
                    BUF [0x08] = L0H8
                }
                Case (One)
                {
                    BUF [Zero] = L1H0
                    BUF [One] = L1H1
                    BUF [0x02] = L1H2
                    BUF [0x03] = L1H3
                    BUF [0x04] = L1H4
                    BUF [0x05] = L1H5
                    BUF [0x06] = L1H6
                    BUF [0x07] = L1H7
                    BUF [0x08] = L1H8
                }
                Case (0x02)
                {
                    BUF [Zero] = L2H0
                    BUF [One] = L2H1
                    BUF [0x02] = L2H2
                    BUF [0x03] = L2H3
                    BUF [0x04] = L2H4
                    BUF [0x05] = L2H5
                    BUF [0x06] = L2H6
                    BUF [0x07] = L2H7
                    BUF [0x08] = L2H8
                }
                Default
                {
                    BUF [Zero] = L3H0
                    BUF [One] = L3H1
                    BUF [0x02] = L3H2
                    BUF [0x03] = L3H3
                    BUF [0x04] = L3H4
                    BUF [0x05] = L3H5
                    BUF [0x06] = L3H6
                    BUF [0x07] = L3H7
                    BUF [0x08] = L3H8
                }

            }

            Return (ToString (BUF, Ones))
        }

        Method (HCID, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Local0 = L0SM
                }
                Case (One)
                {
                    Local0 = L1SM
                }
                Case (0x02)
                {
                    Local0 = L2SM
                }
                Default
                {
                    Local0 = L3SM
                }

            }

            Switch (ToInteger (Local0))
            {
                Case (Zero)
                {
                    Return ("INT3471")
                }
                Case (One)
                {
                    Return ("INT33BE")
                }
                Case (0x02)
                {
                    Return ("INT3476")
                }
                Case (0x03)
                {
                    Return ("INT3477")
                }
                Case (0x04)
                {
                    Return ("INT3474")
                }
                Case (0x05)
                {
                    Return ("INT3473")
                }
                Case (0x06)
                {
                    Return ("INT3475")
                }
                Case (0x07)
                {
                    Return ("INT3478")
                }
                Case (0x08)
                {
                    Return ("INT3479")
                }
                Case (0x09)
                {
                    Return ("INT347A")
                }
                Case (0x0A)
                {
                    Return ("INT347B")
                }
                Case (0x0B)
                {
                    Return ("OVTI2742")
                }
                Case (0x0C)
                {
                    Return ("OVTI9234")
                }
                Case (0x0D)
                {
                    Return ("OVTI8856")
                }
                Case (0x0E)
                {
                    Return ("OVTIF860")
                }
                Default
                {
                    Return (GRID (Arg0))
                }

            }
        }

        Method (CDEP, 1, Serialized)
        {
            If ((Arg0 == Zero))
            {
                If ((C0TP == One))
                {
                    Switch (ToInteger (L0BS))
                    {
                        Case (Zero)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C0
                            })
                        }
                        Case (One)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C1
                            })
                        }
                        Case (0x02)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C2
                            })
                        }
                        Case (0x03)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C3
                            })
                        }
                        Case (0x04)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C4
                            })
                        }
                        Case (0x05)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C5
                            })
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                DSC0
                            })
                        }

                    }
                }

                If ((C0TP > One))
                {
                    Return (Package (0x01)
                    {
                        CLP0
                    })
                }
            }

            If ((Arg0 == One))
            {
                If ((C1TP == One))
                {
                    Switch (ToInteger (L1BS))
                    {
                        Case (Zero)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C0
                            })
                        }
                        Case (One)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C1
                            })
                        }
                        Case (0x02)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C2
                            })
                        }
                        Case (0x03)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C3
                            })
                        }
                        Case (0x04)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C4
                            })
                        }
                        Case (0x05)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C5
                            })
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                DSC1
                            })
                        }

                    }
                }

                If ((C1TP > One))
                {
                    Return (Package (0x01)
                    {
                        CLP1
                    })
                }
            }

            If ((Arg0 == 0x02))
            {
                If ((C2TP == One))
                {
                    Switch (ToInteger (L2BS))
                    {
                        Case (Zero)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C0
                            })
                        }
                        Case (One)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C1
                            })
                        }
                        Case (0x02)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C2
                            })
                        }
                        Case (0x03)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C3
                            })
                        }
                        Case (0x04)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C4
                            })
                        }
                        Case (0x05)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C5
                            })
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                DSC2
                            })
                        }

                    }
                }

                If ((C2TP > One))
                {
                    Return (Package (0x01)
                    {
                        CLP2
                    })
                }
            }

            If ((Arg0 == 0x03))
            {
                If ((C3TP == One))
                {
                    Switch (ToInteger (L3BS))
                    {
                        Case (Zero)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C0
                            })
                        }
                        Case (One)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C1
                            })
                        }
                        Case (0x02)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C2
                            })
                        }
                        Case (0x03)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C3
                            })
                        }
                        Case (0x04)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C4
                            })
                        }
                        Case (0x05)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C5
                            })
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                DSC3
                            })
                        }

                    }
                }

                If ((C3TP > One))
                {
                    Return (Package (0x01)
                    {
                        CLP3
                    })
                }
            }

            Return (Package (0x01)
            {
                PCI0
            })
        }

        Method (CDEG, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Return (Zero)
                }
                Case (One)
                {
                    Return (0x2D)
                }
                Case (0x02)
                {
                    Return (0x5A)
                }
                Case (0x03)
                {
                    Return (0x87)
                }
                Case (0x04)
                {
                    Return (0xB4)
                }
                Case (0x05)
                {
                    Return (0xE1)
                }
                Case (0x06)
                {
                    Return (0x010E)
                }
                Case (0x07)
                {
                    Return (0x013B)
                }
                Default
                {
                    Return (Zero)
                }

            }
        }

        Device (DSC0)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3472")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                     
                    }
                If ((C0GP > Zero))
                {
                    Local1 = PINR (C0P0, C0G0)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C0GP > One))
                {
                    Local1 = PINR (C0P1, C0G1)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C0GP > 0x02))
                {
                    Local1 = PINR (C0P2, C0G2)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C0GP > 0x03))
                {
                    Local1 = PINR (C0P3, C0G3)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL00)
                {
                    If ((C0TP == One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                PAR [Zero] = C0VE
                PAR [One] = C0TP
                PAR [0x03] = C0CV
                PAR [0x08] = C0W0
                PAR [0x09] = C0W1
                PAR [0x0A] = C0W2
                PAR [0x0B] = C0W3
                PAR [0x0C] = C0W4
                PAR [0x0D] = C0W5
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f")))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x3F                                           
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (C0GP)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (GPPI (C0F0, ((0x18 * C0G0) + C0P0), C0I0, C0A0))
                    }

                    If ((Arg2 == 0x03))
                    {
                        Return (GPPI (C0F1, ((0x18 * C0G1) + C0P1), C0I1, C0A1))
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (GPPI (C0F2, ((0x18 * C0G2) + C0P2), C0I2, C0A2))
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (GPPI (C0F3, ((0x18 * C0G3) + C0P3), C0I3, C0A3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (DSC1)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3472")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                     
                    }
                If ((C1GP > Zero))
                {
                    Local1 = PINR (C1P0, C1G0)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If ((C1GP > One))
                {
                    Local1 = PINR (C1P1, C1G1)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C1GP > 0x02))
                {
                    Local1 = PINR (C1P2, C1G2)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C1GP > 0x03))
                {
                    Local1 = PINR (C1P3, C1G3)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL01)
                {
                    If ((C1TP == One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                PAR [Zero] = C1VE
                PAR [One] = C1TP
                PAR [0x03] = C1CV
                PAR [0x08] = C1W0
                PAR [0x09] = C1W1
                PAR [0x0A] = C1W2
                PAR [0x0B] = C1W3
                PAR [0x0C] = C1W4
                PAR [0x0D] = C1W5
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f")))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x3F                                           
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (C1GP)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (GPPI (C1F0, ((0x18 * C1G0) + C1P0), C1I0, C1A0))
                    }

                    If ((Arg2 == 0x03))
                    {
                        Return (GPPI (C1F1, ((0x18 * C1G1) + C1P1), C1I1, C1A1))
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (GPPI (C1F2, ((0x18 * C1G2) + C1P2), C1I2, C1A2))
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (GPPI (C1F3, ((0x18 * C1G3) + C1P3), C1I3, C1A3))
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (DSC2)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3472")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                     
                    }
                If ((C2GP > Zero))
                {
                    Local1 = PINR (C2P0, C2G0)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C2GP > One))
                {
                    Local1 = PINR (C2P1, C2G1)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C2GP > 0x02))
                {
                    Local1 = PINR (C2P2, C2G2)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C2GP > 0x03))
                {
                    Local1 = PINR (C2P3, C2G3)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL02)
                {
                    If ((C2TP == One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                PAR [Zero] = C2VE
                PAR [One] = C2TP
                PAR [0x03] = C2CV
                PAR [0x08] = C2W0
                PAR [0x09] = C2W1
                PAR [0x0A] = C2W2
                PAR [0x0B] = C2W3
                PAR [0x0C] = C2W4
                PAR [0x0D] = C2W5
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f")))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x3F                                           
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (C2GP)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (GPPI (C2F0, ((0x18 * C2G0) + C2P0), C2I0, C2A0))
                    }

                    If ((Arg2 == 0x03))
                    {
                        Return (GPPI (C2F1, ((0x18 * C2G1) + C2P1), C2I1, C2A1))
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (GPPI (C2F2, ((0x18 * C2G2) + C2P2), C2I2, C2A2))
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (GPPI (C2F3, ((0x18 * C2G3) + C2P3), C2I3, C2A3))
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (DSC3)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3472")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                     
                    }
                If ((C3GP > Zero))
                {
                    Local1 = PINR (C3P0, C3G0)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C3GP > One))
                {
                    Local1 = PINR (C3P1, C3G1)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C3GP > 0x02))
                {
                    Local1 = PINR (C3P2, C3G2)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C3GP > 0x03))
                {
                    Local1 = PINR (C3P3, C3G3)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL03)
                {
                    If ((C3TP == One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                PAR [Zero] = C3VE
                PAR [One] = C3TP
                PAR [0x03] = C3CV
                PAR [0x08] = C3W0
                PAR [0x09] = C3W1
                PAR [0x0A] = C3W2
                PAR [0x0B] = C3W3
                PAR [0x0C] = C3W4
                PAR [0x0D] = C3W5
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f")))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x3F                                           
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (C3GP)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (GPPI (C3F0, ((0x18 * C3G0) + C3P0), C3I0, C3A0))
                    }

                    If ((Arg2 == 0x03))
                    {
                        Return (GPPI (C3F1, ((0x18 * C3G1) + C3P1), C3I1, C3A1))
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (GPPI (C3F2, ((0x18 * C3G2) + C3P2), C3I2, C3A2))
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (GPPI (C3F3, ((0x18 * C3G3) + C3P3), C3I3, C3A3))
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (CLP0)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (CL00)
                {
                    If ((C0IB == 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If ((C0IB == 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PCI0
                })
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3472")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                     
                    }
                ConcatenateResTemplate (Local0, IICB (C0IA, C0IB), Local2)
                Local0 = Local2
                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL00)
                {
                    If ((C0TP > One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                PAR [Zero] = C0VE
                PAR [One] = C0TP
                PAR [0x03] = C0CV
                PAR [0x08] = C0W0
                PAR [0x09] = C0W1
                PAR [0x0A] = C0W2
                PAR [0x0B] = C0W3
                PAR [0x0C] = C0W4
                PAR [0x0D] = C0W5
                Return (PAR)
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                BPOS = C0PL
                Return (PLDB)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (DSMI (0x0B, C0IA, Zero, C0IB))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        I2CC = One
                        DEV0 = DSMI (0x0B, C0IA, Zero, C0IB)
                        Return (DSMB)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (CLP1)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (CL01)
                {
                    If ((C1IB == 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If ((C1IB == 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PCI0
                })
            }

            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3472")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                     
                    }
                ConcatenateResTemplate (Local0, IICB (C1IA, C1IB), Local2)
                Local0 = Local2
                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL01)
                {
                    If ((C1TP > One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                PAR [Zero] = C1VE
                PAR [One] = C1TP
                PAR [0x03] = C1CV
                PAR [0x08] = C1W0
                PAR [0x09] = C1W1
                PAR [0x0A] = C1W2
                PAR [0x0B] = C1W3
                PAR [0x0C] = C1W4
                PAR [0x0D] = C1W5
                Return (PAR)
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                BPOS = C1PL
                Return (PLDB)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (DSMI (0x0B, C1IA, Zero, C1IB))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        I2CC = One
                        DEV0 = DSMI (0x0B, C1IA, Zero, C1IB)
                        Return (DSMB)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (CLP2)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (CL02)
                {
                    If ((C2IB == 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If ((C2IB == 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PCI0
                })
            }

            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3472")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                     
                    }
                ConcatenateResTemplate (Local0, IICB (C2IA, C2IB), Local2)
                Local0 = Local2
                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL02)
                {
                    If ((C2TP > One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                PAR [Zero] = C2VE
                PAR [One] = C2TP
                PAR [0x03] = C2CV
                PAR [0x08] = C2W0
                PAR [0x09] = C2W1
                PAR [0x0A] = C2W2
                PAR [0x0B] = C2W3
                PAR [0x0C] = C2W4
                PAR [0x0D] = C2W5
                Return (PAR)
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                BPOS = C2PL
                Return (PLDB)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (DSMI (0x0B, C2IA, Zero, C2IB))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        I2CC = One
                        DEV0 = DSMI (0x0B, C2IA, Zero, C2IB)
                        Return (DSMB)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (CLP3)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (CL03)
                {
                    If ((C3IB == 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If ((C3IB == 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PCI0
                })
            }

            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3472")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                     
                    }
                ConcatenateResTemplate (Local0, IICB (C3IA, C3IB), Local2)
                Local0 = Local2
                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL03)
                {
                    If ((C3TP > One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                PAR [Zero] = C3VE
                PAR [One] = C3TP
                PAR [0x03] = C3CV
                PAR [0x08] = C3W0
                PAR [0x09] = C3W1
                PAR [0x0A] = C3W2
                PAR [0x0B] = C3W3
                PAR [0x0C] = C3W4
                PAR [0x0D] = C3W5
                Return (PAR)
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                BPOS = C3PL
                Return (PLDB)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (DSMI (0x0B, C3IA, Zero, C3IB))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        I2CC = One
                        DEV0 = DSMI (0x0B, C3IA, Zero, C3IB)
                        Return (DSMB)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (LNK0)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L0EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L0EN)
                {
                    Return (CDEP (L0CL))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PCI0
                    })
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (HCID (Zero))
            }

            Method (_CID, 0, NotSerialized)  // _CID: Compatible ID
            {
                Return (HCID (Zero))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                BUF [Zero] = L0M0
                BUF [One] = L0M1
                BUF [0x02] = L0M2
                BUF [0x03] = L0M3
                BUF [0x04] = L0M4
                BUF [0x05] = L0M5
                BUF [0x06] = L0M6
                BUF [0x07] = L0M7
                BUF [0x08] = L0M8
                BUF [0x09] = L0M9
                BUF [0x0A] = L0MA
                BUF [0x0B] = L0MB
                BUF [0x0C] = L0MC
                BUF [0x0D] = L0MD
                BUF [0x0E] = L0ME
                BUF [0x0F] = L0MF
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                CreateField (DerefOf (PLDB [Zero]), 0x73, 0x04, RPOS)
                BPOS = L0PL
                RPOS = L0DG
                Return (PLDB)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                     
                    }
                If ((L0DI > Zero))
                {
                    Local1 = IICB (L0A0, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > One))
                {
                    Local1 = IICB (L0A1, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x02))
                {
                    Local1 = IICB (L0A2, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x03))
                {
                    Local1 = IICB (L0A3, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x04))
                {
                    Local1 = IICB (L0A4, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x05))
                {
                    Local1 = IICB (L0A5, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x06))
                {
                    Local1 = IICB (L0A6, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x07))
                {
                    Local1 = IICB (L0A7, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x08))
                {
                    Local1 = IICB (L0A8, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x09))
                {
                    Local1 = IICB (L0A9, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x0A))
                {
                    Local1 = IICB (L0AA, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x0B))
                {
                    Local1 = IICB (L0AB, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11,
                    /* 0008 */  0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5,
                    /* 0010 */  0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0050 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                         
                })
                PAR [Zero] = L0DV
                PAR [One] = L0CV
                PAR [0x18] = CDIV
                PAR [0x1C] = L0LU
                PAR [0x1D] = L0NL
                PAR [0x4E] = L0EE
                PAR [0x4F] = L0VC
                PAR [0x52] = L0FS
                PAR [0x53] = L0LE
                PAR [0x54] = CDEG (L0DG)
                CreateDWordField (PAR, 0x56, DAT)
                DAT = L0CK
                PAR [0x5A] = L0CL
                PAR [0x5F] = L0PP
                PAR [0x60] = L0VR
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (BUF, Buffer (0x10){})
                        BUF [Zero] = L0M0
                        BUF [One] = L0M1
                        BUF [0x02] = L0M2
                        BUF [0x03] = L0M3
                        BUF [0x04] = L0M4
                        BUF [0x05] = L0M5
                        BUF [0x06] = L0M6
                        BUF [0x07] = L0M7
                        BUF [0x08] = L0M8
                        BUF [0x09] = L0M9
                        BUF [0x0A] = L0MA
                        BUF [0x0B] = L0MB
                        BUF [0x0C] = L0MC
                        BUF [0x0D] = L0MD
                        BUF [0x0E] = L0ME
                        BUF [0x0F] = L0MF
                        Return (ToString (BUF, Ones))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        I2CC = L0DI
                        DEV0 = DSMI (L0D0, L0A0, Zero, L0BS)
                        DEV1 = DSMI (L0D1, L0A1, Zero, L0BS)
                        DEV2 = DSMI (L0D2, L0A2, Zero, L0BS)
                        DEV3 = DSMI (L0D3, L0A3, Zero, L0BS)
                        DEV4 = DSMI (L0D4, L0A4, Zero, L0BS)
                        DEV5 = DSMI (L0D5, L0A5, Zero, L0BS)
                        DEV6 = DSMI (L0D6, L0A6, Zero, L0BS)
                        DEV7 = DSMI (L0D7, L0A7, Zero, L0BS)
                        DEV8 = DSMI (L0D8, L0A8, Zero, L0BS)
                        DEV9 = DSMI (L0D9, L0A9, Zero, L0BS)
                        DEVA = DSMI (L0DA, L0AA, Zero, L0BS)
                        DEVB = DSMI (L0DB, L0AB, Zero, L0BS)
                        Return (DSMB)
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x1F                                     
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (L0DI)
                    }

                    If ((Arg2 == 0x02))
                    {
                        If ((L0DI > Zero))
                        {
                            Return (DSMI (L0D0, L0A0, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((L0DI > One))
                        {
                            Return (DSMI (L0D1, L0A1, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        If ((L0DI > 0x02))
                        {
                            Return (DSMI (L0D2, L0A2, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x05))
                    {
                        If ((L0DI > 0x03))
                        {
                            Return (DSMI (L0D3, L0A3, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x06))
                    {
                        If ((L0DI > 0x04))
                        {
                            Return (DSMI (L0D4, L0A4, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x07))
                    {
                        If ((L0DI > 0x05))
                        {
                            Return (DSMI (L0D5, L0A5, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L0DI > 0x06))
                        {
                            Return (DSMI (L0D6, L0A6, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L0DI > 0x07))
                        {
                            Return (DSMI (L0D7, L0A7, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x09))
                    {
                        If ((L0DI > 0x08))
                        {
                            Return (DSMI (L0D8, L0A8, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0A))
                    {
                        If ((L0DI > 0x09))
                        {
                            Return (DSMI (L0D9, L0A9, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((L0DI > 0x0A))
                        {
                            Return (DSMI (L0DA, L0AA, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        If ((L0DI > 0x0B))
                        {
                            Return (DSMI (L0DB, L0AB, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (LNK1)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L1EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L1EN)
                {
                    Return (CDEP (L1CL))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PCI0
                    })
                }
            }

            Name (_UID, One)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (HCID (One))
            }

            Method (_CID, 0, NotSerialized)  // _CID: Compatible ID
            {
                Return (HCID (One))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                BUF [Zero] = L1M0
                BUF [One] = L1M1
                BUF [0x02] = L1M2
                BUF [0x03] = L1M3
                BUF [0x04] = L1M4
                BUF [0x05] = L1M5
                BUF [0x06] = L1M6
                BUF [0x07] = L1M7
                BUF [0x08] = L1M8
                BUF [0x09] = L1M9
                BUF [0x0A] = L1MA
                BUF [0x0B] = L1MB
                BUF [0x0C] = L1MC
                BUF [0x0D] = L1MD
                BUF [0x0E] = L1ME
                BUF [0x0F] = L1MF
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                CreateField (DerefOf (PLDB [Zero]), 0x73, 0x04, RPOS)
                RPOS = L1DG
                BPOS = L1PL
                Return (PLDB)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                     
                    }
                If ((L1DI > Zero))
                {
                    Local1 = IICB (L1A0, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > One))
                {
                    Local1 = IICB (L1A1, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x02))
                {
                    Local1 = IICB (L1A2, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x03))
                {
                    Local1 = IICB (L1A3, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x04))
                {
                    Local1 = IICB (L1A4, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x05))
                {
                    Local1 = IICB (L1A5, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x06))
                {
                    Local1 = IICB (L1A6, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x07))
                {
                    Local1 = IICB (L1A7, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x08))
                {
                    Local1 = IICB (L1A8, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x09))
                {
                    Local1 = IICB (L1A9, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x0A))
                {
                    Local1 = IICB (L1AA, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x0B))
                {
                    Local1 = IICB (L1AB, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11,
                    /* 0008 */  0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5,
                    /* 0010 */  0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0050 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                         
                })
                PAR [Zero] = L1DV
                PAR [One] = L1CV
                PAR [0x18] = CDIV
                PAR [0x1C] = L1LU
                PAR [0x1D] = L1NL
                PAR [0x4E] = L1EE
                PAR [0x4F] = L1VC
                PAR [0x52] = L1FS
                PAR [0x53] = L1LE
                PAR [0x54] = CDEG (L1DG)
                CreateDWordField (PAR, 0x56, DAT)
                DAT = L1CK
                PAR [0x5A] = L1CL
                PAR [0x5F] = L1PP
                PAR [0x60] = L1VR
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (BUF, Buffer (0x10){})
                        BUF [Zero] = L1M0
                        BUF [One] = L1M1
                        BUF [0x02] = L1M2
                        BUF [0x03] = L1M3
                        BUF [0x04] = L1M4
                        BUF [0x05] = L1M5
                        BUF [0x06] = L1M6
                        BUF [0x07] = L1M7
                        BUF [0x08] = L1M8
                        BUF [0x09] = L1M9
                        BUF [0x0A] = L1MA
                        BUF [0x0B] = L1MB
                        BUF [0x0C] = L1MC
                        BUF [0x0D] = L1MD
                        BUF [0x0E] = L1ME
                        BUF [0x0F] = L1MF
                        Return (ToString (BUF, Ones))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        I2CC = L1DI
                        DEV0 = DSMI (L1D0, L1A0, Zero, L1BS)
                        DEV1 = DSMI (L1D1, L1A1, Zero, L1BS)
                        DEV2 = DSMI (L1D2, L1A2, Zero, L1BS)
                        DEV3 = DSMI (L1D3, L1A3, Zero, L1BS)
                        DEV4 = DSMI (L1D4, L1A4, Zero, L1BS)
                        DEV5 = DSMI (L1D5, L1A5, Zero, L1BS)
                        DEV6 = DSMI (L1D6, L1A6, Zero, L1BS)
                        DEV7 = DSMI (L1D7, L1A7, Zero, L1BS)
                        DEV8 = DSMI (L1D8, L1A8, Zero, L1BS)
                        DEV9 = DSMI (L1D9, L1A9, Zero, L1BS)
                        DEVA = DSMI (L1DA, L1AA, Zero, L1BS)
                        DEVB = DSMI (L1DB, L1AB, Zero, L1BS)
                        Return (DSMB)
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x1F                                     
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (L1DI)
                    }

                    If ((Arg2 == 0x02))
                    {
                        If ((L1DI > Zero))
                        {
                            Return (DSMI (L1D0, L1A0, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((L1DI > One))
                        {
                            Return (DSMI (L1D1, L1A1, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        If ((L1DI > 0x02))
                        {
                            Return (DSMI (L1D2, L1A2, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x05))
                    {
                        If ((L1DI > 0x03))
                        {
                            Return (DSMI (L1D3, L1A3, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x06))
                    {
                        If ((L1DI > 0x04))
                        {
                            Return (DSMI (L1D4, L1A4, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x07))
                    {
                        If ((L1DI > 0x05))
                        {
                            Return (DSMI (L1D5, L1A5, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L1DI > 0x06))
                        {
                            Return (DSMI (L1D6, L1A6, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L1DI > 0x07))
                        {
                            Return (DSMI (L1D7, L1A7, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x09))
                    {
                        If ((L1DI > 0x08))
                        {
                            Return (DSMI (L1D8, L1A8, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0A))
                    {
                        If ((L1DI > 0x09))
                        {
                            Return (DSMI (L1D9, L1A9, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((L1DI > 0x0A))
                        {
                            Return (DSMI (L1DA, L1AA, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        If ((L1DI > 0x0B))
                        {
                            Return (DSMI (L1DB, L1AB, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (LNK2)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L2EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L2EN)
                {
                    Return (CDEP (L2CL))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PCI0
                    })
                }
            }

            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (HCID (0x02))
            }

            Method (_CID, 0, NotSerialized)  // _CID: Compatible ID
            {
                Return (HCID (0x02))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                BUF [Zero] = L2M0
                BUF [One] = L2M1
                BUF [0x02] = L2M2
                BUF [0x03] = L2M3
                BUF [0x04] = L2M4
                BUF [0x05] = L2M5
                BUF [0x06] = L2M6
                BUF [0x07] = L2M7
                BUF [0x08] = L2M8
                BUF [0x09] = L2M9
                BUF [0x0A] = L2MA
                BUF [0x0B] = L2MB
                BUF [0x0C] = L2MC
                BUF [0x0D] = L2MD
                BUF [0x0E] = L2ME
                BUF [0x0F] = L2MF
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                CreateField (DerefOf (PLDB [Zero]), 0x73, 0x04, RPOS)
                BPOS = L2PL
                RPOS = L2DG
                Return (PLDB)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                     
                    }
                If ((L2DI > Zero))
                {
                    Local1 = IICB (L2A0, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > One))
                {
                    Local1 = IICB (L2A1, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x02))
                {
                    Local1 = IICB (L2A2, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x03))
                {
                    Local1 = IICB (L2A3, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x04))
                {
                    Local1 = IICB (L2A4, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x05))
                {
                    Local1 = IICB (L2A5, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x06))
                {
                    Local1 = IICB (L2A6, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x07))
                {
                    Local1 = IICB (L2A7, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x08))
                {
                    Local1 = IICB (L2A8, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x09))
                {
                    Local1 = IICB (L2A9, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x0A))
                {
                    Local1 = IICB (L2AA, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x0B))
                {
                    Local1 = IICB (L2AB, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11,
                    /* 0008 */  0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5,
                    /* 0010 */  0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0050 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                         
                })
                PAR [Zero] = L2DV
                PAR [One] = L2CV
                PAR [0x18] = CDIV
                PAR [0x1C] = L2LU
                PAR [0x1D] = L2NL
                PAR [0x4E] = L2EE
                PAR [0x4F] = L2VC
                PAR [0x52] = L2FS
                PAR [0x53] = L2LE
                PAR [0x54] = CDEG (L2DG)
                CreateDWordField (PAR, 0x56, DAT)
                DAT = L2CK
                PAR [0x5A] = L2CL
                PAR [0x5F] = L2PP
                PAR [0x60] = L2VR
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (BUF, Buffer (0x10){})
                        BUF [Zero] = L2M0
                        BUF [One] = L2M1
                        BUF [0x02] = L2M2
                        BUF [0x03] = L2M3
                        BUF [0x04] = L2M4
                        BUF [0x05] = L2M5
                        BUF [0x06] = L2M6
                        BUF [0x07] = L2M7
                        BUF [0x08] = L2M8
                        BUF [0x09] = L2M9
                        BUF [0x0A] = L2MA
                        BUF [0x0B] = L2MB
                        BUF [0x0C] = L2MC
                        BUF [0x0D] = L2MD
                        BUF [0x0E] = L2ME
                        BUF [0x0F] = L2MF
                        Return (ToString (BUF, Ones))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        I2CC = L2DI
                        DEV0 = DSMI (L2D0, L2A0, Zero, L2BS)
                        DEV1 = DSMI (L2D1, L2A1, Zero, L2BS)
                        DEV2 = DSMI (L2D2, L2A2, Zero, L2BS)
                        DEV3 = DSMI (L2D3, L2A3, Zero, L2BS)
                        DEV4 = DSMI (L2D4, L2A4, Zero, L2BS)
                        DEV5 = DSMI (L2D5, L2A5, Zero, L2BS)
                        DEV6 = DSMI (L2D6, L2A6, Zero, L2BS)
                        DEV7 = DSMI (L2D7, L2A7, Zero, L2BS)
                        DEV8 = DSMI (L2D8, L2A8, Zero, L2BS)
                        DEV9 = DSMI (L2D9, L2A9, Zero, L2BS)
                        DEVA = DSMI (L2DA, L2AA, Zero, L2BS)
                        DEVB = DSMI (L2DB, L2AB, Zero, L2BS)
                        Return (DSMB)
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x1F                                     
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (L2DI)
                    }

                    If ((Arg2 == 0x02))
                    {
                        If ((L2DI > Zero))
                        {
                            Return (DSMI (L2D0, L2A0, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((L2DI > One))
                        {
                            Return (DSMI (L2D1, L2A1, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        If ((L2DI > 0x02))
                        {
                            Return (DSMI (L2D2, L2A2, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x05))
                    {
                        If ((L2DI > 0x03))
                        {
                            Return (DSMI (L2D3, L2A3, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x06))
                    {
                        If ((L2DI > 0x04))
                        {
                            Return (DSMI (L2D4, L2A4, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x07))
                    {
                        If ((L2DI > 0x05))
                        {
                            Return (DSMI (L2D5, L2A5, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L2DI > 0x06))
                        {
                            Return (DSMI (L2D6, L2A6, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L2DI > 0x07))
                        {
                            Return (DSMI (L2D7, L2A7, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x09))
                    {
                        If ((L2DI > 0x08))
                        {
                            Return (DSMI (L2D8, L2A8, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0A))
                    {
                        If ((L2DI > 0x09))
                        {
                            Return (DSMI (L2D9, L2A9, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((L2DI > 0x0A))
                        {
                            Return (DSMI (L2DA, L2AA, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        If ((L2DI > 0x0B))
                        {
                            Return (DSMI (L2DB, L2AB, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (LNK3)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L3EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L3EN)
                {
                    Return (CDEP (L3CL))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PCI0
                    })
                }
            }

            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (HCID (0x03))
            }

            Method (_CID, 0, NotSerialized)  // _CID: Compatible ID
            {
                Return (HCID (0x03))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                BUF [Zero] = L3M0
                BUF [One] = L3M1
                BUF [0x02] = L3M2
                BUF [0x03] = L3M3
                BUF [0x04] = L3M4
                BUF [0x05] = L3M5
                BUF [0x06] = L3M6
                BUF [0x07] = L3M7
                BUF [0x08] = L3M8
                BUF [0x09] = L3M9
                BUF [0x0A] = L3MA
                BUF [0x0B] = L3MB
                BUF [0x0C] = L3MC
                BUF [0x0D] = L3MD
                BUF [0x0E] = L3ME
                BUF [0x0F] = L3MF
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                CreateField (DerefOf (PLDB [Zero]), 0x73, 0x04, RPOS)
                BPOS = L3PL
                RPOS = L3DG
                Return (PLDB)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                     
                    }
                If ((L3DI > Zero))
                {
                    Local1 = IICB (L3A0, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > One))
                {
                    Local1 = IICB (L3A1, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x02))
                {
                    Local1 = IICB (L3A2, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x03))
                {
                    Local1 = IICB (L3A3, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x04))
                {
                    Local1 = IICB (L3A4, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x05))
                {
                    Local1 = IICB (L3A5, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x06))
                {
                    Local1 = IICB (L3A6, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x07))
                {
                    Local1 = IICB (L3A7, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x08))
                {
                    Local1 = IICB (L3A8, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x09))
                {
                    Local1 = IICB (L3A9, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x0A))
                {
                    Local1 = IICB (L3AA, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x0B))
                {
                    Local1 = IICB (L3AB, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11,
                    /* 0008 */  0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5,
                    /* 0010 */  0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0050 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                         
                })
                PAR [Zero] = L3DV
                PAR [One] = L3CV
                PAR [0x18] = CDIV
                PAR [0x1C] = L3LU
                PAR [0x1D] = L3NL
                PAR [0x4E] = L3EE
                PAR [0x4F] = L3VC
                PAR [0x52] = L3FS
                PAR [0x53] = L3LE
                PAR [0x54] = CDEG (L3DG)
                CreateDWordField (PAR, 0x56, DAT)
                DAT = L3CK
                PAR [0x5A] = L3CL
                PAR [0x5F] = L3PP
                PAR [0x60] = L3VR
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (BUF, Buffer (0x10){})
                        BUF [Zero] = L3M0
                        BUF [One] = L3M1
                        BUF [0x02] = L3M2
                        BUF [0x03] = L3M3
                        BUF [0x04] = L3M4
                        BUF [0x05] = L3M5
                        BUF [0x06] = L3M6
                        BUF [0x07] = L3M7
                        BUF [0x08] = L3M8
                        BUF [0x09] = L3M9
                        BUF [0x0A] = L3MA
                        BUF [0x0B] = L3MB
                        BUF [0x0C] = L3MC
                        BUF [0x0D] = L3MD
                        BUF [0x0E] = L3ME
                        BUF [0x0F] = L3MF
                        Return (ToString (BUF, Ones))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        I2CC = L3DI
                        DEV0 = DSMI (L3D0, L3A0, Zero, L3BS)
                        DEV1 = DSMI (L3D1, L3A1, Zero, L3BS)
                        DEV2 = DSMI (L3D2, L3A2, Zero, L3BS)
                        DEV3 = DSMI (L3D3, L3A3, Zero, L3BS)
                        DEV4 = DSMI (L3D4, L3A4, Zero, L3BS)
                        DEV5 = DSMI (L3D5, L3A5, Zero, L3BS)
                        DEV6 = DSMI (L3D6, L3A6, Zero, L3BS)
                        DEV7 = DSMI (L3D7, L3A7, Zero, L3BS)
                        DEV8 = DSMI (L3D8, L3A8, Zero, L3BS)
                        DEV9 = DSMI (L3D9, L3A9, Zero, L3BS)
                        DEVA = DSMI (L3DA, L3AA, Zero, L3BS)
                        DEVB = DSMI (L3DB, L3AB, Zero, L3BS)
                        Return (DSMB)
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x1F                                     
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (L3DI)
                    }

                    If ((Arg2 == 0x02))
                    {
                        If ((L3DI > Zero))
                        {
                            Return (DSMI (L3D0, L3A0, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((L3DI > One))
                        {
                            Return (DSMI (L3D1, L3A1, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        If ((L3DI > 0x02))
                        {
                            Return (DSMI (L3D2, L3A2, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x05))
                    {
                        If ((L3DI > 0x03))
                        {
                            Return (DSMI (L3D3, L3A3, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x06))
                    {
                        If ((L3DI > 0x04))
                        {
                            Return (DSMI (L3D4, L3A4, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x07))
                    {
                        If ((L3DI > 0x05))
                        {
                            Return (DSMI (L3D5, L3A5, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L3DI > 0x06))
                        {
                            Return (DSMI (L3D6, L3A6, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L3DI > 0x07))
                        {
                            Return (DSMI (L3D7, L3A7, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x09))
                    {
                        If ((L3DI > 0x08))
                        {
                            Return (DSMI (L3D8, L3A8, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0A))
                    {
                        If ((L3DI > 0x09))
                        {
                            Return (DSMI (L3D9, L3A9, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((L3DI > 0x0A))
                        {
                            Return (DSMI (L3DA, L3AA, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        If ((L3DI > 0x0B))
                        {
                            Return (DSMI (L3DB, L3AB, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    Scope (_SB.PCI0.I2C2)
    {
        Device (CAM0)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3471")  // _HID: Hardware ID
            Name (_CID, "INT3471")  // _CID: Compatible ID
            Name (_DDN, "IMX135-CRDG2")  // _DDN: DOS Device Name
            Name (_UID, "0")  // _UID: Unique ID
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PMIC
            })
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                Buffer (0x14)
                {
                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0008 */  0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                }
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0010, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x000E, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x0050, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x0051, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x0052, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x0053, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (SBUF)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SCSS == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x03,
                    /* 0050 */  0x09, 0x00, 0x02, 0x01, 0x00, 0x01, 0x00, 0x36,
                    /* 0058 */  0x6E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                         
                })
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    Return ("13P2BAD33")
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If ((Arg2 == One))
                    {
                        Return (0x06)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (0x02001000)
                    }

                    If ((Arg2 == 0x03))
                    {
                        Return (0x02000E01)
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (0x02005002)
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (0x02005103)
                    }

                    If ((Arg2 == 0x06))
                    {
                        Return (0x02005204)
                    }

                    If ((Arg2 == 0x07))
                    {
                        Return (0x02005305)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    Scope (_SB.PCI0.I2C4)
    {
        Device (CAM1)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3474")  // _HID: Hardware ID
            Name (_CID, "INT3474")  // _CID: Compatible ID
            Name (_DDN, "OV2740-CRDG2")  // _DDN: DOS Device Name
            Name (_UID, "0")  // _UID: Unique ID
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                ^^I2C2.PMIC
            })
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                Buffer (0x14)
                {
                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0008 */  0x61, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                }
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0036, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (SBUF)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SCSS == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00,
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0050 */  0x09, 0x00, 0x02, 0x01, 0x00, 0x01, 0x00, 0xF8,
                    /* 0058 */  0x24, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                         
                })
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    Return ("4SF259T2")
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (0x04003600)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    Scope (_SB.PCI0.I2C2)
    {
        Device (PMIC)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3472")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG2")  // _DDN: DOS Device Name
            Name (_UID, "0")  // _UID: Unique ID
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                Buffer (0x14)
                {
                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0008 */  0x21, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                }
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x004C, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (SBUF)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SCSS == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x02, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (0x07)
                    }

                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (0x02004C0B)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    Scope (_SB)
    {
        Device (WCT0)
        {
            Name (_HID, EisaId ("IWC0001"))  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((WIFC == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (PCMD, 1, NotSerialized)
            {
                If (^^PCI0.LPCB.H_EC.ECAV)
                {
                    ^^PCI0.LPCB.H_EC.IWCW = Arg0
                    ^^PCI0.LPCB.H_EC.ECMD (0xE1)
                }
            }

            Method (ITPW, 1, NotSerialized)
            {
                If (^^PCI0.LPCB.H_EC.ECAV)
                {
                    ^^PCI0.LPCB.H_EC.IWCW = Arg0
                    ^^PCI0.LPCB.H_EC.ECMD (0xE1)
                }
            }

            Method (ITPR, 0, NotSerialized)
            {
                If (^^PCI0.LPCB.H_EC.ECAV)
                {
                    Return (^^PCI0.LPCB.H_EC.IWCR)
                }

                Return (Package (0x00){})
            }

            Method (PSRC, 0, NotSerialized)
            {
                Return (^^PCI0.LPCB.H_EC.ECRD (RefOf (^^PCI0.LPCB.H_EC.PWRT)))
            }
        }
    }

    Method (HIDW, 4, Serialized)
    {
        If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
        {
            If ((Arg2 == Zero))
            {
                If ((Arg1 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03                                           
                    })
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((Arg2 == One))
            {
                Switch (ToInteger (DerefOf (Arg3 [Zero])))
                {
                    Case (Zero)
                    {
                    }
                    Case (One)
                    {
                        If (CondRefOf (\_SB.SLPB))
                        {
                            Notify (\_SB.SLPB, 0x80)
                            P8XH (Zero, 0x5D)
                        }
                    }
                    Case (0x02)
                    {
                    }
                    Case (0x03)
                    {
                    }

                }

                Return (Zero)
            }
            Else
            {
                Return (Zero)
            }
        }
        Else
        {
            Return (Buffer (One)
            {
                 0x00                                           
            })
        }
    }

    Method (HIWC, 1, NotSerialized)
    {
        If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
        {
            Return (One)
        }

        Return (Zero)
    }

    Scope (_SB.PCI0.RP01)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTR1
            LMSL = PML1
            LNSL = PNL1
            OBFZ = OBF1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP02)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTR2
            LMSL = PML2
            LNSL = PNL2
            OBFZ = OBF2
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP03)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTR3
            LMSL = PML3
            LNSL = PNL3
            OBFZ = OBF3
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP04)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTR4
            LMSL = PML4
            LNSL = PNL4
            OBFZ = OBF4
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP05)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTR5
            LMSL = PML5
            LNSL = PNL5
            OBFZ = OBF5
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP06)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTR6
            LMSL = PML6
            LNSL = PNL6
            OBFZ = OBF6
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP07)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTR7
            LMSL = PML7
            LNSL = PNL7
            OBFZ = OBF7
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP08)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTR8
            LMSL = PML8
            LNSL = PNL8
            OBFZ = OBF8
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP09)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTR9
            LMSL = PML9
            LNSL = PNL9
            OBFZ = OBF9
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP10)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRA
            LMSL = PMLA
            LNSL = PNLA
            OBFZ = OBFA
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP11)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRB
            LMSL = PMLB
            LNSL = PNLB
            OBFZ = OBFB
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP12)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRC
            LMSL = PMLC
            LNSL = PNLC
            OBFZ = OBFC
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP13)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRD
            LMSL = PMLD
            LNSL = PNLD
            OBFZ = OBFD
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP14)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRE
            LMSL = PMLE
            LNSL = PNLE
            OBFZ = OBFE
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP15)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRF
            LMSL = PMLF
            LNSL = PNLF
            OBFZ = OBFF
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP16)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRG
            LMSL = PMLG
            LNSL = PNLG
            OBFZ = OBFG
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP17)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRH
            LMSL = PMLH
            LNSL = PNLH
            OBFZ = OBFH
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP18)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRI
            LMSL = PMLI
            LNSL = PNLI
            OBFZ = OBFI
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP19)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRJ
            LMSL = PMLJ
            LNSL = PNLJ
            OBFZ = OBFJ
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP20)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRK
            LMSL = PMLK
            LNSL = PNLK
            OBFZ = OBFK
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP21)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRL
            LMSL = PMLL
            LNSL = PNLL
            OBFZ = OBFL
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP22)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRM
            LMSL = PMLM
            LNSL = PNLM
            OBFZ = OBFM
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP23)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRN
            LMSL = PMLN
            LNSL = PNLN
            OBFZ = OBFN
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP24)
    {
        Name (LTRZ, Zero)
        Name (OBFZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRO
            LMSL = PMLO
            LNSL = PNLO
            OBFZ = OBFO
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.LPCB)
    {
        Device (FWHD)
        {
            Name (_HID, EisaId ("INT0800"))  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Memory32Fixed (ReadOnly,
                    0xFF000000,         // Address Base
                    0x01000000,         // Address Length
                    )
            })
        }

        Device (HPET)
        {
            Name (_HID, EisaId ("PNP0103"))  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    _Y37)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HPTE)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (HPTE)
                {
                    CreateDWordField (BUF0, \_SB.PCI0.LPCB.HPET._Y37._BAS, HPT0)  // _BAS: Base Address
                    HPT0 = HPTB
                }

                Return (BUF0)
            }
        }

        Device (IPIC)
        {
            Name (_HID, EisaId ("PNP0000"))  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0020,             // Range Minimum
                    0x0020,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0024,             // Range Minimum
                    0x0024,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0028,             // Range Minimum
                    0x0028,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x002C,             // Range Minimum
                    0x002C,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0030,             // Range Minimum
                    0x0030,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0034,             // Range Minimum
                    0x0034,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0038,             // Range Minimum
                    0x0038,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x003C,             // Range Minimum
                    0x003C,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A0,             // Range Minimum
                    0x00A0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A4,             // Range Minimum
                    0x00A4,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A8,             // Range Minimum
                    0x00A8,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00AC,             // Range Minimum
                    0x00AC,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B0,             // Range Minimum
                    0x00B0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B4,             // Range Minimum
                    0x00B4,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B8,             // Range Minimum
                    0x00B8,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00BC,             // Range Minimum
                    0x00BC,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x04D0,             // Range Minimum
                    0x04D0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IRQNoFlags ()
                    {2}
            })
        }

        Device (MATH)
        {
            Name (_HID, EisaId ("PNP0C04"))  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x00F0,             // Range Minimum
                    0x00F0,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IRQNoFlags ()
                    {13}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PCHV () == SPTH))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (LDRC)
        {
            Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x002E,             // Range Minimum
                    0x002E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x004E,             // Range Minimum
                    0x004E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0061,             // Range Minimum
                    0x0061,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0063,             // Range Minimum
                    0x0063,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0065,             // Range Minimum
                    0x0065,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0067,             // Range Minimum
                    0x0067,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0080,             // Range Minimum
                    0x0080,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0092,             // Range Minimum
                    0x0092,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x00B2,             // Range Minimum
                    0x00B2,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0680,             // Range Minimum
                    0x0680,             // Range Maximum
                    0x01,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0xFFFF,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0xFFFF,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0xFFFF,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x1800,             // Range Minimum
                    0x1800,             // Range Maximum
                    0x01,               // Alignment
                    0xFF,               // Length
                    )
                IO (Decode16,
                    0x164E,             // Range Minimum
                    0x164E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
            })
        }

        Device (LDR2)
        {
            Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
            Name (_UID, "LPC_DEV")  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0800,             // Range Minimum
                    0x0800,             // Range Maximum
                    0x01,               // Alignment
                    0x80,               // Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PCHV () == SPTH))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (RTC)
        {
            Name (_HID, EisaId ("PNP0B00"))  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                IRQNoFlags ()
                    {8}
            })
        }

        Device (TIMR)
        {
            Name (_HID, EisaId ("PNP0100"))  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0040,             // Range Minimum
                    0x0040,             // Range Maximum
                    0x01,               // Alignment
                    0x04,               // Length
                    )
                IO (Decode16,
                    0x0050,             // Range Minimum
                    0x0050,             // Range Maximum
                    0x10,               // Alignment
                    0x04,               // Length
                    )
                IRQNoFlags ()
                    {0}
            })
        }

        Device (CWDT)
        {
            Name (_HID, EisaId ("INT3F0D"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C02"))  // _CID: Compatible ID
            Name (BUF0, ResourceTemplate ()
            {
                IO (Decode16,
                    0x1854,             // Range Minimum
                    0x1854,             // Range Maximum
                    0x04,               // Alignment
                    0x04,               // Length
                    )
            })
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Return (BUF0)
            }
        }
    }

    Device (ALSD)
    {
        Name (_HID, "ACPI0008")  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((ALSE == 0x02))
            {
                Return (0x0B)
            }

            Return (Zero)
        }

        Method (_ALI, 0, NotSerialized)  // _ALI: Ambient Light Illuminance
        {
            Return (((LHIH << 0x08) | LLOW))
        }

        Name (_ALR, Package (0x05)  // _ALR: Ambient Light Response
        {
            Package (0x02)
            {
                0x46, 
                Zero
            }, 

            Package (0x02)
            {
                0x49, 
                0x0A
            }, 

            Package (0x02)
            {
                0x55, 
                0x50
            }, 

            Package (0x02)
            {
                0x64, 
                0x012C
            }, 

            Package (0x02)
            {
                0x96, 
                0x03E8
            }
        })
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C"))  // _HID: Hardware ID
            Name (PBST, One)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Scope (_SB.PCI0.LPCB)
    {
        Device (H_EC)
        {
            Name (_HID, EisaId ("PNP0C09"))  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ^^^GFX0.CLID = 0x03
                Return (Zero)
            }

            Name (ECAV, Zero)
            Name (B1ST, 0x32)
            Name (B2ST, 0x36)
            Name (CFAN, 0x03)
            Name (CMDR, 0x3A)
            Name (DOCK, 0x30)
            Name (PLMX, One)
            Name (PECH, 0x83)
            Name (PECL, 0x82)
            Name (PENV, 0x44)
            Name (PINV, 0x43)
            Name (PPSH, 0x42)
            Name (PPSL, 0x41)
            Name (PSTP, 0x45)
            Name (RPWR, 0x03)
            Name (LSTE, 0x03)
            Name (VPWR, 0x30)
            Name (WTMS, 0xC4)
            Name (AWT2, 0xC5)
            Name (AWT1, 0xC6)
            Name (AWT0, 0xC7)
            Name (DLED, 0x78)
            Name (SPT2, 0xC8)
            Name (PB10, 0x78)
            Name (IWCW, 0xA0)
            Name (IWCR, 0xA0)
            Name (PVOL, 0xE8)
            Name (PWRT, 0x79)
            Method (ECRD, 1, Serialized)
            {
                Local0 = DerefOf (Arg0)
                Switch (ToInteger (Local0))
                {
                    Case (0x32)
                    {
                        Return (Zero)
                    }
                    Case (0x36)
                    {
                        Return (Zero)
                    }
                    Case (0x03)
                    {
                        Return (Zero)
                    }
                    Case (0x3A)
                    {
                        Return (Zero)
                    }
                    Case (0x30)
                    {
                        Return (Zero)
                    }
                    Case (One)
                    {
                        Return (Zero)
                    }
                    Case (0x83)
                    {
                        Return (Zero)
                    }
                    Case (0x82)
                    {
                        Return (Zero)
                    }
                    Case (0x44)
                    {
                        Return (Zero)
                    }
                    Case (0x43)
                    {
                        Return (Zero)
                    }
                    Case (0x42)
                    {
                        Return (Zero)
                    }
                    Case (0x41)
                    {
                        Return (Zero)
                    }
                    Case (0x45)
                    {
                        Return (Zero)
                    }
                    Case (0x03)
                    {
                        Return (Zero)
                    }
                    Case (0x03)
                    {
                        Return (Zero)
                    }
                    Case (0x30)
                    {
                        Return (Zero)
                    }
                    Case (0xC4)
                    {
                        Return (Zero)
                    }
                    Case (0xC5)
                    {
                        Return (Zero)
                    }
                    Case (0xC6)
                    {
                        Return (Zero)
                    }
                    Case (0xC7)
                    {
                        Return (Zero)
                    }
                    Case (0x78)
                    {
                        Return (Zero)
                    }
                    Case (0xC8)
                    {
                        Return (Zero)
                    }
                    Case (0x78)
                    {
                        Return (Zero)
                    }
                    Case (0xA0)
                    {
                        Return (Zero)
                    }
                    Case (0xA0)
                    {
                        Return (Zero)
                    }
                    Case (0xE8)
                    {
                        Return (Zero)
                    }
                    Case (0x79)
                    {
                        Return (Zero)
                    }

                }

                Return (Zero)
            }

            Method (ECWT, 2, Serialized)
            {
                Local0 = DerefOf (Arg0)
                Switch (ToInteger (Local0))
                {
                    Case (0x32)
                    {
                    }
                    Case (0x36)
                    {
                    }
                    Case (0x03)
                    {
                    }
                    Case (0x3A)
                    {
                    }
                    Case (0x30)
                    {
                    }
                    Case (One)
                    {
                    }
                    Case (0x83)
                    {
                    }
                    Case (0x82)
                    {
                    }
                    Case (0x44)
                    {
                    }
                    Case (0x43)
                    {
                    }
                    Case (0x42)
                    {
                    }
                    Case (0x41)
                    {
                    }
                    Case (0x45)
                    {
                    }
                    Case (0x03)
                    {
                    }
                    Case (0x03)
                    {
                    }
                    Case (0x30)
                    {
                    }
                    Case (0xC4)
                    {
                    }
                    Case (0xC5)
                    {
                    }
                    Case (0xC6)
                    {
                    }
                    Case (0xC7)
                    {
                    }
                    Case (0x78)
                    {
                    }
                    Case (0xC8)
                    {
                    }
                    Case (0x78)
                    {
                    }
                    Case (0xA0)
                    {
                    }
                    Case (0xA0)
                    {
                    }
                    Case (0xE8)
                    {
                    }
                    Case (0x79)
                    {
                    }

                }
            }

            Method (ECMD, 1, Serialized)
            {
            }

            Method (ECNT, 1, Serialized)
            {
            }

            Device (BAT0)
            {
                Name (_HID, EisaId ("PNP0C0A"))  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (Zero)
                }
            }

            Device (BAT1)
            {
                Name (_HID, EisaId ("PNP0C0A"))  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (Zero)
                }

                Method (_BST, 0, NotSerialized)  // _BST: Battery Status
                {
                    Return (BST1 ())
                }
            }

            Device (BAT2)
            {
                Name (_HID, EisaId ("PNP0C0A"))  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (Zero)
                }

                Method (_BST, 0, NotSerialized)  // _BST: Battery Status
                {
                    Return (BST2 ())
                }
            }
        }
    }

    Scope (\)
    {
        Field (GNVS, AnyAcc, Lock, Preserve)
        {
            Offset (0x20), 
            B1SC,   8, 
            Offset (0x23), 
            B1SS,   8
        }
    }

    Scope (\)
    {
        Field (GNVS, AnyAcc, Lock, Preserve)
        {
            Offset (0x21), 
            B2SC,   8, 
            Offset (0x24), 
            B2SS,   8
        }
    }

    Device (_SB.PCI0.DOCK)
    {
        Name (_HID, "ABCD0000")  // _HID: Hardware ID
        Name (_CID, EisaId ("PNP0C15"))  // _CID: Compatible ID
        Name (_UID, 0x02)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Return (Zero)
        }
    }

    Scope (_SB)
    {
        Method (PWPR, 0, Serialized)
        {
        }

        Method (PWRR, 0, Serialized)
        {
        }

        Device (LID0)
        {
            Name (_HID, EisaId ("PNP0C0D"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }

            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Return (One)
            }
        }
    }

    Scope (_SB.PCI0.LPCB.H_EC)
    {
        Method (BST1, 0, NotSerialized)
        {
            Name (PKG1, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Return (PKG1)
        }

        Method (BST2, 0, NotSerialized)
        {
            Name (PKG2, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Return (PKG2)
        }
    }

    OperationRegion (ABNV, SystemMemory, 0xFFFF0000, 0xAA55)
    Field (ABNV, AnyAcc, Lock, Preserve)
    {
        ABMA,   64, 
        ABMS,   8, 
        ABIA,   16, 
        ABIL,   16, 
        ABRA,   32, 
        ABRS,   16, 
        ABFW,   8, 
        ABTS,   16
    }

    Device (_SB.TPM)
    {
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y38)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y39)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y3A)
        })
        Name (CRSI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y3B)
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y38._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y38._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB
                LTFB = 0x1000
                CreateDWordField (CRST, \_SB.TPM._Y39._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y39._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC
                LTFC = 0x1000
                Return (CRST)
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y3A._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y3A._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD)
                }
                ElseIf ((TTPF == One))
                {
                    CreateDWordField (CRSI, \_SB.TPM._Y3B._BAS, MTFD)  // _BAS: Base Address
                    CreateDWordField (CRSI, \_SB.TPM._Y3B._LEN, LTFD)  // _LEN: Length
                    MTFD = 0xFED40000
                    LTFD = 0x5000
                    Return (CRSI)
                }
                ElseIf ((TTPF == Zero))
                {
                    CreateDWordField (CRST, \_SB.TPM._Y38._BAS, MTFF)  // _BAS: Base Address
                    MTFF = FTPM
                    Return (CRST)
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRSI)
            }

            Return (CRSI)
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            Offset (0x04), 
            LCST,   32, 
            Offset (0x40), 
            CREQ,   32, 
            CSTS,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                           
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                           
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV)
                }

            }

            Return (Buffer (One)
            {
                 0x00                                           
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, One)
        Field (TSMI, ByteAcc, NoLock, Preserve)
        {
            SMI,    8
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                     
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST
                        SRSP = Zero
                        SMI = TMF1
                        Return (SRSP)
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST
                        Return (PPI1)
                    }
                    Case (0x04)
                    {
                        Return (TRST)
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST
                        PPI2 [One] = RCNT
                        PPI2 [0x02] = ERRO
                        Return (PPI2)
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN)
                        }

                        TMF1 = OFST
                        SRSP = Zero
                        SMI = TMF1
                        Return (SRSP)
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST
                        SRSP = Zero
                        SMI = TMF1
                        Return (SRSP)
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d")))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                           
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST
                        SRSP = Zero
                        SMI = TMF1
                        Return (SRSP)
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8")))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4")))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                           
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST
                }

            }
        }
    }

    OperationRegion (AGNV, SystemMemory, 0x7A98C018, 0x00020000)
    Scope (_SB)
    {
        Name (RTKT, Buffer (0x10)
        {
            /* 0000 */  0x5F, 0x52, 0x54, 0x58, 0x4D, 0x41, 0x43, 0x5F,
            /* 0008 */  0x23, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x23 
        })
        Device (ARFB)
        {
            Name (_HID, "10251229")  // _HID: Hardware ID
            Name (_UID, "Acer RF Button")  // _UID: Unique ID
        }
    }

    Scope (_SB)
    {
        Device (WMID)
        {
            Name (_HID, "PNP0C14")  // _HID: Hardware ID
            Name (_UID, "APGe")  // _UID: Unique ID
            Name (_WDG, Buffer (0xF0)
            {
                /* 0000 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,
                /* 0008 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,
                /* 0010 */  0x4D, 0x4F, 0x01, 0x00, 0x5E, 0xA1, 0x6A, 0x67,
                /* 0018 */  0x47, 0x6A, 0x9F, 0x4D, 0xA2, 0xCC, 0x1E, 0x6D,
                /* 0020 */  0x18, 0xD1, 0x40, 0x26, 0xBC, 0x00, 0x01, 0x08,
                /* 0028 */  0xF6, 0x7E, 0xD7, 0xA9, 0xE0, 0x55, 0x06, 0x47,
                /* 0030 */  0xB1, 0x39, 0x96, 0xAC, 0xE1, 0x3F, 0x22, 0x69,
                /* 0038 */  0xBD, 0x00, 0x01, 0x08, 0xEA, 0x69, 0xEF, 0x61,
                /* 0040 */  0x5C, 0x86, 0xC3, 0x4B, 0xA5, 0x02, 0xA0, 0xDE,
                /* 0048 */  0xBA, 0x0C, 0xB5, 0x31, 0x41, 0x41, 0x01, 0x02,
                /* 0050 */  0x0E, 0x13, 0x98, 0x9F, 0x48, 0x3B, 0xB3, 0x40,
                /* 0058 */  0x94, 0x02, 0xDE, 0x8E, 0x16, 0x0F, 0x30, 0xCC,
                /* 0060 */  0x41, 0x42, 0x01, 0x02, 0x43, 0x34, 0xB5, 0x4B,
                /* 0068 */  0x8A, 0x48, 0x0D, 0x43, 0xA2, 0x5C, 0x87, 0x46,
                /* 0070 */  0x60, 0xE2, 0x3B, 0xDD, 0x41, 0x43, 0x01, 0x02,
                /* 0078 */  0xC5, 0x2E, 0x77, 0x79, 0xB1, 0x04, 0xFD, 0x4B,
                /* 0080 */  0x84, 0x3C, 0x61, 0xE7, 0xF7, 0x7B, 0x6C, 0xC9,
                /* 0088 */  0x42, 0x45, 0x01, 0x02, 0xC6, 0x2E, 0x77, 0x79,
                /* 0090 */  0xB1, 0x04, 0xFD, 0x4B, 0x84, 0x3C, 0x61, 0xE7,
                /* 0098 */  0xF7, 0x7B, 0x6C, 0xC9, 0x42, 0x46, 0x01, 0x02,
                /* 00A0 */  0xA7, 0xC3, 0xB0, 0x77, 0x1D, 0xF7, 0xCB, 0x43,
                /* 00A8 */  0xB7, 0x49, 0x91, 0xCB, 0xFF, 0x5D, 0xDC, 0x43,
                /* 00B0 */  0x42, 0x47, 0x01, 0x02, 0xE7, 0xDF, 0x4D, 0x7A,
                /* 00B8 */  0x5D, 0x5B, 0xB4, 0x40, 0x85, 0x95, 0x44, 0x08,
                /* 00C0 */  0xE0, 0xCC, 0x7F, 0x56, 0x42, 0x48, 0x01, 0x02,
                /* 00C8 */  0x66, 0x56, 0x5F, 0xF7, 0xB3, 0xB8, 0x5D, 0x4A,
                /* 00D0 */  0xA9, 0x1C, 0x74, 0x88, 0xF6, 0x2E, 0x56, 0x37,
                /* 00D8 */  0x42, 0x4B, 0x01, 0x02, 0xDA, 0xBB, 0x1D, 0xFE,
                /* 00E0 */  0x14, 0x30, 0x56, 0x48, 0x87, 0x0C, 0x5B, 0x3A,
                /* 00E8 */  0x74, 0x4B, 0xF3, 0x41, 0x42, 0x4C, 0x01, 0x02 
            })
            Method (PHSR, 0, NotSerialized)
            {
                Acquire (WMUX, 0xFFFF)
                ACSM = SNUM
                Release (WMUX)
            }

            Mutex (WMUX, 0x00)
            OperationRegion (SMI0, SystemIO, WSMI, One)
            Field (SMI0, ByteAcc, NoLock, Preserve)
            {
                ACSM,   8
            }

            Field (AGNV, AnyAcc, Lock, Preserve)
            {
                WMNM,   64, 
                WFUN,   32, 
                WBUF,   57248
            }

            Name (FNGP, Buffer (0x04){})
            Name (BF02, Buffer (0x02){})
            Name (BF04, Buffer (0x04){})
            Name (BF08, Buffer (0x08){})
            Name (BF0C, Buffer (0x0C){})
            Name (BF10, Buffer (0x10){})
            Name (BF14, Buffer (0x14){})
            Name (BF30, Buffer (0x30){})
            Name (BF48, Buffer (0x48){})
            Name (BF58, Buffer (0x58){})
            Name (BF84, Buffer (0x84){})
            Field (AGNV, AnyAcc, Lock, Preserve)
            {
                Offset (0x1C00), 
                LMST,   8, 
                EPMS,   8, 
                DCST,   8, 
                APUS,   8, 
                RFDS,   8, 
                ODST,   8, 
                HSST,   8
            }

            Field (AGNV, AnyAcc, Lock, Preserve)
            {
                Offset (0x1D00), 
                HKMP,   4096
            }

            Name (WQMO, Buffer (0x2CE8)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,
                /* 0008 */  0xD8, 0x2C, 0x00, 0x00, 0x62, 0x48, 0x01, 0x00,
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,
                /* 0018 */  0x98, 0xC3, 0x9C, 0x01, 0x01, 0x08, 0x09, 0x42,
                /* 0020 */  0xD8, 0x06, 0x84, 0x48, 0x08, 0x81, 0x44, 0x40,
                /* 0028 */  0x28, 0x32, 0x0B, 0x83, 0x21, 0x04, 0x8E, 0x0B,
                /* 0030 */  0x21, 0x07, 0x10, 0x12, 0x07, 0x85, 0x12, 0x02,
                /* 0038 */  0xA1, 0xFE, 0x04, 0xF2, 0x2B, 0x00, 0xA1, 0x43,
                /* 0040 */  0x01, 0x32, 0x05, 0x18, 0x14, 0xE0, 0x14, 0x41,
                /* 0048 */  0x04, 0xBD, 0x0A, 0xB0, 0x29, 0xC0, 0xA4, 0x00,
                /* 0050 */  0x8B, 0x02, 0xB4, 0x0B, 0xB0, 0x2C, 0x40, 0xB7,
                /* 0058 */  0x00, 0xE9, 0xB0, 0x44, 0x24, 0x38, 0x4A, 0x0C,
                /* 0060 */  0x38, 0x4A, 0x27, 0xB6, 0x70, 0xC3, 0x06, 0x2F,
                /* 0068 */  0x14, 0x45, 0x33, 0x88, 0x92, 0xA0, 0x72, 0x01,
                /* 0070 */  0xBE, 0x11, 0x04, 0x5E, 0xAE, 0x00, 0xC9, 0x13,
                /* 0078 */  0x90, 0x66, 0x01, 0x86, 0x05, 0x58, 0x17, 0x20,
                /* 0080 */  0x7B, 0x08, 0x54, 0xEA, 0x10, 0x50, 0x72, 0x86,
                /* 0088 */  0x80, 0x1A, 0x40, 0xAB, 0x13, 0x10, 0x7E, 0xA5,
                /* 0090 */  0x53, 0x42, 0x12, 0x84, 0x33, 0x56, 0xF1, 0xF8,
                /* 0098 */  0x9A, 0x45, 0xD3, 0x73, 0x92, 0x73, 0x0C, 0x39,
                /* 00A0 */  0x1E, 0x17, 0x7A, 0x10, 0x3C, 0xAC, 0x04, 0x10,
                /* 00A8 */  0x16, 0x60, 0xC8, 0x8A, 0x07, 0x83, 0xD2, 0x30,
                /* 00B0 */  0x16, 0xEA, 0x62, 0xD4, 0xA8, 0x91, 0xB2, 0x01,
                /* 00B8 */  0x19, 0xA2, 0x24, 0x38, 0xD4, 0xA8, 0x2D, 0x51,
                /* 00C0 */  0x80, 0xF9, 0x71, 0x68, 0x76, 0x6D, 0x8F, 0x85,
                /* 00C8 */  0x40, 0x32, 0x69, 0x43, 0x41, 0x49, 0x81, 0xD0,
                /* 00D0 */  0xD8, 0xCE, 0xD4, 0x33, 0x8A, 0x78, 0xA4, 0x86,
                /* 00D8 */  0x49, 0xE0, 0x51, 0x44, 0x36, 0x1A, 0x87, 0xC6,
                /* 00E0 */  0x0E, 0xC3, 0xC3, 0x0C, 0x76, 0x10, 0x87, 0x71,
                /* 00E8 */  0xCC, 0x91, 0x13, 0x78, 0x42, 0x47, 0x7A, 0xE4,
                /* 00F0 */  0x85, 0xCD, 0x53, 0xA8, 0x31, 0x9A, 0x83, 0x22,
                /* 00F8 */  0x73, 0x78, 0x14, 0xC0, 0x8E, 0x29, 0xEC, 0xD1,
                /* 0100 */  0xC6, 0x3E, 0x5F, 0x0B, 0x1F, 0xAC, 0x30, 0x8E,
                /* 0108 */  0xE0, 0xB8, 0x12, 0xFC, 0xFF, 0x4F, 0xFC, 0x50,
                /* 0110 */  0x7A, 0x84, 0x93, 0xA0, 0x29, 0x52, 0x90, 0xA3,
                /* 0118 */  0xC6, 0xC8, 0xC2, 0x91, 0xD6, 0x59, 0x91, 0xB9,
                /* 0120 */  0x1B, 0xD8, 0x40, 0x95, 0x09, 0xD0, 0x25, 0x40,
                /* 0128 */  0x9B, 0x00, 0x67, 0xC3, 0x20, 0x03, 0x3A, 0x12,
                /* 0130 */  0x8C, 0x0C, 0x08, 0x79, 0x3E, 0x18, 0x68, 0x88,
                /* 0138 */  0x26, 0xB0, 0x7B, 0x4C, 0x79, 0x83, 0xD0, 0x40,
                /* 0140 */  0x22, 0x34, 0x26, 0xC0, 0xDA, 0x2C, 0x64, 0x0B,
                /* 0148 */  0x87, 0x4C, 0x2C, 0x56, 0x94, 0x18, 0x07, 0x75,
                /* 0150 */  0x68, 0x35, 0xA2, 0x08, 0xE9, 0x24, 0x5E, 0x0D,
                /* 0158 */  0x22, 0x44, 0x89, 0x19, 0x32, 0x62, 0xB0, 0x20,
                /* 0160 */  0xCF, 0x11, 0x31, 0x3C, 0x46, 0xC3, 0x45, 0x6A,
                /* 0168 */  0x7F, 0x10, 0x44, 0xDE, 0x6B, 0x42, 0x07, 0x02,
                /* 0170 */  0x47, 0x1A, 0x0D, 0xEA, 0xB4, 0xE0, 0x43, 0x81,
                /* 0178 */  0x67, 0xF7, 0x90, 0xE0, 0xC1, 0x9D, 0x74, 0x90,
                /* 0180 */  0x13, 0x3D, 0xB8, 0x67, 0x88, 0xA7, 0x01, 0x8F,
                /* 0188 */  0x9B, 0x5D, 0x13, 0x7C, 0xB8, 0xF0, 0xF1, 0x00,
                /* 0190 */  0xEF, 0x1A, 0x50, 0xF7, 0x82, 0xA7, 0x02, 0x36,
                /* 0198 */  0xCB, 0x70, 0x98, 0x21, 0x7A, 0xB0, 0xE1, 0x4E,
                /* 01A0 */  0xE0, 0x10, 0x19, 0xA0, 0x87, 0xF4, 0x40, 0x80,
                /* 01A8 */  0x9D, 0xDB, 0xC9, 0x1C, 0xFB, 0x0B, 0x45, 0xB3,
                /* 01B0 */  0x57, 0x09, 0x42, 0x70, 0x3C, 0xBE, 0x45, 0xB0,
                /* 01B8 */  0x09, 0x27, 0xB0, 0xFC, 0x41, 0xA0, 0x46, 0x66,
                /* 01C0 */  0x68, 0x0F, 0xF5, 0xB4, 0xDE, 0x06, 0x7C, 0x0E,
                /* 01C8 */  0x30, 0x81, 0xC5, 0x42, 0x48, 0x01, 0x84, 0xC6,
                /* 01D0 */  0x03, 0x7E, 0xC5, 0x27, 0x0F, 0x72, 0x65, 0xF0,
                /* 01D8 */  0x7C, 0x7D, 0x88, 0xD0, 0xD1, 0x42, 0x46, 0x56,
                /* 01E0 */  0xE1, 0xF1, 0xD0, 0xF3, 0x82, 0x2F, 0x09, 0x98,
                /* 01E8 */  0x1B, 0x83, 0x87, 0xEE, 0x21, 0x3D, 0x1F, 0x58,
                /* 01F0 */  0x12, 0xAC, 0xFE, 0xFF, 0xA7, 0x00, 0x8B, 0x1A,
                /* 01F8 */  0x39, 0x3D, 0x55, 0xF0, 0x03, 0x05, 0x83, 0x0D,
                /* 0200 */  0x1A, 0xD6, 0x83, 0x39, 0x27, 0x7F, 0x5A, 0x3C,
                /* 0208 */  0x36, 0xF8, 0x80, 0x78, 0xEF, 0xB3, 0x26, 0x23,
                /* 0210 */  0x38, 0x59, 0x03, 0xFA, 0xF0, 0x80, 0x3B, 0x55,
                /* 0218 */  0x80, 0x17, 0xE6, 0xB0, 0xF8, 0xBD, 0x02, 0xF6,
                /* 0220 */  0x61, 0xC1, 0xA3, 0xE4, 0xA3, 0xF1, 0x10, 0xCE,
                /* 0228 */  0xE2, 0x69, 0xC0, 0x30, 0x46, 0x7F, 0x0A, 0x80,
                /* 0230 */  0x7D, 0xC3, 0xF0, 0x58, 0x7C, 0xD2, 0xF1, 0x51,
                /* 0238 */  0x07, 0x1C, 0x83, 0xE3, 0x77, 0x18, 0xDC, 0x51,
                /* 0240 */  0x07, 0x78, 0xCC, 0xF5, 0x51, 0x07, 0x6C, 0xE7,
                /* 0248 */  0x03, 0x76, 0xCC, 0x81, 0x25, 0xE1, 0x98, 0x84,
                /* 0250 */  0x0A, 0x0D, 0x45, 0xFF, 0xFF, 0x70, 0x3C, 0xF0,
                /* 0258 */  0xE0, 0xA9, 0xBC, 0xC1, 0x82, 0x02, 0xE2, 0x38,
                /* 0260 */  0xDE, 0x0E, 0xDE, 0x93, 0x60, 0x9C, 0x93, 0x00,
                /* 0268 */  0x3E, 0x1E, 0x0D, 0xD8, 0xA5, 0xE3, 0x39, 0x09,
                /* 0270 */  0xEE, 0xFF, 0xFF, 0x9C, 0x04, 0xD6, 0xF3, 0xC0,
                /* 0278 */  0x29, 0x9D, 0xCD, 0x2B, 0x52, 0x84, 0x93, 0x78,
                /* 0280 */  0x43, 0x0A, 0xFD, 0x7E, 0xF4, 0xA2, 0xF4, 0xA4,
                /* 0288 */  0xE4, 0x89, 0x3D, 0x27, 0x19, 0x2B, 0x48, 0x28,
                /* 0290 */  0x2B, 0xBC, 0x21, 0x69, 0x0E, 0x51, 0xA3, 0x84,
                /* 0298 */  0x78, 0x5E, 0xF2, 0x75, 0xC1, 0x48, 0x46, 0x3E,
                /* 02A0 */  0x95, 0xD7, 0x24, 0x63, 0x3D, 0x27, 0x01, 0x0C,
                /* 02A8 */  0xFC, 0xFF, 0x9F, 0x93, 0x80, 0xEF, 0xA9, 0x02,
                /* 02B0 */  0xEE, 0x39, 0x09, 0x70, 0x32, 0x38, 0x76, 0xC2,
                /* 02B8 */  0x04, 0x56, 0xE7, 0x24, 0xE0, 0x12, 0xD5, 0xC4,
                /* 02C0 */  0x19, 0x07, 0x23, 0x6B, 0xDD, 0xF4, 0x98, 0x03,
                /* 02C8 */  0x8E, 0xFF, 0xFF, 0xE9, 0x12, 0xB0, 0x88, 0xF1,
                /* 02D0 */  0xBC, 0x61, 0xD1, 0x80, 0x1A, 0xC1, 0xF3, 0x03,
                /* 02D8 */  0xEC, 0xD3, 0x25, 0xFC, 0x1B, 0xA5, 0x2F, 0x39,
                /* 02E0 */  0x9E, 0x54, 0x90, 0x43, 0x79, 0xBD, 0x79, 0x72,
                /* 02E8 */  0x08, 0xF3, 0x9A, 0xF3, 0x60, 0xE9, 0xA1, 0x3D,
                /* 02F0 */  0xE4, 0x04, 0x39, 0x82, 0xA7, 0x4B, 0x23, 0x3D,
                /* 02F8 */  0x57, 0x1A, 0xC5, 0x20, 0x67, 0x16, 0x35, 0x5A,
                /* 0300 */  0x14, 0xE3, 0x05, 0x89, 0x16, 0xF1, 0x08, 0x1E,
                /* 0308 */  0x73, 0x58, 0xAC, 0x03, 0x81, 0x3E, 0x52, 0x3E,
                /* 0310 */  0xE6, 0x00, 0x6E, 0xFE, 0xFF, 0xC7, 0x1C, 0xC0,
                /* 0318 */  0xC1, 0x69, 0x0E, 0x1C, 0xA7, 0x05, 0x3E, 0x2A,
                /* 0320 */  0x7E, 0x65, 0x60, 0x67, 0x12, 0x60, 0x12, 0xE5,
                /* 0328 */  0xE9, 0xA1, 0x71, 0x5A, 0xE3, 0x73, 0x40, 0x36,
                /* 0330 */  0x4E, 0x42, 0x74, 0x10, 0x56, 0x42, 0xA5, 0x13,
                /* 0338 */  0x8B, 0x31, 0xDF, 0x1A, 0xE2, 0x3E, 0x1B, 0x78,
                /* 0340 */  0x3E, 0x98, 0xF4, 0x07, 0x05, 0x9D, 0x7F, 0x0C,
                /* 0348 */  0xEE, 0xDC, 0x24, 0xCA, 0x3D, 0x20, 0x0A, 0xEF,
                /* 0350 */  0xA4, 0xC7, 0x20, 0x0A, 0x62, 0x40, 0xC7, 0x80,
                /* 0358 */  0x90, 0x95, 0x83, 0x00, 0xFA, 0x3A, 0xE1, 0x23,
                /* 0360 */  0x83, 0xCF, 0x19, 0x51, 0xCE, 0xC8, 0x07, 0x8C,
                /* 0368 */  0xC7, 0x05, 0x36, 0x1C, 0x1F, 0x04, 0xF8, 0x01,
                /* 0370 */  0xC5, 0x37, 0x03, 0x63, 0x5B, 0xCD, 0x71, 0x07,
                /* 0378 */  0x05, 0x66, 0xF8, 0x17, 0x18, 0x13, 0xF8, 0x9E,
                /* 0380 */  0xF1, 0xB6, 0x03, 0x96, 0x33, 0xC6, 0x63, 0x89,
                /* 0388 */  0xF5, 0xE1, 0xA2, 0xFE, 0xFF, 0x87, 0x01, 0x78,
                /* 0390 */  0x40, 0x9E, 0xBE, 0x4F, 0x34, 0x8F, 0x00, 0x6C,
                /* 0398 */  0x0C, 0x0F, 0x35, 0x46, 0x33, 0x3A, 0x8F, 0x3F,
                /* 03A0 */  0x57, 0xD4, 0xFD, 0xD1, 0x73, 0x35, 0x88, 0xE7,
                /* 03A8 */  0xEA, 0x30, 0x10, 0x72, 0x32, 0x57, 0xD4, 0xED,
                /* 03B0 */  0xC5, 0x23, 0xB2, 0xCF, 0xA9, 0x92, 0xC1, 0x72,
                /* 03B8 */  0x82, 0x28, 0xAF, 0x1A, 0xB0, 0x0E, 0x02, 0x11,
                /* 03C0 */  0xD9, 0x3C, 0x7C, 0x57, 0xC2, 0xCF, 0x96, 0x0F,
                /* 03C8 */  0xC6, 0x57, 0x09, 0xF8, 0xC3, 0xE5, 0xA7, 0x92,
                /* 03D0 */  0x77, 0x93, 0x04, 0x16, 0x38, 0x5D, 0x90, 0xC3,
                /* 03D8 */  0x63, 0x04, 0xAD, 0x47, 0x16, 0xEE, 0x52, 0x74,
                /* 03E0 */  0x5C, 0xFC, 0x76, 0xE0, 0x1B, 0x0F, 0xBB, 0xD3,
                /* 03E8 */  0xE0, 0x2E, 0x62, 0x18, 0x58, 0x8F, 0x94, 0xC3,
                /* 03F0 */  0x1A, 0x2D, 0xEC, 0x01, 0xBF, 0x71, 0xF8, 0xB8,
                /* 03F8 */  0xE2, 0x99, 0x19, 0x23, 0xAC, 0xEF, 0x29, 0xE0,
                /* 0400 */  0xB8, 0x93, 0xC1, 0x0F, 0x70, 0x05, 0x02, 0xD1,
                /* 0408 */  0xFF, 0xFF, 0x0A, 0x84, 0x3F, 0x6B, 0xB0, 0x2B,
                /* 0410 */  0x99, 0x41, 0x5E, 0x94, 0x7C, 0xAE, 0x31, 0x7A,
                /* 0418 */  0xA0, 0xF7, 0x0D, 0xFC, 0x4D, 0x08, 0xF6, 0x0D,
                /* 0420 */  0x04, 0xCE, 0x50, 0x7C, 0x03, 0x01, 0x0E, 0xC7,
                /* 0428 */  0x08, 0xDC, 0x0D, 0x04, 0x58, 0xDF, 0x21, 0xD8,
                /* 0430 */  0x0D, 0x04, 0x58, 0x9E, 0x5E, 0x70, 0x37, 0x10,
                /* 0438 */  0xE0, 0xF4, 0xFF, 0xBF, 0x81, 0x80, 0xEB, 0xFE,
                /* 0440 */  0xC2, 0x6E, 0x20, 0xC0, 0x7C, 0xD4, 0xBE, 0x81,
                /* 0448 */  0x00, 0x96, 0xCE, 0x1A, 0xEC, 0x06, 0x02, 0xFE,
                /* 0450 */  0xA0, 0x3E, 0xC6, 0xC3, 0x82, 0x0C, 0x5D, 0xE2,
                /* 0458 */  0x16, 0x4E, 0x61, 0x7C, 0x4A, 0x04, 0x2E, 0xFF,
                /* 0460 */  0xFF, 0x53, 0x22, 0xF0, 0x3B, 0x50, 0xF8, 0x04,
                /* 0468 */  0x00, 0xB6, 0xCB, 0x28, 0x1B, 0xFA, 0xBB, 0x81,
                /* 0470 */  0x2F, 0x8A, 0xE0, 0x3C, 0x29, 0xC2, 0x1F, 0xD6,
                /* 0478 */  0x1B, 0x41, 0x88, 0xC7, 0xC4, 0x57, 0x6A, 0xCF,
                /* 0480 */  0xEC, 0xAD, 0xE2, 0x0D, 0x31, 0xC8, 0xE3, 0xE1,
                /* 0488 */  0xC9, 0x45, 0x7A, 0x52, 0x34, 0x52, 0x98, 0x27,
                /* 0490 */  0x45, 0x23, 0x86, 0xF1, 0x49, 0xD1, 0x07, 0x45,
                /* 0498 */  0xC3, 0xBD, 0x5E, 0x7B, 0x20, 0x91, 0xC2, 0xC7,
                /* 04A0 */  0xF6, 0x55, 0x23, 0xC2, 0x93, 0x22, 0x0B, 0x75,
                /* 04A8 */  0x52, 0x04, 0xF4, 0xFD, 0xFF, 0x4F, 0x8A, 0xC0,
                /* 04B0 */  0xF3, 0x2C, 0x0C, 0x8E, 0xFB, 0x32, 0x9F, 0xC1,
                /* 04B8 */  0xB9, 0xC4, 0xF6, 0x00, 0x1F, 0x14, 0x81, 0x49,
                /* 04C0 */  0x84, 0x15, 0x6A, 0x98, 0x4E, 0xF4, 0x98, 0xD1,
                /* 04C8 */  0xB5, 0x8A, 0x73, 0x58, 0xF9, 0xFB, 0x40, 0xA7,
                /* 04D0 */  0x2D, 0x76, 0x5C, 0x38, 0xC1, 0xD7, 0xA0, 0x53,
                /* 04D8 */  0x32, 0x8E, 0x47, 0xED, 0xE1, 0x7B, 0x44, 0x56,
                /* 04E0 */  0x0A, 0xA9, 0x8B, 0x15, 0xD7, 0x08, 0x23, 0x85,
                /* 04E8 */  0xCF, 0x03, 0x9D, 0x8E, 0xB8, 0x26, 0x18, 0xC1,
                /* 04F0 */  0x19, 0xC4, 0xC7, 0x12, 0x27, 0x81, 0x90, 0x91,
                /* 04F8 */  0x93, 0x00, 0x6A, 0x74, 0xBE, 0xAD, 0xE0, 0xC7,
                /* 0500 */  0x17, 0xE8, 0x91, 0x21, 0xC1, 0x89, 0xBD, 0x5A,
                /* 0508 */  0x81, 0xF7, 0xA6, 0x0D, 0xAE, 0x20, 0x93, 0x42,
                /* 0510 */  0x6B, 0xB9, 0xBD, 0x93, 0x41, 0xF9, 0x28, 0x11,
                /* 0518 */  0xFA, 0xFF, 0xFF, 0x16, 0x82, 0x19, 0x14, 0x78,
                /* 0520 */  0xCF, 0x79, 0x7C, 0x50, 0xE0, 0x39, 0xA1, 0x79,
                /* 0528 */  0x50, 0x38, 0x25, 0x17, 0x01, 0xDF, 0x5A, 0xC8,
                /* 0530 */  0x25, 0xC5, 0x47, 0x0A, 0x8F, 0x09, 0xCC, 0x17,
                /* 0538 */  0x27, 0x3E, 0x26, 0xF0, 0xA4, 0x18, 0x13, 0xFA,
                /* 0540 */  0xEE, 0xC3, 0x6E, 0x14, 0xEC, 0x58, 0xF1, 0x10,
                /* 0548 */  0xE5, 0x29, 0x81, 0x17, 0xC9, 0x53, 0x02, 0x57,
                /* 0550 */  0xA8, 0x29, 0xF9, 0x58, 0x41, 0x67, 0xCD, 0x6F,
                /* 0558 */  0x06, 0x7C, 0x52, 0x9C, 0x60, 0x02, 0x08, 0xDD,
                /* 0560 */  0x65, 0x3C, 0x26, 0x78, 0xD7, 0x7E, 0x78, 0x57,
                /* 0568 */  0x2C, 0x0F, 0x0D, 0xD6, 0xFF, 0x7F, 0x0E, 0x1E,
                /* 0570 */  0x1A, 0xB8, 0x6E, 0x7B, 0xC0, 0xE2, 0xF5, 0xE0,
                /* 0578 */  0x0B, 0x08, 0x8F, 0x7C, 0x82, 0xA0, 0x20, 0x3E,
                /* 0580 */  0x20, 0x38, 0xCE, 0xE1, 0xD1, 0x17, 0x10, 0xF4,
                /* 0588 */  0xC1, 0xC1, 0x03, 0x7A, 0x6A, 0xF2, 0x90, 0x4E,
                /* 0590 */  0xE5, 0xDD, 0xC2, 0x77, 0x1B, 0x76, 0xDD, 0x03,
                /* 0598 */  0xF7, 0x75, 0xCE, 0xD7, 0x3D, 0xF0, 0x9C, 0x97,
                /* 05A0 */  0x7C, 0xDD, 0x03, 0x2E, 0x72, 0x0E, 0xB0, 0x80,
                /* 05A8 */  0x88, 0xFF, 0xFF, 0x75, 0x0F, 0xD6, 0xD5, 0xC9,
                /* 05B0 */  0x07, 0x58, 0xF0, 0x9F, 0x2E, 0xD8, 0x69, 0x0F,
                /* 05B8 */  0x7C, 0x04, 0xD3, 0xBE, 0x2B, 0x74, 0x31, 0xC2,
                /* 05C0 */  0xA5, 0x5A, 0xBA, 0x0E, 0x81, 0xEC, 0x62, 0x04,
                /* 05C8 */  0x33, 0x05, 0xA4, 0x2E, 0x46, 0x5C, 0x3F, 0x8C,
                /* 05D0 */  0xF4, 0x5D, 0x8C, 0x50, 0x8A, 0x2E, 0x46, 0x14,
                /* 05D8 */  0xC4, 0x17, 0x23, 0x80, 0x11, 0xFF, 0xFF, 0x8B,
                /* 05E0 */  0x11, 0xE0, 0x27, 0xC4, 0x98, 0xD0, 0x3A, 0x80,
                /* 05E8 */  0xC9, 0xB9, 0xE0, 0x84, 0x1E, 0x8C, 0x80, 0x6D,
                /* 05F0 */  0xA6, 0x83, 0x11, 0x1A, 0xD8, 0x27, 0x03, 0x3E,
                /* 05F8 */  0x28, 0x76, 0x2F, 0x02, 0xF3, 0x2D, 0xC6, 0xF7,
                /* 0600 */  0x22, 0xE0, 0xFD, 0xFF, 0xBF, 0x17, 0xC1, 0x91,
                /* 0608 */  0xF7, 0x32, 0xD0, 0xFD, 0x83, 0x0B, 0x82, 0xD1,
                /* 0610 */  0x01, 0xC2, 0x20, 0x9E, 0x93, 0xEF, 0x45, 0x80,
                /* 0618 */  0x9B, 0x28, 0xE3, 0x42, 0xDF, 0xD1, 0xE0, 0x8C,
                /* 0620 */  0x0A, 0xDC, 0xC7, 0x02, 0x8F, 0x0A, 0x7C, 0xC7,
                /* 0628 */  0x34, 0xFC, 0x5D, 0xC8, 0x87, 0x34, 0xCC, 0x41,
                /* 0630 */  0x83, 0x1D, 0x03, 0x3C, 0x28, 0x70, 0xDD, 0xD2,
                /* 0638 */  0x70, 0x63, 0x83, 0xE7, 0xE1, 0xFA, 0x00, 0x9A,
                /* 0640 */  0xFF, 0xFF, 0xF5, 0x81, 0x5F, 0xB3, 0x80, 0xF7,
                /* 0648 */  0x29, 0x1D, 0xF8, 0x5E, 0xB3, 0xC0, 0x7C, 0x4A,
                /* 0650 */  0xC7, 0x5C, 0xB3, 0xC0, 0x2B, 0xCB, 0xC9, 0x70,
                /* 0658 */  0xD8, 0xE9, 0xD9, 0x72, 0xD7, 0x4D, 0x61, 0x7C,
                /* 0660 */  0x48, 0x07, 0xEE, 0xFF, 0xFF, 0x43, 0x3A, 0xF8,
                /* 0668 */  0xCE, 0x4D, 0x3E, 0x00, 0x80, 0xE3, 0xF8, 0x70,
                /* 0670 */  0x06, 0xA7, 0x10, 0xED, 0x6D, 0xDF, 0x33, 0x7F,
                /* 0678 */  0x7D, 0xF2, 0x90, 0xA2, 0x04, 0x8C, 0x17, 0x23,
                /* 0680 */  0x6E, 0x48, 0x9F, 0xAB, 0x7D, 0x71, 0x36, 0x50,
                /* 0688 */  0xBC, 0xC3, 0x0A, 0x1B, 0xE7, 0x3D, 0xC0, 0xC7,
                /* 0690 */  0xE7, 0xF7, 0x00, 0x1F, 0x0E, 0x0C, 0x74, 0xA6,
                /* 0698 */  0x2F, 0x01, 0xB0, 0x8F, 0xEA, 0xB0, 0xBD, 0x4D,
                /* 06A0 */  0x4E, 0x10, 0x11, 0x02, 0xBF, 0x59, 0x9C, 0x53,
                /* 06A8 */  0x6B, 0x57, 0x74, 0x8D, 0xF0, 0x10, 0x9F, 0xE0,
                /* 06B0 */  0x5E, 0x4B, 0x1E, 0xD5, 0x3D, 0x94, 0xC7, 0xA7,
                /* 06B8 */  0xA8, 0x51, 0x9E, 0x37, 0xC2, 0x1C, 0x43, 0xC0,
                /* 06C0 */  0x28, 0x47, 0x11, 0x2D, 0x6A, 0xE0, 0xB7, 0x84,
                /* 06C8 */  0xD8, 0x06, 0x0D, 0xF4, 0xA6, 0xEE, 0x11, 0x3C,
                /* 06D0 */  0xAA, 0xB3, 0x68, 0x47, 0x75, 0x40, 0xEB, 0xFF,
                /* 06D8 */  0xFF, 0xA8, 0x0E, 0x7C, 0xEE, 0x33, 0x3E, 0xC2,
                /* 06E0 */  0xC0, 0x3F, 0x07, 0x3C, 0x29, 0xE0, 0x2E, 0x4F,
                /* 06E8 */  0xBE, 0x33, 0x60, 0x08, 0x7C, 0x5A, 0x07, 0x1E,
                /* 06F0 */  0xF1, 0x7C, 0x9C, 0x07, 0x58, 0x6C, 0x0A, 0x5D,
                /* 06F8 */  0x22, 0xF9, 0x59, 0xC6, 0x21, 0x97, 0xAB, 0x4B,
                /* 0700 */  0x24, 0x9F, 0x12, 0xBB, 0x20, 0x18, 0xFE, 0x10,
                /* 0708 */  0x82, 0x78, 0x58, 0x6C, 0x0A, 0x3E, 0x23, 0x98,
                /* 0710 */  0xC0, 0x71, 0x4E, 0x5C, 0x74, 0xF0, 0x0E, 0x42,
                /* 0718 */  0xA1, 0x28, 0xF7, 0x5B, 0x94, 0x78, 0x18, 0xC1,
                /* 0720 */  0x19, 0xC4, 0x63, 0x71, 0x20, 0x08, 0xFD, 0x54,
                /* 0728 */  0x28, 0x24, 0x39, 0x9F, 0x78, 0x52, 0x27, 0x8B,
                /* 0730 */  0x9D, 0x0B, 0x6E, 0x76, 0x3E, 0x88, 0x24, 0x78,
                /* 0738 */  0xEA, 0x79, 0x95, 0x04, 0xEF, 0x9D, 0xE3, 0x4D,
                /* 0740 */  0x09, 0x2C, 0x37, 0x8D, 0x57, 0x8E, 0xF7, 0x4D,
                /* 0748 */  0x36, 0x30, 0xDC, 0xFF, 0xFF, 0x2C, 0xE9, 0x81,
                /* 0750 */  0xE1, 0x8F, 0x02, 0xC7, 0x75, 0x52, 0xE0, 0x1D,
                /* 0758 */  0xB3, 0x27, 0x05, 0xB6, 0xD3, 0x1D, 0xB0, 0x08,
                /* 0760 */  0x8F, 0x4E, 0x61, 0x1C, 0x77, 0x48, 0x14, 0xC4,
                /* 0768 */  0xA7, 0x03, 0x1F, 0xDB, 0x3C, 0x5A, 0xDC, 0x4C,
                /* 0770 */  0x3C, 0xA2, 0xB7, 0x3B, 0xDC, 0xB1, 0x0D, 0xEC,
                /* 0778 */  0x23, 0xF1, 0xB1, 0x0D, 0x3C, 0xA3, 0x65, 0x87,
                /* 0780 */  0x31, 0x60, 0x22, 0xE4, 0x30, 0x06, 0xBA, 0x21,
                /* 0788 */  0xFB, 0x30, 0x86, 0xFB, 0xFF, 0x1F, 0xC6, 0x80,
                /* 0790 */  0xDF, 0x31, 0xC0, 0x87, 0x27, 0x70, 0xDC, 0xC3,
                /* 0798 */  0xF8, 0x81, 0x09, 0x0B, 0xF4, 0xEC, 0xC1, 0x71,
                /* 07A0 */  0x9E, 0x9C, 0x0C, 0xCC, 0xC1, 0xD8, 0xD5, 0x04,
                /* 07A8 */  0x7B, 0x9B, 0xF0, 0x88, 0x74, 0x7F, 0x46, 0xC9,
                /* 07B0 */  0x83, 0x50, 0xE8, 0xD7, 0x91, 0xCE, 0x2A, 0xD8,
                /* 07B8 */  0x69, 0xB0, 0x93, 0xCC, 0x21, 0xFA, 0xEA, 0xE2,
                /* 07C0 */  0x79, 0xBF, 0xD0, 0x60, 0x0F, 0x02, 0xAF, 0x48,
                /* 07C8 */  0xBE, 0x36, 0xF8, 0x1A, 0xED, 0x58, 0x03, 0xD0,
                /* 07D0 */  0x79, 0x85, 0x07, 0x82, 0x91, 0xB4, 0x73, 0x27,
                /* 07D8 */  0x4A, 0xCC, 0xB1, 0x85, 0x82, 0xF8, 0xDC, 0xE4,
                /* 07E0 */  0x23, 0x32, 0x9C, 0x73, 0x08, 0xAC, 0x63, 0x34,
                /* 07E8 */  0xB0, 0x0C, 0x33, 0x28, 0xB4, 0x1E, 0x40, 0x72,
                /* 07F0 */  0xBB, 0xC3, 0xFE, 0xFF, 0x51, 0x1A, 0x05, 0xD2,
                /* 07F8 */  0xB8, 0xD8, 0x41, 0x1A, 0x78, 0xA6, 0x3A, 0x75,
                /* 0800 */  0xA2, 0x0F, 0x77, 0x3E, 0x94, 0xB0, 0x8B, 0x34,
                /* 0808 */  0xF6, 0x10, 0x0C, 0xDE, 0xB3, 0x81, 0xEF, 0xD3,
                /* 0810 */  0xC0, 0xE2, 0x5C, 0x03, 0x2C, 0x44, 0x9F, 0x1E,
                /* 0818 */  0x50, 0x32, 0x4F, 0x0F, 0x14, 0xC4, 0x87, 0x60,
                /* 0820 */  0x7E, 0x32, 0xC0, 0x8D, 0xD2, 0x27, 0x03, 0x18,
                /* 0828 */  0x73, 0x09, 0xF2, 0xA6, 0xE6, 0xD3, 0x1E, 0x3B,
                /* 0830 */  0xDA, 0x80, 0xF7, 0xB4, 0x0D, 0xE7, 0xFF, 0x3F,
                /* 0838 */  0x5F, 0xB8, 0xB1, 0x4E, 0xDB, 0x50, 0x8E, 0x3F,
                /* 0840 */  0xF8, 0x03, 0x2E, 0xB8, 0xEF, 0x04, 0x1E, 0x1B,
                /* 0848 */  0xBC, 0xEB, 0x36, 0xF8, 0xE2, 0x8D, 0x0D, 0xCD,
                /* 0850 */  0xE2, 0x23, 0x00, 0x8C, 0x73, 0x0A, 0x76, 0x7C,
                /* 0858 */  0xE0, 0x3E, 0x0D, 0xF9, 0x7C, 0x0D, 0xF7, 0x3C,
                /* 0860 */  0x0C, 0x9C, 0xCF, 0x4C, 0xE0, 0x3B, 0x8E, 0xF8,
                /* 0868 */  0xFF, 0x7F, 0x66, 0x02, 0xDC, 0x5C, 0x7F, 0xB0,
                /* 0870 */  0x40, 0x4F, 0x47, 0x38, 0x9C, 0xB7, 0x23, 0x2C,
                /* 0878 */  0xD0, 0x73, 0x02, 0xEE, 0xCC, 0xC4, 0xE2, 0xAD,
                /* 0880 */  0x59, 0x67, 0x26, 0x7E, 0x30, 0x73, 0xA8, 0xB7,
                /* 0888 */  0x82, 0x30, 0x9F, 0x99, 0xC0, 0x75, 0x4C, 0xD4,
                /* 0890 */  0x81, 0x09, 0x25, 0x1B, 0x46, 0x41, 0xCF, 0x28,
                /* 0898 */  0xA8, 0x68, 0x67, 0x14, 0x0A, 0xE2, 0xE3, 0x80,
                /* 08A0 */  0x0F, 0x4C, 0x80, 0x8F, 0x2C, 0xE7, 0x18, 0x50,
                /* 08A8 */  0xFC, 0xFF, 0x51, 0xE2, 0x3F, 0x1A, 0xFB, 0x50,
                /* 08B0 */  0xFB, 0xBE, 0x04, 0x3C, 0xD3, 0xCC, 0x0A, 0x7D,
                /* 08B8 */  0x35, 0x01, 0xC7, 0xB4, 0xC0, 0x7A, 0x57, 0x02,
                /* 08C0 */  0x5F, 0xAE, 0x13, 0x0C, 0x7A, 0x2E, 0x3E, 0x56,
                /* 08C8 */  0xC1, 0xB8, 0xCE, 0xF9, 0x5C, 0x05, 0xE6, 0xA3,
                /* 08D0 */  0x83, 0xE7, 0x06, 0xEB, 0x5E, 0x04, 0xBE, 0x73,
                /* 08D8 */  0x15, 0xB0, 0xF8, 0xFF, 0x87, 0x39, 0xE3, 0xA2,
                /* 08E0 */  0xE4, 0x9F, 0x71, 0x29, 0x88, 0xE7, 0xE4, 0xE3,
                /* 08E8 */  0xA7, 0x95, 0x1C, 0x3F, 0x81, 0xDA, 0x01, 0xC0,
                /* 08F0 */  0xC7, 0x4F, 0xF0, 0x9C, 0xCB, 0x1F, 0xCA, 0x13,
                /* 08F8 */  0xF8, 0x20, 0xEC, 0x51, 0xE1, 0x4E, 0x19, 0xEC,
                /* 0900 */  0x64, 0x80, 0xF7, 0x39, 0x1F, 0x3A, 0x30, 0xB0,
                /* 0908 */  0x9F, 0x0D, 0x3C, 0x30, 0xF0, 0x9D, 0x91, 0x80,
                /* 0910 */  0xC7, 0x93, 0xC0, 0x67, 0x24, 0x70, 0x59, 0x39,
                /* 0918 */  0x23, 0x81, 0xF6, 0xFF, 0x7F, 0x46, 0x02, 0xAF,
                /* 0920 */  0xE0, 0x33, 0x12, 0x68, 0x0E, 0x43, 0xEC, 0x8C,
                /* 0928 */  0x04, 0xB6, 0xFB, 0x91, 0x13, 0x6D, 0x3B, 0x01,
                /* 0930 */  0x09, 0x32, 0x64, 0x49, 0x5C, 0x30, 0x85, 0xF1,
                /* 0938 */  0xE1, 0xC3, 0x67, 0x04, 0xFC, 0xA8, 0x0F, 0xFA,
                /* 0940 */  0x58, 0x0F, 0x8B, 0x1D, 0xC6, 0x0D, 0xC7, 0x0F,
                /* 0948 */  0x04, 0x1E, 0xD6, 0xB9, 0x9C, 0xC6, 0xA9, 0x9C,
                /* 0950 */  0xBD, 0xE7, 0x15, 0x92, 0x49, 0x1B, 0x1F, 0xEA,
                /* 0958 */  0xC4, 0xE5, 0x33, 0xC1, 0xE1, 0xF8, 0xFA, 0x10,
                /* 0960 */  0xF1, 0x9D, 0xDC, 0x30, 0x09, 0x7C, 0x14, 0x60,
                /* 0968 */  0x68, 0x1C, 0x1A, 0x3B, 0x0C, 0xDF, 0x11, 0x82,
                /* 0970 */  0x1D, 0xC4, 0x09, 0xFA, 0xE4, 0xCE, 0x26, 0x74,
                /* 0978 */  0xAA, 0x4F, 0xF4, 0xEF, 0x0E, 0xCF, 0xE8, 0x51,
                /* 0980 */  0x63, 0x34, 0x07, 0x45, 0x0E, 0x12, 0x1E, 0x39,
                /* 0988 */  0x38, 0xE6, 0x7B, 0x06, 0x4F, 0x44, 0x46, 0x38,
                /* 0990 */  0xE5, 0x87, 0x1D, 0xDF, 0x0C, 0x8C, 0xF2, 0xB6,
                /* 0998 */  0xCB, 0x90, 0x8C, 0x6A, 0xC4, 0xF7, 0x01, 0x8F,
                /* 09A0 */  0xF1, 0x49, 0x21, 0x52, 0xAD, 0x33, 0x23, 0xA0,
                /* 09A8 */  0xCF, 0xBC, 0xFC, 0x12, 0x7D, 0xF2, 0xEF, 0x13,
                /* 09B0 */  0xAF, 0xD1, 0x09, 0x7C, 0xBA, 0xF2, 0x68, 0xF8,
                /* 09B8 */  0xF1, 0xC0, 0x9E, 0x2F, 0x16, 0xE4, 0x98, 0xC0,
                /* 09C0 */  0xDC, 0xDF, 0x84, 0x74, 0x95, 0x78, 0xB5, 0x38,
                /* 09C8 */  0xA4, 0x77, 0x82, 0x08, 0x31, 0x7E, 0x04, 0xDA,
                /* 09D0 */  0x12, 0xF0, 0xFF, 0xC7, 0x3E, 0xB7, 0x48, 0x47,
                /* 09D8 */  0x17, 0x25, 0xC4, 0x5B, 0x4C, 0x6B, 0x43, 0x10,
                /* 09E0 */  0x4A, 0x90, 0xDE, 0xB0, 0x34, 0xAB, 0x28, 0x81,
                /* 09E8 */  0x82, 0x46, 0x0C, 0x1A, 0x28, 0x5E, 0x84, 0x30,
                /* 09F0 */  0x07, 0x10, 0x27, 0x48, 0xE0, 0xF6, 0x07, 0x41,
                /* 09F8 */  0xA2, 0x1D, 0x0A, 0x74, 0x42, 0x71, 0xA4, 0xD1,
                /* 0A00 */  0xA0, 0x4E, 0x25, 0xFC, 0xE6, 0xE3, 0xCB, 0xA5,
                /* 0A08 */  0x87, 0xF9, 0x96, 0xE4, 0xC1, 0x3D, 0x6E, 0x3D,
                /* 0A10 */  0x11, 0x78, 0xEC, 0x6C, 0xD8, 0x3E, 0x95, 0xC0,
                /* 0A18 */  0x39, 0x51, 0x05, 0x7C, 0xA3, 0xF5, 0xC1, 0x02,
                /* 0A20 */  0x1C, 0xC7, 0x12, 0xF8, 0xE3, 0xF1, 0x51, 0xC0,
                /* 0A28 */  0xF3, 0x39, 0xE1, 0xE7, 0x1C, 0x32, 0x08, 0xD4,
                /* 0A30 */  0x19, 0x87, 0x0F, 0xF3, 0x61, 0x8A, 0x9D, 0x5E,
                /* 0A38 */  0x4C, 0xE0, 0x53, 0x25, 0x1F, 0x0F, 0xF8, 0x4F,
                /* 0A40 */  0xD8, 0x8F, 0x05, 0x8F, 0x18, 0xC6, 0xF6, 0x41,
                /* 0A48 */  0xC1, 0x77, 0x18, 0x9F, 0x5A, 0xE0, 0x5B, 0xBD,
                /* 0A50 */  0x29, 0x20, 0xEF, 0x5C, 0x78, 0x82, 0x87, 0x8F,
                /* 0A58 */  0x67, 0x08, 0xEC, 0x08, 0xF8, 0x31, 0xE0, 0x09,
                /* 0A60 */  0x86, 0x8D, 0xE0, 0x25, 0xC6, 0x93, 0x38, 0x20,
                /* 0A68 */  0x9F, 0x2E, 0x8C, 0x10, 0xFE, 0xA1, 0xE2, 0x21,
                /* 0A70 */  0xC3, 0x07, 0x6F, 0xCF, 0xE1, 0x55, 0xC4, 0x04,
                /* 0A78 */  0x56, 0xF9, 0x7B, 0xD2, 0x28, 0xAD, 0xE7, 0xDC,
                /* 0A80 */  0x47, 0xFF, 0xFF, 0x04, 0x3E, 0x12, 0x58, 0xC1,
                /* 0A88 */  0x13, 0x41, 0xF8, 0xCF, 0x24, 0x81, 0xCF, 0xE6,
                /* 0A90 */  0x91, 0xE0, 0x18, 0x1E, 0x2A, 0xD8, 0x6D, 0xE5,
                /* 0A98 */  0x89, 0xC2, 0xD3, 0x75, 0xE6, 0xC7, 0x81, 0x8E,
                /* 0AA0 */  0x7C, 0x3C, 0x2D, 0x8C, 0x54, 0x1D, 0xF9, 0x50,
                /* 0AA8 */  0x3A, 0x8E, 0x7C, 0x14, 0xC4, 0x87, 0x06, 0x1F,
                /* 0AB0 */  0x9F, 0xF0, 0x83, 0xF3, 0x24, 0xF0, 0xD3, 0x7D,
                /* 0AB8 */  0xA9, 0xF1, 0xB9, 0x57, 0x57, 0x3E, 0x10, 0xDF,
                /* 0AC0 */  0x5C, 0x7C, 0x2D, 0x02, 0x53, 0xA8, 0x73, 0x1A,
                /* 0AC8 */  0x7A, 0x60, 0x9E, 0x29, 0x8C, 0x5B, 0x1A, 0x78,
                /* 0AD0 */  0x07, 0xE4, 0x7B, 0x1F, 0xB0, 0x88, 0x71, 0x06,
                /* 0AD8 */  0x41, 0x03, 0xB3, 0x81, 0x3D, 0x7F, 0x3C, 0xF0,
                /* 0AE0 */  0x1B, 0xF3, 0xCC, 0x3C, 0x7A, 0xB0, 0x5E, 0x0F,
                /* 0AE8 */  0x3C, 0x7A, 0x18, 0xFF, 0xFF, 0xDB, 0x07, 0xDC,
                /* 0AF0 */  0x8B, 0x1C, 0xB0, 0x88, 0x75, 0x91, 0x43, 0x5D,
                /* 0AF8 */  0x90, 0x3C, 0x69, 0x83, 0x78, 0x62, 0xBE, 0x6F,
                /* 0B00 */  0xDB, 0xC9, 0xD5, 0x01, 0x7D, 0x90, 0xC3, 0x4D,
                /* 0B08 */  0xD7, 0x27, 0x0C, 0x5F, 0xD1, 0xC0, 0x0F, 0xE5,
                /* 0B10 */  0x2B, 0x1A, 0x78, 0x2E, 0x3A, 0x0F, 0x41, 0x87,
                /* 0B18 */  0x47, 0xC6, 0x85, 0x16, 0x75, 0x79, 0x80, 0x32,
                /* 0B20 */  0x81, 0x30, 0x27, 0x12, 0xFC, 0x49, 0x24, 0xC2,
                /* 0B28 */  0x53, 0x91, 0x6F, 0x62, 0xEC, 0xD6, 0x07, 0x4C,
                /* 0B30 */  0xC7, 0xC6, 0x6F, 0x73, 0x60, 0xFE, 0xFF, 0xDF,
                /* 0B38 */  0xE6, 0xB0, 0x22, 0x6E, 0x73, 0xA0, 0xBB, 0x67,
                /* 0B40 */  0xF0, 0xDB, 0x1C, 0xF0, 0xBC, 0x6E, 0xF8, 0x12,
                /* 0B48 */  0x06, 0x96, 0x2B, 0x0E, 0xBF, 0x84, 0xF1, 0x2B,
                /* 0B50 */  0x98, 0x41, 0xC2, 0xC4, 0x7C, 0x73, 0x64, 0xA8,
                /* 0B58 */  0x71, 0x1E, 0xC4, 0x18, 0xD2, 0x53, 0x02, 0xF6,
                /* 0B60 */  0xE4, 0xE1, 0x7C, 0xF7, 0x1E, 0xD4, 0x50, 0x9C,
                /* 0B68 */  0xE9, 0xFA, 0x8C, 0x38, 0xBD, 0xC0, 0xC8, 0x71,
                /* 0B70 */  0x71, 0x46, 0x25, 0x80, 0x91, 0xFE, 0xE5, 0xEB,
                /* 0B78 */  0xB0, 0xC1, 0x15, 0xDF, 0x7E, 0x28, 0x88, 0xAF,
                /* 0B80 */  0x24, 0x3E, 0xEF, 0xFA, 0xDA, 0x83, 0xD3, 0x03,
                /* 0B88 */  0xA2, 0xB3, 0xE5, 0xB1, 0x1F, 0xC2, 0x83, 0x0F,
                /* 0B90 */  0xF0, 0xFE, 0xFF, 0x1F, 0x7C, 0xF8, 0x79, 0x17,
                /* 0B98 */  0xCE, 0xB4, 0x60, 0xDD, 0x7C, 0x00, 0x07, 0x47,
                /* 0BA0 */  0x00, 0x38, 0x57, 0xAE, 0x93, 0x3F, 0xB2, 0x47,
                /* 0BA8 */  0x00, 0x60, 0x73, 0xFA, 0x01, 0xC7, 0x11, 0x00,
                /* 0BB0 */  0x0C, 0xD3, 0x82, 0x75, 0x04, 0x00, 0x4E, 0x27,
                /* 0BB8 */  0x68, 0xF0, 0xDD, 0xA5, 0xFE, 0xFF, 0xEF, 0x52,
                /* 0BC0 */  0xC0, 0x6B, 0x98, 0xBE, 0x4B, 0x01, 0xE7, 0x2F,
                /* 0BC8 */  0x84, 0xEF, 0x23, 0x3C, 0xF2, 0x35, 0x82, 0x82,
                /* 0BD0 */  0xF8, 0x8A, 0xE0, 0xBB, 0x14, 0xF0, 0x3C, 0x3E,
                /* 0BD8 */  0x83, 0xEB, 0x82, 0x04, 0x7C, 0x24, 0x5C, 0x90,
                /* 0BE0 */  0x40, 0xF7, 0xFF, 0x3F, 0xF9, 0xF3, 0x0B, 0x12,
                /* 0BE8 */  0xF0, 0x44, 0xF5, 0xF1, 0x19, 0x5C, 0xF7, 0x23,
                /* 0BF0 */  0x70, 0x6A, 0xFD, 0x51, 0xE8, 0x7E, 0xC4, 0x39,
                /* 0BF8 */  0xAC, 0x74, 0xD1, 0xF2, 0x38, 0x08, 0x72, 0xC1,
                /* 0C00 */  0x3D, 0xCE, 0xB7, 0x9C, 0x77, 0x00, 0xE3, 0x78,
                /* 0C08 */  0x2E, 0x3E, 0x4F, 0x18, 0x3F, 0x41, 0x65, 0x90,
                /* 0C10 */  0xBA, 0x21, 0x71, 0x4D, 0x30, 0xD2, 0x76, 0xD0,
                /* 0C18 */  0x44, 0xA9, 0x39, 0x68, 0x52, 0x10, 0x1F, 0x34,
                /* 0C20 */  0x01, 0x9F, 0xFF, 0xFF, 0xEB, 0x11, 0xF0, 0x0D,
                /* 0C28 */  0x33, 0x7E, 0xF4, 0x64, 0x7C, 0x27, 0xC0, 0x9F,
                /* 0C30 */  0x9F, 0x7D, 0x24, 0xF1, 0x19, 0xFC, 0xF1, 0x08,
                /* 0C38 */  0x98, 0xDE, 0x67, 0x80, 0x45, 0xEC, 0xDB, 0x03,
                /* 0C40 */  0x2A, 0xE8, 0xED, 0x81, 0x82, 0xF8, 0x52, 0xE2,
                /* 0C48 */  0xB3, 0x26, 0x60, 0xE5, 0xFF, 0x7F, 0x9F, 0x61,
                /* 0C50 */  0x97, 0x0C, 0xFC, 0xF5, 0x9F, 0xDD, 0x1F, 0x1E,
                /* 0C58 */  0xD0, 0x7D, 0xC5, 0xE0, 0xA7, 0x4C, 0xE0, 0x79,
                /* 0C60 */  0x28, 0x60, 0x97, 0x0C, 0x18, 0x77, 0x18, 0x8F,
                /* 0C68 */  0x8A, 0x13, 0x38, 0xC4, 0x30, 0xE8, 0xA0, 0xC0,
                /* 0C70 */  0x75, 0xC8, 0xE0, 0x0B, 0xF2, 0xFD, 0x08, 0xEE,
                /* 0C78 */  0x25, 0x03, 0x5C, 0xC1, 0x86, 0x86, 0x96, 0x72,
                /* 0C80 */  0x4C, 0xA0, 0xC7, 0x1B, 0x76, 0x8E, 0xF7, 0xBD,
                /* 0C88 */  0x87, 0x0D, 0x0E, 0xDC, 0x87, 0x0C, 0x0F, 0x0E,
                /* 0C90 */  0xDE, 0x6D, 0xC3, 0x83, 0x03, 0xD7, 0x55, 0x0A,
                /* 0C98 */  0xFB, 0xFF, 0xBF, 0x4A, 0x81, 0x39, 0xF8, 0xD8,
                /* 0CA0 */  0x51, 0x57, 0x29, 0x70, 0x9C, 0xEB, 0xF8, 0x55,
                /* 0CA8 */  0x0A, 0x78, 0x0E, 0xF0, 0x55, 0x0A, 0x2C, 0xD7,
                /* 0CB0 */  0x26, 0x36, 0x87, 0xE7, 0x26, 0x7E, 0x95, 0xF2,
                /* 0CB8 */  0xA1, 0x06, 0x7B, 0x85, 0xF1, 0xF5, 0x46, 0xA7,
                /* 0CC0 */  0x56, 0x14, 0x87, 0xA3, 0x9C, 0x5A, 0x11, 0xB7,
                /* 0CC8 */  0x28, 0x98, 0xD2, 0xCF, 0xAD, 0x28, 0xD1, 0x30,
                /* 0CD0 */  0x92, 0x7C, 0x6E, 0x45, 0x89, 0x3C, 0xB7, 0x52,
                /* 0CD8 */  0x10, 0x9F, 0x10, 0x7C, 0x8B, 0x02, 0xD6, 0xFF,
                /* 0CE0 */  0xFF, 0x5B, 0x14, 0x60, 0xF1, 0xD0, 0x0A, 0x07,
                /* 0CE8 */  0xF0, 0x31, 0x0A, 0x70, 0x70, 0x11, 0xF5, 0x35,
                /* 0CF0 */  0x08, 0xFE, 0x98, 0xC0, 0x8A, 0xE4, 0x31, 0x81,
                /* 0CF8 */  0x2D, 0xD0, 0x1D, 0x01, 0xAD, 0x02, 0x44, 0xFF,
                /* 0D00 */  0xFF, 0x4B, 0x10, 0xE6, 0x86, 0x00, 0xDE, 0xE5,
                /* 0D08 */  0xF8, 0xC4, 0x0A, 0xF3, 0x86, 0x00, 0xAE, 0x0B,
                /* 0D10 */  0x2B, 0xC0, 0xA2, 0x63, 0x11, 0xD8, 0xFE, 0xFF,
                /* 0D18 */  0x37, 0x03, 0xCC, 0xB1, 0x08, 0xF0, 0x71, 0x61,
                /* 0D20 */  0xE5, 0xC7, 0x22, 0xF0, 0x85, 0x39, 0x16, 0x21,
                /* 0D28 */  0x44, 0x8E, 0x43, 0x08, 0x0F, 0x37, 0x30, 0x08,
                /* 0D30 */  0x8A, 0x3F, 0x16, 0xA1, 0x64, 0xC3, 0x48, 0xF4,
                /* 0D38 */  0xB1, 0x08, 0x25, 0xF3, 0x58, 0x44, 0x41, 0x7C,
                /* 0D40 */  0xC6, 0x70, 0x90, 0x0B, 0x0A, 0xFA, 0xA0, 0xE6,
                /* 0D48 */  0x41, 0xBD, 0xD2, 0xB2, 0xF3, 0x87, 0x07, 0xC7,
                /* 0D50 */  0x4F, 0x45, 0xC0, 0xF3, 0x22, 0x0F, 0x67, 0xAA,
                /* 0D58 */  0xF0, 0x4E, 0x29, 0x60, 0xF8, 0xFF, 0x5F, 0x8B,
                /* 0D60 */  0x80, 0xDF, 0x2D, 0x0B, 0x18, 0x9E, 0x8A, 0x80,
                /* 0D68 */  0xC5, 0x05, 0x80, 0x21, 0x37, 0x7F, 0x4D, 0x20,
                /* 0D70 */  0xA7, 0x22, 0x60, 0x7A, 0x11, 0x83, 0x73, 0x7F,
                /* 0D78 */  0x84, 0x71, 0x44, 0x00, 0x2F, 0xB0, 0xCF, 0x45,
                /* 0D80 */  0xB0, 0xFF, 0xFF, 0xE7, 0x22, 0x80, 0x6D, 0xB1,
                /* 0D88 */  0xCF, 0x45, 0xA0, 0x83, 0xE5, 0xE7, 0x22, 0x60,
                /* 0D90 */  0xF6, 0xFF, 0x3F, 0x17, 0x61, 0xE7, 0xF8, 0x5C,
                /* 0D98 */  0x04, 0xB6, 0xDB, 0x07, 0x03, 0x09, 0xF7, 0x92,
                /* 0DA0 */  0x82, 0x3D, 0x71, 0x38, 0xDE, 0x5B, 0x42, 0xC7,
                /* 0DA8 */  0x22, 0x7E, 0x81, 0x70, 0xA0, 0x35, 0x0A, 0x36,
                /* 0DB0 */  0xE0, 0x39, 0x74, 0x3D, 0x74, 0x81, 0x7A, 0x02,
                /* 0DB8 */  0x35, 0x4E, 0x42, 0x20, 0x87, 0x18, 0xFC, 0x00,
                /* 0DC0 */  0x8E, 0xCD, 0x60, 0x31, 0xA2, 0x3D, 0x27, 0xBD,
                /* 0DC8 */  0x06, 0x19, 0xEB, 0xA8, 0x7D, 0x55, 0xF2, 0x9D,
                /* 0DD0 */  0x44, 0xF0, 0x3A, 0x1C, 0x71, 0xB9, 0x30, 0x12,
                /* 0DD8 */  0xFB, 0xBF, 0xD0, 0x11, 0x82, 0xCB, 0x3B, 0x23,
                /* 0DE0 */  0x51, 0x10, 0x8F, 0xCF, 0x39, 0x2E, 0x21, 0x3E,
                /* 0DE8 */  0x1C, 0x81, 0x42, 0xF3, 0xE1, 0x08, 0xC4, 0xC7,
                /* 0DF0 */  0x0F, 0x70, 0xCD, 0x09, 0xCE, 0xFC, 0xDF, 0x0F,
                /* 0DF8 */  0x4E, 0xE9, 0x39, 0xC5, 0xE7, 0x02, 0x23, 0x1C,
                /* 0E00 */  0xD6, 0x39, 0x81, 0xF7, 0x4E, 0x04, 0xBE, 0xEB,
                /* 0E08 */  0x8E, 0xE7, 0x84, 0xBB, 0xCB, 0xFC, 0xFF, 0xCF,
                /* 0E10 */  0xC9, 0x47, 0x81, 0x8A, 0x31, 0x75, 0x3F, 0x88,
                /* 0E18 */  0x1E, 0xE5, 0xD9, 0xC1, 0x63, 0x02, 0xEB, 0xB9,
                /* 0E20 */  0xC0, 0xD3, 0x06, 0xFF, 0x59, 0xED, 0x81, 0xE8,
                /* 0E28 */  0x9D, 0xC2, 0x67, 0x15, 0xC3, 0x46, 0xF5, 0x9C,
                /* 0E30 */  0xC0, 0x7B, 0x97, 0xE6, 0xD3, 0x06, 0xF7, 0xFD,
                /* 0E38 */  0xE4, 0x8C, 0x4E, 0xFA, 0x1D, 0xE5, 0xC9, 0x80,
                /* 0E40 */  0x9D, 0x3B, 0x3C, 0x26, 0xB0, 0x9E, 0x85, 0xC0,
                /* 0E48 */  0x37, 0x26, 0x30, 0x1C, 0x47, 0x8E, 0x09, 0xBC,
                /* 0E50 */  0xF7, 0x7C, 0xFC, 0xFF, 0x7F, 0x4C, 0xF0, 0x0F,
                /* 0E58 */  0x56, 0x70, 0x4E, 0xAF, 0xFC, 0x6E, 0xC0, 0x0F,
                /* 0E60 */  0x56, 0x60, 0x3E, 0x1A, 0x7B, 0x68, 0xB0, 0x6E,
                /* 0E68 */  0xF9, 0xE0, 0x3B, 0x58, 0x01, 0x26, 0x3D, 0x1C,
                /* 0E70 */  0xAC, 0x80, 0xEC, 0xFF, 0xFF, 0x60, 0x85, 0x15,
                /* 0E78 */  0xB1, 0x58, 0x1D, 0xAC, 0xC0, 0x75, 0x33, 0xE0,
                /* 0E80 */  0x07, 0x2B, 0xE0, 0x79, 0x2B, 0xF4, 0xC1, 0x0A,
                /* 0E88 */  0x1C, 0x47, 0x29, 0x3E, 0x88, 0x57, 0x29, 0x8E,
                /* 0E90 */  0xF2, 0x2C, 0x85, 0x87, 0xF3, 0x5D, 0x0A, 0xCE,
                /* 0E98 */  0xF9, 0xCA, 0xC2, 0xDF, 0x18, 0x3A, 0x5F, 0x71,
                /* 0EA0 */  0x49, 0xA7, 0x29, 0xAF, 0x59, 0xA7, 0x2D, 0x36,
                /* 0EA8 */  0xFE, 0xC3, 0x78, 0x85, 0xF2, 0x44, 0xE2, 0xC6,
                /* 0EB0 */  0x8E, 0x1B, 0xF9, 0x04, 0x4E, 0xE8, 0x74, 0x0C,
                /* 0EB8 */  0xF6, 0xA8, 0xA5, 0xF3, 0x2B, 0x3D, 0xF3, 0x10,
                /* 0EC0 */  0x18, 0xC9, 0x3F, 0x44, 0xA0, 0x04, 0xC3, 0x08,
                /* 0EC8 */  0xCE, 0x20, 0x3E, 0x07, 0xF8, 0x18, 0xEB, 0x9B,
                /* 0ED0 */  0x0A, 0x4E, 0xCB, 0x31, 0x0C, 0x71, 0x85, 0xF0,
                /* 0ED8 */  0xA0, 0x3C, 0x90, 0x87, 0x7B, 0x5F, 0xAD, 0x80,
                /* 0EE0 */  0xDD, 0xFF, 0xFF, 0x02, 0x82, 0x49, 0x31, 0x28,
                /* 0EE8 */  0x34, 0xB0, 0x07, 0x15, 0xF1, 0xB9, 0xE9, 0xF4,
                /* 0EF0 */  0x9F, 0x89, 0x3C, 0x50, 0xDF, 0xAC, 0x80, 0xE5,
                /* 0EF8 */  0x19, 0x05, 0x58, 0xC4, 0x3A, 0x0F, 0xA0, 0x82,
                /* 0F00 */  0x9C, 0x07, 0x28, 0x88, 0x07, 0xE6, 0x30, 0x63,
                /* 0F08 */  0x45, 0x9F, 0x51, 0xE0, 0x5E, 0x31, 0x9E, 0x51,
                /* 0F10 */  0xC0, 0x7C, 0xEA, 0x02, 0x5F, 0xB0, 0xBB, 0x10,
                /* 0F18 */  0xFA, 0xD4, 0xE5, 0x3B, 0x2B, 0x0C, 0x82, 0x21,
                /* 0F20 */  0x0E, 0x43, 0x74, 0x54, 0xE0, 0x3A, 0x0D, 0xF1,
                /* 0F28 */  0x31, 0x72, 0x38, 0xF6, 0xFF, 0x1F, 0x1C, 0xF6,
                /* 0F30 */  0xF6, 0x05, 0xBE, 0xE3, 0x0C, 0xF0, 0x78, 0x17,
                /* 0F38 */  0xF8, 0x38, 0x03, 0xAE, 0x93, 0x8F, 0x8F, 0x33,
                /* 0F40 */  0xC0, 0x55, 0xF0, 0xB1, 0x13, 0x74, 0x37, 0x17,
                /* 0F48 */  0x8E, 0xF2, 0xE8, 0x02, 0x07, 0x2B, 0xE8, 0x03,
                /* 0F50 */  0x98, 0xEF, 0x12, 0xBE, 0xE1, 0xB3, 0xF4, 0x87,
                /* 0F58 */  0x19, 0xD4, 0x79, 0xC9, 0x99, 0x57, 0x2C, 0x8F,
                /* 0F60 */  0x87, 0x19, 0x10, 0xCC, 0x00, 0x47, 0x30, 0xDB,
                /* 0F68 */  0x79, 0x06, 0x95, 0x0A, 0x46, 0xFA, 0x0F, 0x1C,
                /* 0F70 */  0x28, 0xC5, 0x07, 0x0E, 0x0A, 0xE2, 0xF3, 0x0C,
                /* 0F78 */  0xF6, 0xFF, 0x7F, 0x9E, 0xC1, 0x0C, 0x86, 0x9D,
                /* 0F80 */  0x67, 0x80, 0xF5, 0x65, 0x0F, 0xD6, 0x71, 0x03,
                /* 0F88 */  0x7F, 0x9F, 0x01, 0x5C, 0x89, 0xFA, 0x11, 0xE8,
                /* 0F90 */  0x3E, 0xC0, 0x65, 0xC0, 0x68, 0x46, 0x06, 0xF1,
                /* 0F98 */  0xED, 0xC4, 0xF7, 0x19, 0xC0, 0xC5, 0xFF, 0x7F,
                /* 0FA0 */  0xBA, 0xB8, 0x5B, 0x03, 0x1E, 0xD8, 0x37, 0x02,
                /* 0FA8 */  0x86, 0x79, 0x48, 0xE7, 0xE2, 0x41, 0x81, 0xFD,
                /* 0FB0 */  0x1E, 0x03, 0xBE, 0xCB, 0xA0, 0xAF, 0x0C, 0x1E,
                /* 0FB8 */  0x3A, 0x0E, 0xF8, 0xB5, 0xE2, 0x5D, 0xDA, 0xB7,
                /* 0FC0 */  0xAA, 0xA0, 0xC7, 0xF4, 0x64, 0xE2, 0x13, 0xE5,
                /* 0FC8 */  0xCB, 0x20, 0xF8, 0x4F, 0x05, 0xBE, 0x0C, 0x82,
                /* 0FD0 */  0xC7, 0x98, 0x00, 0x6D, 0x97, 0x41, 0x20, 0x73,
                /* 0FD8 */  0xDD, 0x01, 0x1F, 0xB8, 0xAF, 0x3B, 0xC0, 0xE5,
                /* 0FE0 */  0xFF, 0x7F, 0xDD, 0x01, 0x1E, 0xF7, 0x17, 0x76,
                /* 0FE8 */  0xDD, 0x01, 0x63, 0x80, 0xEB, 0x0E, 0x4A, 0xD4,
                /* 0FF0 */  0x55, 0xDD, 0x2B, 0xD6, 0x48, 0x7C, 0x5A, 0x09,
                /* 0FF8 */  0x6C, 0x90, 0xE7, 0xB9, 0x53, 0x7E, 0x6B, 0x87,
                /* 1000 */  0x27, 0xF0, 0xB2, 0x83, 0x92, 0x06, 0xA3, 0x00,
                /* 1008 */  0x97, 0x1D, 0x94, 0xE4, 0xCB, 0x0E, 0x05, 0xF1,
                /* 1010 */  0x31, 0xC0, 0xB7, 0x76, 0xC0, 0xC6, 0x81, 0x08,
                /* 1018 */  0xCE, 0x61, 0x07, 0x8F, 0x7F, 0x50, 0x60, 0x3E,
                /* 1020 */  0xED, 0x80, 0xE9, 0xFF, 0x7F, 0xDA, 0x01, 0x2E,
                /* 1028 */  0xC1, 0x0E, 0x04, 0xA8, 0x28, 0x07, 0x02, 0x0A,
                /* 1030 */  0xE2, 0xCB, 0x20, 0xE0, 0x26, 0xDA, 0x65, 0x10,
                /* 1038 */  0x3D, 0x2C, 0x7E, 0x25, 0xC0, 0x1D, 0x1D, 0x0E,
                /* 1040 */  0x87, 0xDD, 0x06, 0x01, 0x9F, 0x12, 0xCE, 0x05,
                /* 1048 */  0xFA, 0xFF, 0x9F, 0x67, 0xC0, 0x65, 0xE2, 0x3C,
                /* 1050 */  0x03, 0x74, 0x0F, 0x3B, 0xFC, 0xAE, 0x0C, 0x86,
                /* 1058 */  0xC3, 0x0B, 0xE6, 0xA8, 0x0C, 0x36, 0x82, 0xD9,
                /* 1060 */  0x5F, 0x1F, 0x3A, 0xD0, 0x70, 0x0E, 0x67, 0x5F,
                /* 1068 */  0xB4, 0xCE, 0x38, 0x4C, 0xE4, 0x30, 0x84, 0x10,
                /* 1070 */  0x3E, 0xF4, 0xD1, 0x44, 0x38, 0x87, 0x47, 0x68,
                /* 1078 */  0x8F, 0x8F, 0x65, 0x85, 0xD4, 0x71, 0x86, 0xA7,
                /* 1080 */  0x84, 0x91, 0xAA, 0xB3, 0x1A, 0x4A, 0xC7, 0x59,
                /* 1088 */  0x8D, 0x82, 0xF8, 0xEC, 0xE0, 0xAB, 0x8A, 0x4F,
                /* 1090 */  0x58, 0xB8, 0xE3, 0x0C, 0xBC, 0x6B, 0xB6, 0x8F,
                /* 1098 */  0x33, 0x60, 0x1D, 0xA2, 0xAF, 0x57, 0x60, 0xBA,
                /* 10A0 */  0x0A, 0x7A, 0x50, 0xB8, 0xFF, 0x3F, 0xB2, 0xA7,
                /* 10A8 */  0xCA, 0x90, 0x5F, 0xC1, 0x0E, 0xCB, 0x63, 0x02,
                /* 10B0 */  0xEF, 0x6C, 0x3D, 0x26, 0xB0, 0xC5, 0x3A, 0x8F,
                /* 10B8 */  0xA0, 0x6F, 0x3C, 0x30, 0x13, 0x5C, 0x47, 0xE8,
                /* 10C0 */  0xA4, 0xE0, 0xDD, 0x46, 0xE0, 0x81, 0x79, 0x6E,
                /* 10C8 */  0xB0, 0x8E, 0x2E, 0xE0, 0xBB, 0xF8, 0x00, 0x8B,
                /* 10D0 */  0x38, 0x4B, 0xD2, 0xD5, 0x81, 0x07, 0xB8, 0x5F,
                /* 10D8 */  0x51, 0x10, 0x0F, 0xCB, 0x77, 0x3D, 0x3B, 0xB9,
                /* 10E0 */  0xF8, 0x80, 0xE6, 0xAE, 0x07, 0x6E, 0x28, 0xDF,
                /* 10E8 */  0xF5, 0x30, 0xFF, 0xFF, 0xE9, 0xC2, 0x76, 0x26,
                /* 10F0 */  0x40, 0x19, 0x24, 0xB9, 0x1F, 0xF9, 0x86, 0x81,
                /* 10F8 */  0x47, 0x7D, 0x74, 0x79, 0xA1, 0xC5, 0xDE, 0x08,
                /* 1100 */  0x81, 0xF1, 0xFD, 0x08, 0xCE, 0xF1, 0x04, 0xDE,
                /* 1108 */  0xFD, 0x08, 0xDC, 0x63, 0xF2, 0xF0, 0xE0, 0x5D,
                /* 1110 */  0x80, 0xF8, 0x2D, 0x13, 0xDC, 0x73, 0xC3, 0x9F,
                /* 1118 */  0x22, 0x9E, 0x81, 0x7C, 0x08, 0x00, 0xFB, 0x29,
                /* 1120 */  0xC2, 0x87, 0x00, 0x30, 0xFC, 0xFF, 0x0F, 0x01,
                /* 1128 */  0x60, 0xB8, 0x73, 0x01, 0xA7, 0xBB, 0x92, 0x87,
                /* 1130 */  0x07, 0xEF, 0x9C, 0xCE, 0xEF, 0x5C, 0xC0, 0x37,
                /* 1138 */  0xF6, 0x19, 0x01, 0x75, 0xE7, 0x02, 0x87, 0x8A,
                /* 1140 */  0x3B, 0x17, 0xD0, 0x9D, 0xE3, 0x2B, 0x29, 0xD8,
                /* 1148 */  0x8E, 0x1C, 0x0C, 0xE4, 0xDD, 0xD7, 0xE7, 0x08,
                /* 1150 */  0xDC, 0xC9, 0xC8, 0x9A, 0x16, 0xAA, 0xDB, 0x16,
                /* 1158 */  0xFB, 0xFF, 0xDF, 0x46, 0x99, 0xA2, 0x3F, 0x8F,
                /* 1160 */  0xC0, 0xD9, 0x75, 0xC2, 0xB7, 0x21, 0x86, 0xF1,
                /* 1168 */  0x12, 0xE6, 0x7B, 0x8A, 0xC1, 0x7D, 0x55, 0xF1,
                /* 1170 */  0x49, 0x85, 0xA5, 0xBF, 0x26, 0xD2, 0x0B, 0x90,
                /* 1178 */  0x73, 0x93, 0x28, 0xF7, 0x69, 0x80, 0xC2, 0x39,
                /* 1180 */  0xE9, 0x91, 0x89, 0x82, 0x18, 0xD0, 0x77, 0x29,
                /* 1188 */  0x9F, 0x72, 0x70, 0x07, 0x03, 0x9F, 0x0F, 0x3C,
                /* 1190 */  0x10, 0x0F, 0xEB, 0xD1, 0x81, 0x5D, 0xB7, 0x80,
                /* 1198 */  0xE1, 0x0D, 0x87, 0x5D, 0x90, 0x80, 0x45, 0xFC,
                /* 11A0 */  0xB9, 0xA2, 0x02, 0xCF, 0x95, 0x82, 0x78, 0xAE,
                /* 11A8 */  0xBE, 0xF9, 0xD8, 0xCA, 0xCD, 0x07, 0x3D, 0x22,
                /* 11B0 */  0x5F, 0x3E, 0xD8, 0x60, 0xF9, 0x2D, 0x05, 0xEC,
                /* 11B8 */  0x83, 0xF1, 0x2D, 0x05, 0x3C, 0xA7, 0x94, 0xD2,
                /* 11C0 */  0xCE, 0xD6, 0x20, 0xF8, 0xFF, 0x5F, 0x3C, 0xC0,
                /* 11C8 */  0x15, 0xFC, 0xE2, 0x01, 0xBA, 0x71, 0xFA, 0xE2,
                /* 11D0 */  0x01, 0x5C, 0x07, 0xF8, 0xE2, 0x01, 0xB6, 0xF9,
                /* 11D8 */  0x1E, 0xE9, 0x8B, 0x87, 0xEF, 0x1A, 0x30, 0xCE,
                /* 11E0 */  0x8D, 0x4C, 0xCF, 0xCD, 0x03, 0xC5, 0x61, 0x35,
                /* 11E8 */  0x2F, 0x05, 0x4D, 0xFA, 0xCD, 0x03, 0xEE, 0xBD,
                /* 11F0 */  0x03, 0x8C, 0x87, 0x07, 0xDC, 0xBD, 0x03, 0x38,
                /* 11F8 */  0xFF, 0xFF, 0x6F, 0x0E, 0xFC, 0xDE, 0x01, 0x2C,
                /* 1200 */  0xCF, 0x2C, 0xB8, 0x7B, 0x07, 0xF0, 0x3F, 0xE7,
                /* 1208 */  0xF1, 0x7B, 0x07, 0xF0, 0xBE, 0x60, 0xF8, 0xDE,
                /* 1210 */  0x01, 0x18, 0xF8, 0xFF, 0xDF, 0x3B, 0x60, 0x5C,
                /* 1218 */  0x34, 0xD8, 0xBD, 0x03, 0x0C, 0xB9, 0x9F, 0x07,
                /* 1220 */  0x4F, 0x99, 0xEC, 0x35, 0x20, 0x91, 0x8B, 0xA5,
                /* 1228 */  0x30, 0xBE, 0x51, 0xF8, 0x7C, 0x80, 0x1F, 0xF1,
                /* 1230 */  0x01, 0x1F, 0xC2, 0x21, 0x31, 0x49, 0x70, 0xA8,
                /* 1238 */  0xC3, 0x80, 0xC7, 0xF1, 0x38, 0x7B, 0x22, 0xAF,
                /* 1240 */  0xC5, 0x1E, 0x89, 0x21, 0xD9, 0xA5, 0xC2, 0x63,
                /* 1248 */  0xE3, 0x47, 0x07, 0x0F, 0xEC, 0x05, 0xD9, 0x27,
                /* 1250 */  0x65, 0x5F, 0x38, 0x7D, 0x14, 0xF1, 0x31, 0x80,
                /* 1258 */  0x9F, 0x93, 0x19, 0x5A, 0x68, 0xEC, 0x30, 0x3C,
                /* 1260 */  0xC0, 0x60, 0x47, 0xE7, 0x3B, 0x80, 0x09, 0x3C,
                /* 1268 */  0xA1, 0xD3, 0x2C, 0xF7, 0xDE, 0x20, 0xF1, 0xA8,
                /* 1270 */  0xC2, 0x68, 0x0E, 0x8A, 0x04, 0x18, 0x35, 0x68,
                /* 1278 */  0xCE, 0x0C, 0x67, 0xF0, 0x06, 0xC6, 0x06, 0xFD,
                /* 1280 */  0xAC, 0xE9, 0x5B, 0x81, 0x51, 0x6A, 0x9E, 0x33,
                /* 1288 */  0x01, 0xA9, 0x70, 0x9C, 0x5A, 0xF3, 0x79, 0x44,
                /* 1290 */  0x89, 0x66, 0xEC, 0xE0, 0xBE, 0x48, 0x1B, 0xE7,
                /* 1298 */  0x41, 0x21, 0x54, 0xAD, 0x93, 0x23, 0x30, 0xC7,
                /* 12A0 */  0xC0, 0x80, 0xDE, 0x26, 0x1E, 0x00, 0x9E, 0x46,
                /* 12A8 */  0xDE, 0x27, 0x5E, 0xF5, 0xF9, 0x80, 0xF8, 0xE9,
                /* 12B0 */  0xC0, 0xD0, 0xEF, 0x15, 0x3E, 0x25, 0x30, 0xF7,
                /* 12B8 */  0x57, 0x6C, 0x79, 0x13, 0x60, 0x0D, 0x43, 0x10,
                /* 12C0 */  0x81, 0x23, 0xD8, 0xD6, 0x54, 0x74, 0xD9, 0x0B,
                /* 12C8 */  0x11, 0x3E, 0xCA, 0x11, 0x1E, 0x54, 0xB0, 0xA8,
                /* 12D0 */  0x51, 0x5E, 0x2A, 0x8E, 0xF1, 0x01, 0xF1, 0xC4,
                /* 12D8 */  0xA2, 0xC4, 0x8D, 0x15, 0x30, 0x42, 0xE4, 0xB0,
                /* 12E0 */  0x67, 0xF2, 0x7E, 0x10, 0xDC, 0xB0, 0xB1, 0xDA,
                /* 12E8 */  0x1F, 0x04, 0x89, 0x75, 0x2E, 0xD0, 0xE1, 0xD0,
                /* 12F0 */  0x91, 0x46, 0x83, 0x3A, 0x0B, 0xFC, 0xFF, 0x9F,
                /* 12F8 */  0x7F, 0xD9, 0x49, 0xC1, 0x13, 0x7B, 0x46, 0x35,
                /* 1300 */  0xC8, 0x1B, 0xB8, 0x75, 0x1E, 0x0A, 0xC8, 0xF0,
                /* 1308 */  0xD9, 0x69, 0xC4, 0x87, 0x12, 0x38, 0xAE, 0x01,
                /* 1310 */  0x75, 0x3D, 0x78, 0xAE, 0x00, 0xCB, 0xA9, 0x04,
                /* 1318 */  0xFE, 0x78, 0x7C, 0x1A, 0xF0, 0xEC, 0x4D, 0x60,
                /* 1320 */  0xF9, 0x83, 0x40, 0x5D, 0x7B, 0xF8, 0x50, 0x4F,
                /* 1328 */  0xEB, 0x35, 0xC0, 0x37, 0x4A, 0x13, 0xF8, 0x08,
                /* 1330 */  0xE9, 0x63, 0x8C, 0xC7, 0x03, 0x7E, 0xC5, 0xC7,
                /* 1338 */  0x02, 0x21, 0xBC, 0x39, 0x78, 0xBE, 0x26, 0x28,
                /* 1340 */  0xEF, 0xD0, 0x02, 0x8A, 0xCB, 0x02, 0x3F, 0x7B,
                /* 1348 */  0xB0, 0xC3, 0x02, 0x3F, 0xCF, 0xFA, 0x10, 0x81,
                /* 1350 */  0x85, 0xE7, 0x87, 0x80, 0xC7, 0x17, 0x06, 0xFC,
                /* 1358 */  0x06, 0xE3, 0x29, 0x1C, 0x8E, 0x8F, 0x17, 0x46,
                /* 1360 */  0x08, 0xFF, 0x54, 0xF1, 0x94, 0xE1, 0x33, 0xC4,
                /* 1368 */  0xF9, 0x3C, 0x2F, 0x9C, 0xD1, 0x13, 0x0F, 0x4B,
                /* 1370 */  0xF2, 0x56, 0xD4, 0x71, 0xC3, 0x69, 0x8F, 0x86,
                /* 1378 */  0xE8, 0x94, 0x8B, 0x15, 0xFE, 0x1B, 0x4C, 0xE0,
                /* 1380 */  0x63, 0x7E, 0x20, 0x78, 0x7B, 0xC5, 0xCF, 0xE2,
                /* 1388 */  0x39, 0xE3, 0x94, 0x9E, 0x01, 0x4C, 0xE0, 0x44,
                /* 1390 */  0x57, 0x7A, 0x3A, 0x72, 0x67, 0xA1, 0xD0, 0x95,
                /* 1398 */  0x0A, 0xD6, 0xFF, 0xFF, 0x4A, 0x85, 0x39, 0x35,
                /* 13A0 */  0xE0, 0x86, 0xCE, 0x66, 0xF1, 0xEE, 0xEF, 0x59,
                /* 13A8 */  0xFB, 0x0E, 0xE0, 0x2B, 0x15, 0x30, 0xBB, 0x2F,
                /* 13B0 */  0x60, 0xAF, 0x54, 0xC0, 0x22, 0xD2, 0x3E, 0x35,
                /* 13B8 */  0x57, 0x1E, 0xE2, 0x54, 0x46, 0x41, 0x3C, 0x31,
                /* 13C0 */  0x5F, 0xC5, 0x81, 0xE7, 0x9D, 0x0A, 0x9C, 0xF7,
                /* 13C8 */  0x12, 0x8F, 0x0B, 0xF7, 0x5E, 0xF0, 0x51, 0x01,
                /* 13D0 */  0xE6, 0x6D, 0x1C, 0x18, 0xFC, 0xFF, 0xEF, 0x0B,
                /* 13D8 */  0xBE, 0x7C, 0x01, 0xEF, 0xBB, 0x9B, 0x2F, 0x5F,
                /* 13E0 */  0xE0, 0x3A, 0x04, 0xF8, 0xF2, 0x05, 0x5C, 0xAF,
                /* 13E8 */  0x25, 0xEF, 0x4D, 0xE0, 0xB9, 0x94, 0xF0, 0xBB,
                /* 13F0 */  0x30, 0x0C, 0xA4, 0x68, 0xEF, 0x06, 0x7C, 0x60,
                /* 13F8 */  0xBE, 0x07, 0xF9, 0xD0, 0x61, 0x19, 0xD7, 0x14,
                /* 1400 */  0xD4, 0xF5, 0xCA, 0xD1, 0xD7, 0xA9, 0x63, 0x25,
                /* 1408 */  0x9B, 0x7D, 0xF4, 0xF8, 0x4F, 0x4F, 0xBE, 0xC8,
                /* 1410 */  0x04, 0x7E, 0x5E, 0xC0, 0x1F, 0x89, 0x7D, 0x24,
                /* 1418 */  0xF3, 0x8D, 0xCA, 0x04, 0x0E, 0x78, 0xCE, 0xA0,
                /* 1420 */  0x10, 0x8E, 0x46, 0xA1, 0x60, 0xC7, 0x0D, 0x54,
                /* 1428 */  0x14, 0x38, 0x0A, 0xE2, 0xE3, 0x06, 0xBC, 0xFF,
                /* 1430 */  0xFF, 0x71, 0x03, 0x38, 0x11, 0xF8, 0x14, 0x01,
                /* 1438 */  0xBE, 0x60, 0xE3, 0x42, 0x1F, 0x15, 0x3C, 0x65,
                /* 1440 */  0x70, 0xDD, 0x1E, 0x01, 0x6F, 0x12, 0xD6, 0xA3,
                /* 1448 */  0x13, 0x07, 0xB8, 0x0E, 0x27, 0x3E, 0x71, 0x00,
                /* 1450 */  0x97, 0xFF, 0xFF, 0x89, 0x03, 0x3E, 0xAA, 0x4F,
                /* 1458 */  0xC1, 0xE0, 0x82, 0x7A, 0x3A, 0xE0, 0x30, 0x0F,
                /* 1460 */  0x7B, 0xEC, 0xD2, 0x01, 0xE3, 0x2A, 0xC7, 0xAE,
                /* 1468 */  0x07, 0xEC, 0xCC, 0xE1, 0x44, 0xBF, 0x3A, 0x9D,
                /* 1470 */  0x39, 0x70, 0x29, 0x96, 0xAC, 0x6B, 0x18, 0x3B,
                /* 1478 */  0x73, 0x80, 0x4D, 0x2B, 0xB8, 0x2E, 0x5B, 0x5C,
                /* 1480 */  0x25, 0x8C, 0x34, 0x92, 0xE8, 0xCC, 0xC1, 0x55,
                /* 1488 */  0xDD, 0xB9, 0x28, 0x88, 0x6F, 0x7C, 0x8E, 0x02,
                /* 1490 */  0x21, 0x25, 0x67, 0x0E, 0xF4, 0x40, 0xF0, 0x37,
                /* 1498 */  0x65, 0x8F, 0xD3, 0x27, 0x62, 0x60, 0x78, 0x40,
                /* 14A0 */  0x7C, 0x35, 0x4C, 0x30, 0x14, 0x84, 0x8C, 0x0C,
                /* 14A8 */  0x99, 0x8E, 0xCA, 0x03, 0xF3, 0xA8, 0xF0, 0x04,
                /* 14B0 */  0x13, 0xDC, 0x1E, 0x3C, 0x27, 0xA8, 0x37, 0x0D,
                /* 14B8 */  0xFC, 0x60, 0xDE, 0x27, 0x9E, 0xFD, 0x3C, 0x20,
                /* 14C0 */  0x4F, 0x0D, 0xC6, 0xFF, 0x7F, 0x6A, 0x3E, 0x06,
                /* 14C8 */  0xF1, 0xA9, 0x81, 0xE3, 0x1E, 0x79, 0x68, 0x6C,
                /* 14D0 */  0xFC, 0xB8, 0xB3, 0x09, 0xF8, 0x0E, 0x01, 0x60,
                /* 14D8 */  0xBD, 0x25, 0xF8, 0x10, 0x00, 0xB6, 0x2B, 0x1C,
                /* 14E0 */  0xB0, 0xD8, 0xB7, 0x6F, 0x10, 0x3C, 0xF2, 0xDC,
                /* 14E8 */  0x29, 0x88, 0x07, 0xE5, 0x4B, 0x10, 0xF0, 0x84,
                /* 14F0 */  0xF2, 0xC5, 0x06, 0x58, 0xFD, 0xFF, 0x2F, 0x36,
                /* 14F8 */  0xC0, 0x08, 0xD2, 0x17, 0x1B, 0xC0, 0xC9, 0x31,
                /* 1500 */  0x9B, 0x5F, 0x6C, 0xC0, 0x29, 0xFB, 0x62, 0x83,
                /* 1508 */  0x3A, 0x12, 0x58, 0xEC, 0x4A, 0x75, 0xD9, 0x61,
                /* 1510 */  0x57, 0xD6, 0x37, 0x54, 0x36, 0x1B, 0x1F, 0xAC,
                /* 1518 */  0x7D, 0x50, 0xF3, 0xA8, 0xDF, 0x16, 0xD8, 0x60,
                /* 1520 */  0x1F, 0x81, 0x71, 0xA2, 0xEE, 0x35, 0x28, 0x39,
                /* 1528 */  0x30, 0x0A, 0x70, 0x8C, 0x40, 0x49, 0xBE, 0x9A,
                /* 1530 */  0x51, 0x10, 0x1F, 0x00, 0x7C, 0x28, 0x05, 0xA6,
                /* 1538 */  0xFF, 0xFF, 0x43, 0x29, 0x18, 0x92, 0xDC, 0x55,
                /* 1540 */  0xD0, 0x5A, 0x4E, 0x02, 0xE4, 0x92, 0xE7, 0xC3,
                /* 1548 */  0xDE, 0x81, 0x9E, 0xF8, 0x49, 0xBD, 0x00, 0x3F,
                /* 1550 */  0x95, 0xB3, 0x49, 0x81, 0x75, 0xB8, 0x3E, 0xA6,
                /* 1558 */  0x00, 0xE7, 0x30, 0x07, 0x02, 0x94, 0xFC, 0x03,
                /* 1560 */  0x01, 0x05, 0xF1, 0xD5, 0x0F, 0xB8, 0xDE, 0x47,
                /* 1568 */  0xC1, 0x19, 0xE6, 0xDC, 0x80, 0x3E, 0x3A, 0xFB,
                /* 1570 */  0x32, 0x01, 0x67, 0x58, 0x60, 0xF9, 0xFF, 0x1F,
                /* 1578 */  0x66, 0xC0, 0x7C, 0x3A, 0xC7, 0x1F, 0x66, 0x80,
                /* 1580 */  0xC7, 0x93, 0xC0, 0x87, 0x19, 0x70, 0x81, 0xFB,
                /* 1588 */  0x30, 0x03, 0x5C, 0x05, 0x5F, 0xFA, 0x40, 0x77,
                /* 1590 */  0x90, 0x67, 0x28, 0xBE, 0x18, 0xF8, 0xE4, 0xC2,
                /* 1598 */  0x71, 0x4E, 0xEB, 0xE9, 0x80, 0xC3, 0x04, 0x7E,
                /* 15A0 */  0x3B, 0x60, 0x47, 0x0E, 0x8B, 0xBF, 0xF3, 0xA1,
                /* 15A8 */  0xE5, 0x9E, 0x65, 0x20, 0xDF, 0x72, 0x3C, 0x1D,
                /* 15B0 */  0x0F, 0xE0, 0x79, 0xC1, 0x77, 0x12, 0xDC, 0x61,
                /* 15B8 */  0x06, 0x2C, 0xFF, 0xFF, 0xC3, 0x0C, 0xC0, 0xFF,
                /* 15C0 */  0xFF, 0xFF, 0x61, 0x06, 0xAC, 0xB7, 0x09, 0x18,
                /* 15C8 */  0x87, 0x19, 0xC0, 0x9C, 0x88, 0xC3, 0x0C, 0xE8,
                /* 15D0 */  0x4C, 0x1C, 0x66, 0x80, 0xEE, 0x4D, 0xC3, 0x87,
                /* 15D8 */  0x19, 0xE0, 0x00, 0xFD, 0x74, 0x80, 0xB9, 0xCC,
                /* 15E0 */  0xF8, 0x0A, 0xC2, 0xFE, 0xFF, 0x50, 0xBE, 0x73,
                /* 15E8 */  0x98, 0x60, 0xBC, 0x77, 0x83, 0x8E, 0x33, 0x7C,
                /* 15F0 */  0x28, 0xBE, 0xC6, 0x7B, 0x14, 0x6C, 0xFC, 0xEF,
                /* 15F8 */  0x7D, 0x46, 0xF1, 0x01, 0x20, 0xFE, 0xFB, 0x80,
                /* 1600 */  0x43, 0xDD, 0xE6, 0x51, 0x71, 0x28, 0x74, 0xCE,
                /* 1608 */  0x00, 0x1C, 0xDC, 0xE6, 0xC1, 0x79, 0xCE, 0x80,
                /* 1610 */  0x33, 0x57, 0x18, 0xF7, 0x78, 0x60, 0x78, 0xCE,
                /* 1618 */  0x00, 0x5E, 0xA1, 0x21, 0x74, 0xCE, 0x80, 0xFD,
                /* 1620 */  0xFF, 0x3F, 0x67, 0x60, 0x55, 0x9C, 0x33, 0x80,
                /* 1628 */  0xAE, 0xC8, 0x73, 0x06, 0xE8, 0x8E, 0xA6, 0x0C,
                /* 1630 */  0x86, 0x5D, 0x4C, 0x3D, 0xF7, 0xE7, 0x0B, 0x26,
                /* 1638 */  0xF4, 0xF4, 0x85, 0x1A, 0x82, 0xA5, 0x5E, 0xE0,
                /* 1640 */  0x11, 0x77, 0x04, 0x18, 0xF2, 0x8E, 0x5D, 0x28,
                /* 1648 */  0x61, 0x30, 0x92, 0x75, 0x73, 0x47, 0x09, 0xB9,
                /* 1650 */  0xB9, 0x53, 0x10, 0xDF, 0xDC, 0x01, 0xCB, 0xFF,
                /* 1658 */  0xFF, 0x9B, 0x3B, 0x30, 0xCB, 0x71, 0x0E, 0x41,
                /* 1660 */  0x0F, 0xCD, 0x77, 0x02, 0x18, 0x67, 0x76, 0x60,
                /* 1668 */  0x76, 0x0A, 0xC1, 0x9E, 0xD9, 0x01, 0x5E, 0xFC,
                /* 1670 */  0xFF, 0x0F, 0x31, 0xC0, 0x6E, 0x9C, 0x3E, 0xC4,
                /* 1678 */  0x00, 0x4E, 0xCE, 0xEC, 0xFC, 0x10, 0x03, 0x2F,
                /* 1680 */  0xE9, 0x3A, 0x75, 0x88, 0xE1, 0x1C, 0xCE, 0xF9,
                /* 1688 */  0x50, 0xD0, 0xD4, 0xC3, 0x1F, 0x93, 0x6F, 0xA4,
                /* 1690 */  0x27, 0xD8, 0xE7, 0x04, 0x34, 0x0E, 0x6B, 0x46,
                /* 1698 */  0xD2, 0x59, 0xE0, 0x18, 0x9F, 0x0E, 0x9C, 0xEB,
                /* 16A0 */  0xFC, 0x42, 0xCF, 0x0C, 0x4E, 0x44, 0xA1, 0x3C,
                /* 16A8 */  0x67, 0x07, 0x54, 0x82, 0x53, 0x17, 0x05, 0xF1,
                /* 16B0 */  0xF0, 0x7D, 0x8C, 0x01, 0x4C, 0xFC, 0xFF, 0x8F,
                /* 16B8 */  0x31, 0x80, 0xB1, 0x2B, 0x0A, 0x60, 0xF2, 0x4E,
                /* 16C0 */  0x0A, 0xCE, 0x2B, 0x0A, 0xF0, 0x08, 0x7E, 0x45,
                /* 16C8 */  0xA1, 0xFF, 0xFF, 0x2B, 0x0A, 0x78, 0x6C, 0x5C,
                /* 16D0 */  0x51, 0x80, 0xEE, 0x00, 0x5F, 0x51, 0xC0, 0x72,
                /* 16D8 */  0x2B, 0xE1, 0x83, 0x78, 0x2C, 0xE1, 0xC7, 0x4D,
                /* 16E0 */  0x76, 0x2D, 0xC1, 0x5C, 0x52, 0x58, 0xEC, 0x7B,
                /* 16E8 */  0x26, 0x8A, 0xC3, 0xA1, 0xEF, 0x99, 0x88, 0x5B,
                /* 16F0 */  0x38, 0x3F, 0xB5, 0xD8, 0x38, 0xB4, 0xA6, 0xE8,
                /* 16F8 */  0xCB, 0xA7, 0x09, 0x86, 0xBC, 0x69, 0xA2, 0xE2,
                /* 1700 */  0x51, 0x28, 0xDC, 0xE9, 0x01, 0x75, 0xDB, 0xF4,
                /* 1708 */  0x7D, 0x93, 0xDF, 0x34, 0x01, 0x3F, 0xE1, 0xAE,
                /* 1710 */  0x29, 0xE8, 0x71, 0x78, 0xB6, 0xFC, 0xFF, 0x8F,
                /* 1718 */  0xFC, 0x12, 0xE0, 0x7B, 0x8A, 0xEF, 0x03, 0x36,
                /* 1720 */  0x0F, 0x49, 0x42, 0x9C, 0x54, 0xE8, 0xC0, 0xC0,
                /* 1728 */  0x75, 0x54, 0xC1, 0x5D, 0x39, 0xE1, 0x5E, 0x55,
                /* 1730 */  0xC0, 0x75, 0xD6, 0x00, 0xDE, 0x63, 0xF1, 0x59,
                /* 1738 */  0x03, 0x70, 0x72, 0x51, 0x86, 0x71, 0xBE, 0xF2,
                /* 1740 */  0xE9, 0x02, 0x77, 0xD6, 0x60, 0x09, 0xEE, 0x9C,
                /* 1748 */  0x28, 0x0E, 0xEB, 0xBF, 0x73, 0x22, 0xCE, 0x1A,
                /* 1750 */  0x30, 0xFE, 0xFF, 0x67, 0x0D, 0xAE, 0xF7, 0xD6,
                /* 1758 */  0x89, 0x52, 0x0A, 0x23, 0x9D, 0xB7, 0x4E, 0x94,
                /* 1760 */  0xB2, 0x6B, 0x16, 0x05, 0xF1, 0xAD, 0x13, 0xE0,
                /* 1768 */  0x4F, 0xB0, 0xA1, 0xA1, 0x67, 0xE1, 0x33, 0x09,
                /* 1770 */  0xCC, 0xC1, 0x01, 0xA3, 0x83, 0x82, 0x07, 0x87,
                /* 1778 */  0xFB, 0xFF, 0xDF, 0xC5, 0x00, 0xD3, 0xC7, 0x4F,
                /* 1780 */  0xE0, 0x7E, 0xA1, 0x01, 0x9F, 0x91, 0x0B, 0x0D,
                /* 1788 */  0x10, 0xFD, 0xFF, 0x5F, 0x68, 0xC0, 0x76, 0xFC,
                /* 1790 */  0xE4, 0x17, 0x1A, 0xF8, 0x81, 0x0F, 0xA0, 0x28,
                /* 1798 */  0x51, 0x10, 0x8A, 0xF9, 0x54, 0xD0, 0xFD, 0x86,
                /* 17A0 */  0x4D, 0xC3, 0xDA, 0x07, 0x21, 0x58, 0xCF, 0xE6,
                /* 17A8 */  0x59, 0xC3, 0x77, 0x1A, 0x9F, 0x47, 0x3D, 0x27,
                /* 17B0 */  0x46, 0x30, 0xD2, 0x11, 0x14, 0x15, 0x86, 0x42,
                /* 17B8 */  0xE1, 0x8F, 0x03, 0x14, 0xCE, 0x71, 0xCF, 0x0F,
                /* 17C0 */  0x14, 0xC4, 0x80, 0xCE, 0x72, 0x7E, 0x40, 0x9F,
                /* 17C8 */  0x36, 0x3C, 0x11, 0xDC, 0x99, 0xE0, 0x0D, 0xE4,
                /* 17D0 */  0x00, 0x83, 0x3C, 0x31, 0xB0, 0x33, 0x0D, 0x30,
                /* 17D8 */  0x3C, 0x3E, 0xB0, 0xD3, 0x07, 0xB0, 0xB8, 0xC6,
                /* 17E0 */  0x79, 0xB8, 0x3C, 0xC0, 0x5D, 0x8E, 0x82, 0xF8,
                /* 17E8 */  0x2E, 0x07, 0x6C, 0xFE, 0xFF, 0xA7, 0x0F, 0xD8,
                /* 17F0 */  0xA3, 0xF1, 0xE9, 0x03, 0x7C, 0xE3, 0x82, 0x73,
                /* 17F8 */  0x2A, 0xC0, 0xDD, 0x15, 0x70, 0xF7, 0x4F, 0xC0,
                /* 1800 */  0xDB, 0xB2, 0x7D, 0x48, 0x01, 0xD7, 0x9D, 0xCA,
                /* 1808 */  0x87, 0x14, 0xE0, 0x2A, 0xF8, 0x12, 0x07, 0xA2,
                /* 1810 */  0xFF, 0xFF, 0x21, 0x85, 0x9D, 0x1D, 0x7C, 0x30,
                /* 1818 */  0xE0, 0xB7, 0x6E, 0xC3, 0xBD, 0x84, 0x1A, 0xF5,
                /* 1820 */  0xC1, 0x84, 0xDD, 0x54, 0x7C, 0x3A, 0xE0, 0x07,
                /* 1828 */  0x15, 0x96, 0x68, 0xBD, 0x3A, 0xA8, 0xE0, 0x72,
                /* 1830 */  0xBC, 0xAC, 0x74, 0x6E, 0x61, 0x07, 0x15, 0x30,
                /* 1838 */  0x68, 0x86, 0xD5, 0x41, 0x85, 0xAB, 0x85, 0x91,
                /* 1840 */  0xD6, 0x07, 0x80, 0x8E, 0x1A, 0x5C, 0xDD, 0x8D,
                /* 1848 */  0x8E, 0x82, 0xF8, 0x42, 0xE2, 0xAB, 0x1C, 0xC0,
                /* 1850 */  0x9D, 0x1C, 0xE3, 0x47, 0xC3, 0xF8, 0xE4, 0xE2,
                /* 1858 */  0xCB, 0x91, 0x47, 0xF6, 0x64, 0xF0, 0x2E, 0xC1,
                /* 1860 */  0xFE, 0xFF, 0xB3, 0x07, 0xEB, 0xF9, 0xC0, 0xB3,
                /* 1868 */  0x07, 0xDB, 0xD5, 0x08, 0x38, 0x22, 0xF9, 0x6A,
                /* 1870 */  0x04, 0xB6, 0x83, 0x84, 0xCF, 0x36, 0xE0, 0x19,
                /* 1878 */  0x15, 0x58, 0x4F, 0x0C, 0xBE, 0x3F, 0x01, 0xE7,
                /* 1880 */  0xCB, 0x20, 0x78, 0xFE, 0xFF, 0xF7, 0x27, 0xE0,
                /* 1888 */  0x76, 0xF1, 0xF1, 0xC5, 0x08, 0xF0, 0x34, 0x68,
                /* 1890 */  0x5F, 0x8C, 0x00, 0x27, 0x97, 0x41, 0x7E, 0x31,
                /* 1898 */  0x02, 0x5F, 0xA0, 0xC3, 0x3E, 0xEA, 0x08, 0xE0,
                /* 18A0 */  0x60, 0x87, 0x7D, 0x84, 0x55, 0x04, 0x5D, 0x0C,
                /* 18A8 */  0x58, 0x20, 0x28, 0xFD, 0xFF, 0x0F, 0xFA, 0x3C,
                /* 18B0 */  0x0A, 0x85, 0x82, 0x9C, 0x1E, 0x50, 0xD2, 0xE1,
                /* 18B8 */  0x28, 0x88, 0x0F, 0xFA, 0x80, 0x9F, 0x20, 0xC0,
                /* 18C0 */  0xA8, 0x71, 0xF9, 0x30, 0xE0, 0x99, 0x62, 0x2E,
                /* 18C8 */  0x7C, 0xC0, 0xF0, 0x3C, 0xE0, 0xE3, 0x81, 0x47,
                /* 18D0 */  0xD5, 0xF3, 0x09, 0x03, 0xC8, 0xDC, 0x34, 0x7D,
                /* 18D8 */  0xC2, 0x00, 0x97, 0x94, 0x13, 0x06, 0x28, 0xFF,
                /* 18E0 */  0xFF, 0x27, 0x0C, 0x70, 0xCB, 0xBB, 0xC9, 0x81,
                /* 18E8 */  0xEE, 0x54, 0xC0, 0x2F, 0x16, 0x96, 0x76, 0xB2,
                /* 18F0 */  0x47, 0x8D, 0xDC, 0x12, 0x4F, 0xF6, 0x88, 0xEB,
                /* 18F8 */  0x01, 0x46, 0xDA, 0xA9, 0x1E, 0x25, 0x0A, 0x46,
                /* 1900 */  0x92, 0x4E, 0xF5, 0x28, 0x11, 0x37, 0x57, 0x0A,
                /* 1908 */  0xE2, 0x53, 0x3D, 0xC0, 0x9D, 0xFF, 0xFF, 0xD5,
                /* 1910 */  0xCD, 0x19, 0x0E, 0x20, 0x68, 0x15, 0x07, 0x10,
                /* 1918 */  0xE4, 0xC5, 0x0D, 0x98, 0x1D, 0x3F, 0xB0, 0x57,
                /* 1920 */  0x79, 0x80, 0x45, 0xA7, 0x17, 0xF0, 0xFD, 0xFF,
                /* 1928 */  0xAD, 0x9C, 0x5E, 0x00, 0x2D, 0xC7, 0x2D, 0x7E,
                /* 1930 */  0x7A, 0xC1, 0x45, 0x3D, 0x65, 0xA1, 0x38, 0x1C,
                /* 1938 */  0xF4, 0x94, 0x85, 0xC0, 0xF5, 0x04, 0x3C, 0xA5,
                /* 1940 */  0xB3, 0xAB, 0xF3, 0x1C, 0xA0, 0xE1, 0xBD, 0xD8,
                /* 1948 */  0x47, 0xF2, 0x71, 0x8B, 0x9D, 0xB4, 0x78, 0x24,
                /* 1950 */  0x0A, 0x9D, 0xB6, 0x7C, 0x70, 0xE0, 0x11, 0xE0,
                /* 1958 */  0x28, 0x88, 0x4F, 0x5A, 0x80, 0x9F, 0x40, 0x27,
                /* 1960 */  0x13, 0xF4, 0x38, 0x3C, 0x5B, 0x98, 0x03, 0x03,
                /* 1968 */  0xD3, 0xFF, 0xFF, 0xB4, 0x05, 0xF8, 0x08, 0x7E,
                /* 1970 */  0xC0, 0x00, 0x9D, 0x96, 0x03, 0x06, 0xD0, 0x1D,
                /* 1978 */  0xE0, 0xD3, 0x16, 0xD8, 0x4E, 0x06, 0x38, 0x9C,
                /* 1980 */  0x37, 0x03, 0xDC, 0xD1, 0x90, 0x89, 0x3E, 0x72,
                /* 1988 */  0xA1, 0x38, 0x2C, 0xF9, 0xC8, 0x85, 0xB8, 0x27,
                /* 1990 */  0xC0, 0x3C, 0x7B, 0xF9, 0xD8, 0xC5, 0xC5, 0xC1,
                /* 1998 */  0x48, 0xDA, 0xB1, 0x0B, 0x25, 0xE6, 0xD8, 0x45,
                /* 19A0 */  0x41, 0x7C, 0xEC, 0x02, 0xC7, 0xFF, 0xFF, 0xD8,
                /* 19A8 */  0x05, 0x70, 0xE3, 0x74, 0xED, 0xD3, 0x08, 0x6E,
                /* 19B0 */  0x16, 0xBE, 0x15, 0xC0, 0x3C, 0x7A, 0x01, 0xD6,
                /* 19B8 */  0xFE, 0xFF, 0x47, 0x2F, 0xC0, 0xFB, 0x51, 0x06,
                /* 19C0 */  0x7C, 0x5E, 0x8E, 0x32, 0x80, 0x96, 0xA3, 0x17,
                /* 19C8 */  0x3F, 0xCA, 0xC0, 0x3F, 0x7F, 0xC1, 0xFB, 0xFF,
                /* 19D0 */  0xC3, 0x9F, 0x4A, 0x85, 0x43, 0x17, 0x46, 0x9F,
                /* 19D8 */  0x07, 0x00, 0x72, 0x83, 0x66, 0xF8, 0xC7, 0xF2,
                /* 19E0 */  0xFC, 0x05, 0xD8, 0x1C, 0x17, 0x6E, 0x1C, 0x9E,
                /* 19E8 */  0x2D, 0xCC, 0xF3, 0x17, 0x30, 0x3C, 0x65, 0x00,
                /* 19F0 */  0x1E, 0xE0, 0xFC, 0xFF, 0x3F, 0x7F, 0x01, 0x6E,
                /* 19F8 */  0x4E, 0x06, 0x0C, 0xC4, 0x37, 0x03, 0x9F, 0xF4,
                /* 1A00 */  0x31, 0x47, 0x03, 0xDF, 0x32, 0x2C, 0x64, 0xAD,
                /* 1A08 */  0x3A, 0x65, 0xE0, 0x64, 0xFC, 0x9D, 0x74, 0xE8,
                /* 1A10 */  0x60, 0xF7, 0x04, 0x98, 0xB1, 0xCF, 0x5F, 0xA8,
                /* 1A18 */  0xC0, 0xE7, 0x2F, 0x80, 0x02, 0xFF, 0xFF, 0xF3,
                /* 1A20 */  0x17, 0x70, 0x1B, 0x3F, 0x6E, 0x16, 0xBE, 0x15,
                /* 1A28 */  0xC0, 0x3C, 0x7F, 0x01, 0xB3, 0xF9, 0x63, 0xCF,
                /* 1A30 */  0x5F, 0xC0, 0x22, 0xD4, 0x91, 0x07, 0x15, 0xE3,
                /* 1A38 */  0xC8, 0x43, 0x41, 0x7C, 0xE4, 0x01, 0xAE, 0xE7,
                /* 1A40 */  0x2F, 0x70, 0x9E, 0x1F, 0x3C, 0x2E, 0x9C, 0x24,
                /* 1A48 */  0x10, 0xFD, 0xFF, 0xCF, 0x0F, 0x78, 0xF0, 0xE2,
                /* 1A50 */  0xB1, 0x75, 0x15, 0xF1, 0x31, 0xC3, 0xE7, 0x92,
                /* 1A58 */  0x53, 0xF3, 0xD0, 0xC0, 0x7D, 0xA3, 0xF0, 0xA1,
                /* 1A60 */  0x07, 0xF0, 0x64, 0xE6, 0xA4, 0x06, 0xE8, 0x39,
                /* 1A68 */  0xF4, 0xC0, 0x5F, 0xA9, 0x0F, 0x3D, 0xFC, 0x50,
                /* 1A70 */  0xE0, 0xD0, 0x27, 0x35, 0x48, 0x33, 0x09, 0x6D,
                /* 1A78 */  0x88, 0x04, 0x63, 0x02, 0xEA, 0xFF, 0x7F, 0x50,
                /* 1A80 */  0xE3, 0x01, 0x29, 0x14, 0xEF, 0x98, 0x81, 0x3A,
                /* 1A88 */  0xAB, 0x19, 0xCC, 0x20, 0x3E, 0xA8, 0x01, 0x7E,
                /* 1A90 */  0xE2, 0x9D, 0x7A, 0xD0, 0x2C, 0xC6, 0x3D, 0xAB,
                /* 1A98 */  0x23, 0x8D, 0x79, 0xDA, 0x35, 0xDF, 0xF8, 0xC8,
                /* 1AA0 */  0xB9, 0xC0, 0x03, 0x3B, 0x5E, 0x4C, 0x88, 0x73,
                /* 1AA8 */  0x05, 0x1D, 0x19, 0xB8, 0x6E, 0x3E, 0x1C, 0xC6,
                /* 1AB0 */  0x07, 0x36, 0xB8, 0x47, 0x1F, 0x70, 0x9D, 0x35,
                /* 1AB8 */  0x80, 0x87, 0x84, 0xE5, 0xE8, 0xAC, 0x01, 0xAE,
                /* 1AC0 */  0x4B, 0x90, 0x61, 0xFD, 0xFF, 0x3F, 0x6B, 0x00,
                /* 1AC8 */  0x4F, 0x54, 0x9F, 0xD7, 0xC0, 0x7D, 0xE1, 0xF5,
                /* 1AD0 */  0x21, 0x01, 0x06, 0x58, 0x88, 0x97, 0x04, 0x76,
                /* 1AD8 */  0xE0, 0xB0, 0xDC, 0x03, 0x07, 0x5A, 0xE2, 0xC3,
                /* 1AE0 */  0x49, 0x87, 0x36, 0x18, 0x27, 0x06, 0x8C, 0xA8,
                /* 1AE8 */  0xC3, 0x1A, 0x3D, 0x42, 0x59, 0x0E, 0x85, 0xC4,
                /* 1AF0 */  0x1C, 0x38, 0x50, 0xF1, 0xCF, 0x08, 0x14, 0xC4,
                /* 1AF8 */  0x80, 0xCE, 0x76, 0x92, 0x00, 0xE5, 0x8D, 0x0C,
                /* 1B00 */  0xBC, 0x30, 0x3E, 0xBC, 0xC1, 0xBC, 0x47, 0x80,
                /* 1B08 */  0xEB, 0xB0, 0x05, 0x86, 0xFF, 0xFF, 0xD9, 0x19,
                /* 1B10 */  0xF0, 0x74, 0x0C, 0x05, 0xEE, 0xE7, 0x10, 0xF0,
                /* 1B18 */  0xB9, 0x39, 0x87, 0x00, 0x5A, 0x8E, 0x50, 0x70,
                /* 1B20 */  0xFE, 0xFF, 0xE7, 0x10, 0xF0, 0x44, 0xFD, 0x44,
                /* 1B28 */  0x27, 0x20, 0x71, 0xC6, 0x2C, 0xB1, 0x2B, 0xA6,
                /* 1B30 */  0x30, 0x3E, 0x57, 0xF8, 0x90, 0x80, 0x1F, 0xF6,
                /* 1B38 */  0x51, 0x1F, 0xEC, 0x71, 0xB1, 0x93, 0x9C, 0xE1,
                /* 1B40 */  0xF8, 0x89, 0xC0, 0xE3, 0x6A, 0x7E, 0x2A, 0x1A,
                /* 1B48 */  0xC5, 0xE9, 0x7B, 0x62, 0x21, 0x99, 0xB4, 0x01,
                /* 1B50 */  0xA2, 0xA4, 0x9C, 0xEA, 0xC8, 0x84, 0x4E, 0xAE,
                /* 1B58 */  0x76, 0x44, 0x5D, 0x1F, 0x0C, 0x93, 0xC0, 0x67,
                /* 1B60 */  0x01, 0x86, 0xC6, 0xA1, 0xB1, 0xC3, 0xF0, 0x25,
                /* 1B68 */  0x21, 0xD8, 0x41, 0xBC, 0x6F, 0xFB, 0x2C, 0xC1,
                /* 1B70 */  0x26, 0x74, 0xAE, 0xE5, 0x5E, 0x1E, 0x74, 0xC7,
                /* 1B78 */  0x8B, 0x1A, 0xA3, 0x39, 0x28, 0x12, 0x60, 0xE8,
                /* 1B80 */  0xA0, 0x39, 0x38, 0x9C, 0xC1, 0x5B, 0x1F, 0x1B,
                /* 1B88 */  0xF1, 0x73, 0x98, 0xE7, 0xCC, 0x00, 0xE3, 0xC5,
                /* 1B90 */  0x78, 0xB0, 0x39, 0x3E, 0x06, 0xDA, 0x33, 0x8E,
                /* 1B98 */  0x34, 0x02, 0xEA, 0xE6, 0x67, 0x78, 0x7E, 0x5B,
                /* 1BA0 */  0x08, 0x55, 0xEB, 0xE8, 0x08, 0x76, 0x24, 0x06,
                /* 1BA8 */  0xF4, 0x4C, 0xF1, 0x00, 0xF0, 0x3C, 0xF9, 0x54,
                /* 1BB0 */  0x91, 0xE0, 0x2C, 0x0E, 0x08, 0x73, 0x44, 0xF0,
                /* 1BB8 */  0x04, 0x5E, 0x2E, 0x7C, 0x54, 0x60, 0xEE, 0x05,
                /* 1BC0 */  0x78, 0x3B, 0x13, 0x68, 0x6C, 0x47, 0x15, 0xE1,
                /* 1BC8 */  0x2C, 0x9E, 0x28, 0xE2, 0xB4, 0x25, 0xC0, 0xDA,
                /* 1BD0 */  0xD1, 0x40, 0x10, 0x81, 0xA2, 0x1C, 0xA1, 0x61,
                /* 1BD8 */  0x62, 0x44, 0x79, 0x4B, 0x89, 0x74, 0x8E, 0x21,
                /* 1BE0 */  0x42, 0x19, 0xCB, 0x40, 0x61, 0x63, 0x9C, 0x5C,
                /* 1BE8 */  0x84, 0xC8, 0xC1, 0x83, 0x9D, 0x4A, 0xFB, 0xA7,
                /* 1BF0 */  0x2E, 0x76, 0x2E, 0xD0, 0x79, 0xC6, 0x91, 0x46,
                /* 1BF8 */  0x83, 0x3A, 0x6F, 0xF3, 0x73, 0xC1, 0xB3, 0x82,
                /* 1C00 */  0xAF, 0x09, 0x06, 0xF9, 0xFF, 0xBF, 0x28, 0xFA,
                /* 1C08 */  0x9B, 0x70, 0x94, 0x1E, 0x3E, 0x3B, 0x92, 0xF8,
                /* 1C10 */  0x64, 0x02, 0xC7, 0x35, 0xA0, 0xAE, 0x07, 0x0F,
                /* 1C18 */  0x17, 0x60, 0x39, 0x9A, 0xC0, 0x1F, 0x8F, 0x4F,
                /* 1C20 */  0x03, 0x3E, 0x01, 0x98, 0xC0, 0xF2, 0x07, 0x81,
                /* 1C28 */  0x1A, 0x99, 0xA1, 0x3D, 0xE6, 0xB7, 0x00, 0x76,
                /* 1C30 */  0x56, 0x38, 0x2C, 0x76, 0xEC, 0xF1, 0x61, 0xC6,
                /* 1C38 */  0xE3, 0x01, 0xFF, 0xA9, 0xFF, 0xAD, 0x20, 0xC2,
                /* 1C40 */  0x9B, 0x83, 0xE7, 0xEB, 0xE3, 0x83, 0x4F, 0x2E,
                /* 1C48 */  0x60, 0x18, 0x93, 0x4F, 0x09, 0x3E, 0x2F, 0xE0,
                /* 1C50 */  0xAE, 0x0B, 0x78, 0x02, 0x8B, 0x3C, 0x48, 0xA0,
                /* 1C58 */  0xC7, 0xC0, 0x0F, 0x02, 0xCF, 0x31, 0x6C, 0x0C,
                /* 1C60 */  0xAF, 0x32, 0x9E, 0xC6, 0x21, 0xF9, 0x88, 0x61,
                /* 1C68 */  0x84, 0xF8, 0x4F, 0x16, 0x4F, 0x1A, 0x3E, 0x8E,
                /* 1C70 */  0x9C, 0xC6, 0x41, 0x9C, 0xD5, 0xFB, 0x80, 0xEF,
                /* 1C78 */  0xBC, 0x72, 0x09, 0xD1, 0x0B, 0x88, 0x54, 0x1E,
                /* 1C80 */  0xB2, 0x50, 0x47, 0x10, 0xEB, 0x39, 0x64, 0x21,
                /* 1C88 */  0xA6, 0x84, 0x3B, 0x75, 0xB0, 0x09, 0xC4, 0x79,
                /* 1C90 */  0xDE, 0xE0, 0xE9, 0xCF, 0x87, 0x74, 0xF0, 0xCE,
                /* 1C98 */  0x4D, 0xA2, 0xDC, 0x63, 0xA2, 0x70, 0x4E, 0x7A,
                /* 1CA0 */  0x06, 0xA2, 0x20, 0x06, 0xF4, 0xFF, 0x3F, 0x06,
                /* 1CA8 */  0x84, 0xAC, 0x9C, 0x07, 0xD0, 0xA3, 0x38, 0x8E,
                /* 1CB0 */  0x27, 0x07, 0x9F, 0x3A, 0x1E, 0x8B, 0xD8, 0x39,
                /* 1CB8 */  0x1B, 0x18, 0xDE, 0x2E, 0x1E, 0x52, 0x7C, 0xB7,
                /* 1CC0 */  0x02, 0x16, 0x97, 0x33, 0xCF, 0x95, 0x07, 0x9E,
                /* 1CC8 */  0x2B, 0x05, 0xF1, 0x5C, 0x1D, 0xE6, 0x6E, 0x85,
                /* 1CD0 */  0xBE, 0xCB, 0x78, 0xAE, 0x3E, 0xF2, 0x9C, 0xAA,
                /* 1CD8 */  0x07, 0xCB, 0xAF, 0x56, 0x80, 0xB9, 0x0B, 0x9E,
                /* 1CE0 */  0xAF, 0x56, 0xE0, 0xE2, 0xFD, 0xFF, 0xBF, 0x5A,
                /* 1CE8 */  0x01, 0xDB, 0x3B, 0xD1, 0xAB, 0x15, 0xD8, 0xAE,
                /* 1CF0 */  0x23, 0xFC, 0x38, 0x84, 0x3F, 0x6D, 0x60, 0x81,
                /* 1CF8 */  0xDE, 0xE4, 0x8C, 0x16, 0xC8, 0xA7, 0x20, 0xDF,
                /* 1D00 */  0xB1, 0x3C, 0x06, 0x7E, 0xEC, 0x25, 0x18, 0xAF,
                /* 1D08 */  0x8D, 0x68, 0x2D, 0x57, 0x10, 0x48, 0x67, 0x81,
                /* 1D10 */  0x97, 0x80, 0x27, 0x04, 0x76, 0x01, 0x01, 0x4C,
                /* 1D18 */  0xFF, 0xFF, 0x2F, 0x20, 0x00, 0x1F, 0xCE, 0x8A,
                /* 1D20 */  0xE0, 0x1B, 0xB5, 0xCF, 0x8A, 0x80, 0x9B, 0x0B,
                /* 1D28 */  0x08, 0xBC, 0xB3, 0x06, 0x03, 0xF9, 0xFF, 0xBF,
                /* 1D30 */  0xC5, 0xC5, 0x3B, 0xC8, 0x68, 0xEF, 0x82, 0x46,
                /* 1D38 */  0x0F, 0xFA, 0x30, 0xE1, 0xE3, 0x14, 0x9C, 0x63,
                /* 1D40 */  0x31, 0x3B, 0x4E, 0x01, 0x9B, 0x23, 0x04, 0xEE,
                /* 1D48 */  0xF6, 0x01, 0xAC, 0xEF, 0x0F, 0xEC, 0xF6, 0x01,
                /* 1D50 */  0x2C, 0x4F, 0x2E, 0xB8, 0xDB, 0x07, 0xF0, 0xBF,
                /* 1D58 */  0xBB, 0xB0, 0xDB, 0x87, 0xFF, 0xFF, 0xC7, 0x29,
                /* 1D60 */  0x60, 0x0D, 0xE9, 0xE3, 0x14, 0xE0, 0xE4, 0x3E,
                /* 1D68 */  0xCF, 0x8F, 0x53, 0xC0, 0xED, 0x0A, 0x02, 0xE3,
                /* 1D70 */  0x38, 0x05, 0xE6, 0x0B, 0x08, 0x30, 0xF8, 0xFF,
                /* 1D78 */  0x5F, 0x40, 0x00, 0x1E, 0x1E, 0xA7, 0xC0, 0x77,
                /* 1D80 */  0x4E, 0xF6, 0x05, 0x04, 0x38, 0xFC, 0xFF, 0x8F,
                /* 1D88 */  0x53, 0xC0, 0xE7, 0x02, 0x02, 0xFF, 0x38, 0x05,
                /* 1D90 */  0x57, 0xE1, 0x71, 0x0A, 0x24, 0xC3, 0x7F, 0xA4,
                /* 1D98 */  0x3E, 0x9D, 0x37, 0x0D, 0x1F, 0x47, 0xA2, 0xBF,
                /* 1DA0 */  0x7D, 0x00, 0xFC, 0xF9, 0xFF, 0xDF, 0x3E, 0x00,
                /* 1DA8 */  0x7B, 0x42, 0x6E, 0x1F, 0xA0, 0x83, 0xE5, 0xB7,
                /* 1DB0 */  0x0F, 0xE0, 0x79, 0x0C, 0xF0, 0xED, 0x03, 0x38,
                /* 1DB8 */  0x9C, 0x36, 0xD8, 0x30, 0x0C, 0x15, 0xE7, 0x79,
                /* 1DC0 */  0x83, 0x83, 0xC6, 0x79, 0x99, 0xC2, 0x5E, 0x40,
                /* 1DC8 */  0x70, 0x1C, 0x56, 0x73, 0xD4, 0x85, 0x74, 0x03,
                /* 1DD0 */  0x08, 0xF1, 0xC8, 0xFF, 0x25, 0x1F, 0x22, 0xC1,
                /* 1DD8 */  0xFF, 0xFF, 0xFD, 0x03, 0xE0, 0xBE, 0x94, 0xF5,
                /* 1DE0 */  0xE8, 0xFF, 0x7F, 0xFF, 0x00, 0xD7, 0xDD, 0xC0,
                /* 1DE8 */  0xF7, 0x0F, 0xE0, 0x3A, 0x7E, 0x9F, 0x75, 0x81,
                /* 1DF0 */  0xC3, 0x70, 0x03, 0x3D, 0x4C, 0x05, 0x79, 0xD9,
                /* 1DF8 */  0x88, 0xF7, 0x08, 0xF2, 0xB6, 0x11, 0x3B, 0x5E,
                /* 1E00 */  0xCC, 0x43, 0x7A, 0x0C, 0x31, 0xBA, 0xA7, 0x60,
                /* 1E08 */  0x54, 0x5F, 0x40, 0xE0, 0x9D, 0xA8, 0x60, 0x5C,
                /* 1E10 */  0x40, 0x00, 0x93, 0xFF, 0xFF, 0x0B, 0x08, 0xC0,
                /* 1E18 */  0x36, 0x0F, 0x17, 0x10, 0x40, 0xC8, 0xFF, 0xFF,
                /* 1E20 */  0x40, 0x05, 0x96, 0x0B, 0x08, 0xB8, 0xEE, 0xEF,
                /* 1E28 */  0xB8, 0x63, 0x81, 0x55, 0x9D, 0xA8, 0x20, 0x5D,
                /* 1E30 */  0x81, 0xB1, 0x33, 0xC0, 0x5E, 0x42, 0xC0, 0x78,
                /* 1E38 */  0x92, 0xC0, 0x5D, 0x42, 0x80, 0xF5, 0x35, 0x82,
                /* 1E40 */  0x5D, 0x42, 0x80, 0xE5, 0x01, 0x06, 0x77, 0x09,
                /* 1E48 */  0x01, 0xFF, 0xFF, 0xFF, 0x12, 0x02, 0xFE, 0x2B,
                /* 1E50 */  0x0C, 0xBB, 0x84, 0x00, 0x13, 0x19, 0x97, 0x10,
                /* 1E58 */  0xD0, 0x81, 0xFB, 0x12, 0x02, 0x5C, 0x67, 0xF1,
                /* 1E60 */  0x54, 0x05, 0x2C, 0xAE, 0xF0, 0xF8, 0x23, 0x08,
                /* 1E68 */  0x8C, 0x2B, 0x08, 0xAC, 0x33, 0x15, 0x8C, 0x2B,
                /* 1E70 */  0x08, 0xD8, 0xFF, 0xFF, 0xE7, 0x2A, 0x80, 0xD9,
                /* 1E78 */  0x57, 0x10, 0xB0, 0xFC, 0xFF, 0xAF, 0x20, 0x18,
                /* 1E80 */  0x13, 0x57, 0x10, 0x40, 0xCB, 0xB9, 0x0A, 0xFE,
                /* 1E88 */  0x15, 0x04, 0x7C, 0x23, 0xB5, 0xA6, 0x53, 0x15,
                /* 1E90 */  0xA4, 0x73, 0x3D, 0xBB, 0xD6, 0xE3, 0x2F, 0x8A,
                /* 1E98 */  0xE0, 0x3C, 0x54, 0x01, 0xA6, 0xFE, 0xFF, 0x87,
                /* 1EA0 */  0x2A, 0x80, 0x1F, 0x17, 0x79, 0xF0, 0xA9, 0xB8,
                /* 1EA8 */  0xC8, 0x03, 0x5A, 0x0E, 0x55, 0xF0, 0xFE, 0xFF,
                /* 1EB0 */  0x37, 0x10, 0x7E, 0xDE, 0x60, 0x58, 0xBE, 0x83,
                /* 1EB8 */  0xF8, 0x0E, 0x10, 0x3E, 0xCC, 0x2B, 0x07, 0xFE,
                /* 1EC0 */  0x9E, 0x88, 0xBF, 0x82, 0xF0, 0x53, 0x15, 0x8C,
                /* 1EC8 */  0x2B, 0x08, 0x30, 0x39, 0x54, 0x01, 0xFC, 0xFA,
                /* 1ED0 */  0xFF, 0x1F, 0xAA, 0x80, 0xE9, 0x15, 0x04, 0x7C,
                /* 1ED8 */  0xE3, 0xF4, 0x15, 0x04, 0x70, 0x72, 0xA8, 0x82,
                /* 1EE0 */  0x7F, 0x05, 0x01, 0x8F, 0xBE, 0x2B, 0x08, 0x4A,
                /* 1EE8 */  0x12, 0x84, 0xF4, 0x9C, 0xAA, 0xA0, 0x9E, 0x05,
                /* 1EF0 */  0x62, 0x9F, 0xED, 0x13, 0x08, 0x3B, 0x53, 0x01,
                /* 1EF8 */  0x9B, 0xFF, 0xFF, 0xB9, 0x17, 0xE0, 0xF6, 0x4D,
                /* 1F00 */  0xC3, 0x17, 0x10, 0xF8, 0xFF, 0xFF, 0x73, 0x2F,
                /* 1F08 */  0xE0, 0xE4, 0x02, 0x02, 0xE7, 0xC2, 0x81, 0xB9,
                /* 1F10 */  0x24, 0xB2, 0xFB, 0x07, 0x9C, 0x23, 0x15, 0xBC,
                /* 1F18 */  0xFB, 0x07, 0xB8, 0x0F, 0x54, 0x80, 0xDF, 0xFF,
                /* 1F20 */  0xFF, 0xA1, 0x17, 0x60, 0x86, 0x8D, 0x43, 0x2F,
                /* 1F28 */  0xA0, 0xED, 0xFE, 0x01, 0x8E, 0x1B, 0x22, 0xE6,
                /* 1F30 */  0xFF, 0x7F, 0xE8, 0x85, 0xAB, 0x11, 0x46, 0x20,
                /* 1F38 */  0x0F, 0xBD, 0x00, 0xBB, 0xFF, 0xFF, 0x37, 0x44,
                /* 1F40 */  0xE0, 0xA7, 0xE3, 0xD0, 0x0B, 0x68, 0x3B, 0x6F,
                /* 1F48 */  0xB0, 0x43, 0x2F, 0xF0, 0xB8, 0x82, 0x00, 0x93,
                /* 1F50 */  0x43, 0x15, 0xF0, 0xF9, 0xFF, 0x1F, 0x7A, 0x01,
                /* 1F58 */  0xA6, 0xFA, 0xB8, 0x82, 0x00, 0xA9, 0xFF, 0xFF,
                /* 1F60 */  0xA1, 0x17, 0x18, 0x5E, 0x41, 0xC0, 0x73, 0xE8,
                /* 1F68 */  0x05, 0xCB, 0x1C, 0x18, 0xD8, 0x19, 0x44, 0x3B,
                /* 1F70 */  0x56, 0x76, 0xA6, 0x02, 0xD8, 0xF3, 0xFF, 0x3F,
                /* 1F78 */  0xF4, 0x02, 0xAE, 0xC7, 0xE2, 0x43, 0x2F, 0xE0,
                /* 1F80 */  0xEC, 0x02, 0x02, 0xE7, 0xC2, 0x81, 0x39, 0xF4,
                /* 1F88 */  0x82, 0xEB, 0xFE, 0x01, 0xE3, 0xFF, 0x7F, 0xE8,
                /* 1F90 */  0x05, 0xF8, 0xFF, 0xFF, 0xBF, 0x7F, 0x80, 0xC9,
                /* 1F98 */  0xC8, 0xA1, 0x17, 0xD0, 0x76, 0xFF, 0x00, 0x87,
                /* 1FA0 */  0xB2, 0xF3, 0x14, 0xA8, 0xCE, 0x00, 0x31, 0x2A,
                /* 1FA8 */  0x1E, 0x2D, 0x39, 0x4F, 0x01, 0x0E, 0xFF, 0xFF,
                /* 1FB0 */  0xE7, 0x29, 0x80, 0x37, 0xEB, 0xF1, 0xFD, 0x03,
                /* 1FB8 */  0x5C, 0x4A, 0xEE, 0x1F, 0x40, 0x57, 0xF0, 0xFD,
                /* 1FC0 */  0x03, 0x34, 0xFF, 0xFF, 0xF3, 0x14, 0x78, 0x6E,
                /* 1FC8 */  0x1B, 0x98, 0xCB, 0x07, 0xCC, 0xC3, 0x14, 0xBC,
                /* 1FD0 */  0xCB, 0x07, 0xB8, 0x0F, 0x53, 0x00, 0xBF, 0xFE,
                /* 1FD8 */  0xFF, 0x87, 0x29, 0x60, 0x7A, 0xF9, 0x00, 0xDF,
                /* 1FE0 */  0x75, 0xC1, 0x97, 0x0F, 0xC0, 0xC9, 0x61, 0x0A,
                /* 1FE8 */  0x3C, 0x97, 0x0F, 0xBC, 0xF8, 0xAB, 0x3B, 0x5A,
                /* 1FF0 */  0xE0, 0x49, 0x0A, 0x92, 0xCB, 0x73, 0xAF, 0x10,
                /* 1FF8 */  0x02, 0x1D, 0x47, 0xD7, 0xF0, 0x82, 0x8A, 0x74,
                /* 2000 */  0xD4, 0x8F, 0x0B, 0x4C, 0x0A, 0xB0, 0xAE, 0x1F,
                /* 2008 */  0x5C, 0x04, 0x85, 0x44, 0xD0, 0xE8, 0x0C, 0xC1,
                /* 2010 */  0x63, 0x9F, 0x13, 0x28, 0x88, 0x01, 0x9D, 0xE9,
                /* 2018 */  0x70, 0xE6, 0xB1, 0xD0, 0xEB, 0x07, 0xBC, 0x04,
                /* 2020 */  0x10, 0x92, 0x20, 0xE0, 0xFF, 0x7F, 0xFD, 0x80,
                /* 2028 */  0x79, 0x82, 0xC0, 0x5F, 0x0C, 0x4E, 0xB6, 0xD8,
                /* 2030 */  0x13, 0x03, 0xBD, 0x85, 0xC0, 0x9C, 0xA6, 0xEF,
                /* 2038 */  0x11, 0xE0, 0x10, 0x77, 0xA3, 0x02, 0x48, 0x24,
                /* 2040 */  0xE9, 0x14, 0x02, 0xBA, 0x01, 0xFB, 0x14, 0x82,
                /* 2048 */  0xFD, 0xFF, 0x9F, 0x42, 0x80, 0x5D, 0x84, 0x1B,
                /* 2050 */  0x15, 0xD0, 0xB8, 0x75, 0xC4, 0x6A, 0xFE, 0x0E,
                /* 2058 */  0x22, 0xDC, 0x58, 0xF1, 0x0E, 0xE8, 0x05, 0xDE,
                /* 2060 */  0x27, 0x0F, 0xFC, 0x2D, 0x1E, 0x16, 0x41, 0xED,
                /* 2068 */  0xC7, 0x11, 0xB4, 0xBE, 0xAB, 0x15, 0xA4, 0xE3,
                /* 2070 */  0x08, 0x4C, 0x25, 0xC7, 0x11, 0x94, 0x06, 0x0A,
                /* 2078 */  0x5D, 0xAE, 0x00, 0x9B, 0xFF, 0xFF, 0x7B, 0x08,
                /* 2080 */  0x7C, 0x29, 0x37, 0x19, 0x54, 0xF8, 0xB9, 0x52,
                /* 2088 */  0x10, 0xCF, 0xD5, 0xC1, 0x6E, 0x32, 0xE8, 0x7B,
                /* 2090 */  0x08, 0xBC, 0x10, 0x57, 0x19, 0x7A, 0x0F, 0x01,
                /* 2098 */  0xD7, 0x5D, 0x06, 0x77, 0x1D, 0x81, 0x7B, 0x98,
                /* 20A0 */  0x01, 0xD7, 0x6D, 0x04, 0x78, 0xDF, 0xD2, 0x7C,
                /* 20A8 */  0x1B, 0x01, 0x9C, 0xDC, 0x38, 0xFC, 0xFF, 0xBF,
                /* 20B0 */  0x8D, 0x00, 0x2F, 0xA5, 0xB7, 0x11, 0xB4, 0xA6,
                /* 20B8 */  0xBB, 0x16, 0xA4, 0xB1, 0x07, 0x39, 0x2D, 0xA3,
                /* 20C0 */  0xB1, 0x69, 0x19, 0xCB, 0x04, 0xBE, 0x06, 0x03,
                /* 20C8 */  0x3C, 0xFB, 0xFF, 0x9F, 0xB2, 0x00, 0x23, 0x62,
                /* 20D0 */  0xEE, 0x21, 0xA0, 0xD3, 0x72, 0x0F, 0x01, 0xBA,
                /* 20D8 */  0xE2, 0x4F, 0x59, 0x40, 0xE3, 0xBC, 0xC1, 0xE1,
                /* 20E0 */  0x0E, 0x2D, 0xC2, 0xD3, 0xA3, 0x51, 0x9E, 0x0B,
                /* 20E8 */  0x0C, 0xF5, 0x60, 0xEF, 0x43, 0x07, 0xEE, 0x12,
                /* 20F0 */  0x02, 0xF3, 0x88, 0x05, 0xE3, 0x12, 0x02, 0xBE,
                /* 20F8 */  0xFF, 0xFF, 0x75, 0x18, 0xE0, 0xF8, 0x25, 0x04,
                /* 2100 */  0xEE, 0xFF, 0xFF, 0x12, 0x02, 0xC7, 0xCB, 0x25,
                /* 2108 */  0x04, 0xD0, 0x72, 0xB8, 0x82, 0x7F, 0x09, 0x01,
                /* 2110 */  0x5F, 0x06, 0x1B, 0xA3, 0x61, 0x41, 0x06, 0x2E,
                /* 2118 */  0x89, 0xCB, 0xA6, 0x30, 0xBE, 0x5B, 0xF8, 0xA4,
                /* 2120 */  0x80, 0x1F, 0xFB, 0x79, 0x1C, 0xF1, 0xC1, 0xB1,
                /* 2128 */  0xC3, 0xBE, 0xE1, 0xF8, 0xB1, 0xC0, 0x83, 0x7B,
                /* 2130 */  0xF3, 0x3A, 0x8B, 0x53, 0x62, 0xF3, 0x09, 0xC9,
                /* 2138 */  0x2E, 0x08, 0x3E, 0x01, 0x22, 0x20, 0x74, 0x32,
                /* 2140 */  0x38, 0xB8, 0x63, 0x7A, 0xF2, 0xF2, 0xB0, 0x8F,
                /* 2148 */  0xCF, 0x04, 0x3E, 0x10, 0x30, 0x34, 0x0E, 0x8D,
                /* 2150 */  0x1D, 0x86, 0x6F, 0x0A, 0xC1, 0x0E, 0xE2, 0x30,
                /* 2158 */  0x5E, 0xFF, 0xD9, 0xA9, 0xCF, 0x33, 0x2C, 0xF7,
                /* 2160 */  0x06, 0xA1, 0xC1, 0x47, 0x8D, 0xD1, 0x1C, 0x14,
                /* 2168 */  0x39, 0x4E, 0x78, 0xFC, 0xE0, 0x38, 0x3D, 0x9C,
                /* 2170 */  0xB4, 0xD1, 0x8E, 0xD9, 0x93, 0xF6, 0xFD, 0xC0,
                /* 2178 */  0x28, 0x01, 0xFF, 0xFF, 0xF1, 0x62, 0x1C, 0x8A,
                /* 2180 */  0x2F, 0x00, 0xEC, 0xFA, 0x10, 0x2E, 0xCA, 0xF3,
                /* 2188 */  0x42, 0x94, 0x5A, 0x67, 0x46, 0x40, 0x0F, 0x80,
                /* 2190 */  0x01, 0xBD, 0x92, 0x1C, 0xFD, 0x63, 0xC5, 0x4B,
                /* 2198 */  0x49, 0x02, 0x4F, 0xE1, 0x68, 0x30, 0x87, 0x04,
                /* 21A0 */  0xA3, 0xBF, 0x5E, 0xF8, 0xB0, 0xC0, 0xDC, 0x0B,
                /* 21A8 */  0xF0, 0x36, 0x2D, 0x41, 0x44, 0x88, 0xFC, 0x4A,
                /* 21B0 */  0x71, 0x36, 0xA1, 0xDB, 0x1A, 0x9B, 0x06, 0xF7,
                /* 21B8 */  0xE6, 0xD6, 0x18, 0x8A, 0x40, 0xDE, 0xE1, 0x6A,
                /* 21C0 */  0x46, 0x15, 0xCA, 0x43, 0x61, 0x98, 0x73, 0x08,
                /* 21C8 */  0x18, 0x25, 0x62, 0xB4, 0xA8, 0x81, 0x1F, 0xBF,
                /* 21D0 */  0x63, 0x1B, 0x34, 0x50, 0xAC, 0x08, 0x47, 0xD0,
                /* 21D8 */  0xFE, 0x20, 0x48, 0xB4, 0x43, 0x81, 0xCE, 0x8F,
                /* 21E0 */  0x8E, 0x34, 0x1A, 0xD4, 0x91, 0xC3, 0x07, 0x03,
                /* 21E8 */  0xDF, 0x69, 0x3C, 0xB1, 0x23, 0x7C, 0x55, 0xF0,
                /* 21F0 */  0x6D, 0xC1, 0x3A, 0x4F, 0x04, 0x64, 0xEC, 0x6C,
                /* 21F8 */  0xD8, 0x3E, 0x9B, 0xC0, 0x39, 0xDF, 0x3D, 0xE5,
                /* 2200 */  0xF9, 0x78, 0x01, 0x96, 0xC3, 0x09, 0xFC, 0xF1,
                /* 2208 */  0xF8, 0x28, 0xE0, 0x8B, 0x10, 0x97, 0x3F, 0x08,
                /* 2210 */  0xD4, 0xED, 0x87, 0x9F, 0x2D, 0x7C, 0x23, 0xF0,
                /* 2218 */  0x41, 0xE1, 0xB0, 0xD8, 0x29, 0xD3, 0xA7, 0x19,
                /* 2220 */  0x8F, 0x07, 0xFC, 0xB7, 0x42, 0x23, 0xBC, 0x36,
                /* 2228 */  0x78, 0xBE, 0x3E, 0x2E, 0xF8, 0xEC, 0x02, 0x86,
                /* 2230 */  0xA3, 0x02, 0xBF, 0x29, 0xB0, 0xC3, 0x40, 0x0C,
                /* 2238 */  0xFF, 0xFF, 0xE7, 0xC5, 0x4E, 0x0E, 0x4C, 0xE4,
                /* 2240 */  0x19, 0x02, 0x3D, 0x02, 0x7E, 0x0C, 0x78, 0x8E,
                /* 2248 */  0x61, 0x23, 0x78, 0x95, 0xF1, 0x24, 0x0E, 0xC8,
                /* 2250 */  0xA7, 0x0B, 0x23, 0x84, 0x7F, 0xA8, 0x78, 0xC8,
                /* 2258 */  0xF0, 0x29, 0xE1, 0x8C, 0xCE, 0xE1, 0x9C, 0x1E,
                /* 2260 */  0x7D, 0x98, 0x2E, 0x15, 0xE7, 0x01, 0x16, 0xF1,
                /* 2268 */  0x72, 0x85, 0xE2, 0x70, 0xAC, 0x13, 0x23, 0x62,
                /* 2270 */  0x4A, 0xD8, 0x59, 0x3C, 0x48, 0x1A, 0x22, 0x81,
                /* 2278 */  0x63, 0xDC, 0x85, 0x51, 0x01, 0x28, 0x14, 0xE0,
                /* 2280 */  0x40, 0x8B, 0x92, 0x7C, 0xC1, 0xA2, 0x20, 0x1E,
                /* 2288 */  0x88, 0xB3, 0x1C, 0x68, 0x7D, 0x6A, 0x40, 0xCF,
                /* 2290 */  0x12, 0x7F, 0x72, 0xF0, 0xC4, 0x7C, 0x92, 0xF1,
                /* 2298 */  0xCC, 0x5E, 0xAE, 0xC0, 0x7B, 0x93, 0x05, 0xD7,
                /* 22A0 */  0x5D, 0xD7, 0xB3, 0xC2, 0xE9, 0xB8, 0xAF, 0x90,
                /* 22A8 */  0x3B, 0x88, 0x27, 0xE5, 0x8B, 0x82, 0x87, 0x04,
                /* 22B0 */  0xD6, 0xBB, 0x2E, 0xF8, 0x8E, 0x5F, 0x60, 0xF9,
                /* 22B8 */  0xFF, 0x1F, 0xBF, 0xC0, 0xAF, 0xE4, 0xF8, 0x85,
                /* 22C0 */  0x1E, 0xC0, 0xA1, 0x3E, 0x37, 0x18, 0xE2, 0x50,
                /* 22C8 */  0xCE, 0xD5, 0xB7, 0x0D, 0x1F, 0xBF, 0xC0, 0x3D,
                /* 22D0 */  0x14, 0x1F, 0xBF, 0xC0, 0x73, 0x84, 0x79, 0x7E,
                /* 22D8 */  0x79, 0xFC, 0x02, 0x2E, 0x12, 0x8E, 0x5F, 0xA0,
                /* 22E0 */  0xBB, 0x18, 0xF0, 0xE3, 0x17, 0xF0, 0x44, 0xF5,
                /* 22E8 */  0x79, 0x09, 0x1C, 0x07, 0x25, 0x3C, 0xC8, 0xCB,
                /* 22F0 */  0x08, 0x3F, 0x25, 0xFD, 0xFF, 0xC3, 0xB0, 0x63,
                /* 22F8 */  0x13, 0xBB, 0x33, 0xB1, 0x0B, 0xD1, 0xD1, 0xBD,
                /* 2300 */  0xEE, 0x9D, 0xF2, 0x93, 0x17, 0x13, 0x78, 0x42,
                /* 2308 */  0x41, 0x1D, 0xB7, 0x2C, 0xEA, 0x84, 0x82, 0xB8,
                /* 2310 */  0x8A, 0xC0, 0x1D, 0xBF, 0x8E, 0x28, 0xA8, 0xF0,
                /* 2318 */  0x24, 0x3A, 0xBD, 0xFB, 0x08, 0xC1, 0xE3, 0x8E,
                /* 2320 */  0x9D, 0x82, 0x18, 0xD0, 0x47, 0x14, 0xC0, 0xCA,
                /* 2328 */  0x01, 0x04, 0xB0, 0x78, 0x9C, 0x84, 0xFF, 0xFF,
                /* 2330 */  0x3F, 0x80, 0x00, 0x2E, 0x46, 0xED, 0x03, 0x08,
                /* 2338 */  0xE0, 0x53, 0xD1, 0x01, 0x04, 0x75, 0x50, 0xB0,
                /* 2340 */  0x8A, 0x03, 0x08, 0xE2, 0xD4, 0x84, 0xCD, 0x7E,
                /* 2348 */  0x2F, 0x46, 0xA5, 0x26, 0x51, 0xEA, 0xE3, 0x03,
                /* 2350 */  0x2A, 0xE7, 0x11, 0x81, 0x82, 0x18, 0xD0, 0x17,
                /* 2358 */  0x29, 0xE0, 0xF2, 0xFF, 0xBF, 0x78, 0x00, 0x6C,
                /* 2360 */  0x85, 0xF4, 0xC5, 0x03, 0xD8, 0xFC, 0xFF, 0x2F,
                /* 2368 */  0x1E, 0x80, 0x81, 0x68, 0x0F, 0x0A, 0x5F, 0x87,
                /* 2370 */  0xA9, 0xC8, 0x1B, 0x31, 0xA0, 0x7E, 0x16, 0x0F,
                /* 2378 */  0xBD, 0x0F, 0x00, 0x46, 0x37, 0xDC, 0x33, 0x82,
                /* 2380 */  0x8F, 0xC4, 0xB0, 0x6F, 0xC4, 0xF0, 0xCF, 0xC0,
                /* 2388 */  0x1E, 0xD8, 0xC9, 0x84, 0x7D, 0xA0, 0x08, 0xF3,
                /* 2390 */  0x28, 0xFC, 0x20, 0xEC, 0x03, 0xC6, 0x69, 0xBD,
                /* 2398 */  0x11, 0x1B, 0xEA, 0xB8, 0x5E, 0x60, 0xA3, 0x44,
                /* 23A0 */  0xFC, 0xFF, 0x87, 0x8A, 0x73, 0x84, 0x51, 0x42,
                /* 23A8 */  0x84, 0x0B, 0x1B, 0x28, 0x66, 0x84, 0xD6, 0x30,
                /* 23B0 */  0x85, 0x10, 0x27, 0xA8, 0x6F, 0xC4, 0x2C, 0xDC,
                /* 23B8 */  0x8D, 0x18, 0xA0, 0xC9, 0x05, 0x18, 0x77, 0x6C,
                /* 23C0 */  0x81, 0x77, 0x54, 0xF0, 0x4D, 0x01, 0x77, 0x24,
                /* 23C8 */  0x86, 0x71, 0x25, 0x06, 0x26, 0x62, 0xDF, 0x03,
                /* 23D0 */  0x3A, 0xE8, 0x58, 0xE8, 0x95, 0x18, 0x2D, 0x6B,
                /* 23D8 */  0xBD, 0x3A, 0xFF, 0xBF, 0xC7, 0xF8, 0xFF, 0x3F,
                /* 23E0 */  0x27, 0xFC, 0x38, 0xCF, 0xE8, 0xFD, 0x80, 0xC9,
                /* 23E8 */  0xB8, 0x20, 0xA2, 0x28, 0x7C, 0x41, 0x04, 0xDF,
                /* 23F0 */  0x05, 0xE2, 0x24, 0x5E, 0x58, 0x7C, 0x41, 0x04,
                /* 23F8 */  0xFC, 0x9D, 0x8C, 0x3C, 0x5C, 0x1E, 0x7A, 0xB8,
                /* 2400 */  0x14, 0xC4, 0xC3, 0x75, 0xA0, 0x83, 0x15, 0x7A,
                /* 2408 */  0xB8, 0x70, 0x2E, 0x01, 0x98, 0xA3, 0x15, 0xE0,
                /* 2410 */  0xE4, 0xFF, 0x7F, 0xB4, 0x02, 0x8B, 0x90, 0x2B,
                /* 2418 */  0x2F, 0xA0, 0xE7, 0x18, 0xE0, 0x03, 0x11, 0x38,
                /* 2420 */  0x86, 0xF0, 0xB6, 0xC1, 0xEE, 0x42, 0x70, 0x70,
                /* 2428 */  0x5E, 0x0D, 0x38, 0xCA, 0xDB, 0x15, 0x7C, 0xB1,
                /* 2430 */  0x2B, 0xF2, 0xD1, 0x8A, 0x9E, 0x44, 0x7C, 0xBA,
                /* 2438 */  0x02, 0xCC, 0xFD, 0xFF, 0x47, 0x0F, 0x86, 0xF3,
                /* 2440 */  0x8F, 0x87, 0xE3, 0x09, 0x63, 0xE6, 0xEF, 0x1B,
                /* 2448 */  0x80, 0x21, 0x7D, 0x5B, 0x63, 0xD3, 0x7F, 0xE4,
                /* 2450 */  0x61, 0x97, 0x2B, 0xD8, 0xA7, 0x2B, 0xF8, 0xE3,
                /* 2458 */  0x3A, 0x91, 0x08, 0xEF, 0x53, 0x61, 0xA3, 0x3C,
                /* 2460 */  0x4F, 0xF9, 0x6A, 0xE5, 0x23, 0x4A, 0x84, 0x13,
                /* 2468 */  0x7A, 0xBA, 0x62, 0xD3, 0x7B, 0xBF, 0x32, 0xCE,
                /* 2470 */  0x49, 0x84, 0x7C, 0xC1, 0x88, 0x12, 0xED, 0xFD,
                /* 2478 */  0xCA, 0xE3, 0x88, 0x10, 0xED, 0xE9, 0x22, 0x56,
                /* 2480 */  0xC4, 0xF8, 0xAF, 0x57, 0x3E, 0x5D, 0xB1, 0x90,
                /* 2488 */  0xA7, 0x2B, 0x80, 0x24, 0xFF, 0xFF, 0x61, 0xB0,
                /* 2490 */  0x93, 0x0B, 0xFC, 0x13, 0x03, 0x3F, 0x08, 0xBC,
                /* 2498 */  0x25, 0x78, 0x7E, 0xAF, 0xA3, 0x86, 0x7F, 0x43,
                /* 24A0 */  0x8A, 0xF3, 0x82, 0xE0, 0xBB, 0x0E, 0x76, 0x1E,
                /* 24A8 */  0xEC, 0x84, 0x05, 0x4C, 0x62, 0xAF, 0x40, 0xC3,
                /* 24B0 */  0xB5, 0xEE, 0x37, 0x82, 0x4E, 0x58, 0x38, 0xDD,
                /* 24B8 */  0x2F, 0x03, 0x1D, 0x29, 0xD8, 0xAC, 0xF8, 0xB9,
                /* 24C0 */  0xE2, 0xF1, 0x02, 0x83, 0x93, 0xC0, 0x3A, 0x0F,
                /* 24C8 */  0x5C, 0x74, 0x00, 0x56, 0x08, 0x23, 0x7D, 0x24,
                /* 24D0 */  0x3A, 0x23, 0x71, 0x45, 0x07, 0x2D, 0x0A, 0xE2,
                /* 24D8 */  0xA3, 0x83, 0xA3, 0x9C, 0x91, 0xD0, 0xA3, 0xF3,
                /* 24E0 */  0x89, 0x85, 0x1F, 0x66, 0x1E, 0x66, 0x3D, 0xAE,
                /* 24E8 */  0x93, 0x7E, 0xBD, 0x31, 0xC1, 0xB3, 0xCE, 0x03,
                /* 24F0 */  0x16, 0x78, 0xEF, 0x2F, 0xBE, 0x20, 0x81, 0x29,
                /* 24F8 */  0xD4, 0x31, 0xCC, 0xA3, 0xA5, 0xA3, 0xF2, 0xC0,
                /* 2500 */  0x3C, 0x2A, 0x3C, 0xC1, 0x04, 0x37, 0x2B, 0xCF,
                /* 2508 */  0x09, 0xEA, 0x25, 0x0A, 0x3F, 0x98, 0xC7, 0x81,
                /* 2510 */  0xB7, 0x05, 0x0F, 0xC8, 0xFF, 0xFF, 0xA9, 0xC1,
                /* 2518 */  0x3A, 0x20, 0xF1, 0xAB, 0x18, 0x78, 0x8E, 0x5C,
                /* 2520 */  0x1E, 0x1A, 0x4E, 0xC5, 0x21, 0x86, 0xDC, 0x1A,
                /* 2528 */  0x0C, 0x71, 0x60, 0x60, 0xA6, 0xF1, 0xC0, 0x60,
                /* 2530 */  0x5D, 0xDD, 0xF9, 0x95, 0x0D, 0xD8, 0xEE, 0xDA,
                /* 2538 */  0xF7, 0x07, 0x1E, 0x79, 0xE6, 0x14, 0xC4, 0x73,
                /* 2540 */  0x72, 0x1C, 0x08, 0x39, 0xB9, 0x3F, 0xA0, 0xEF,
                /* 2548 */  0x51, 0x1E, 0xD0, 0x83, 0x87, 0x87, 0xF4, 0x6C,
                /* 2550 */  0x8D, 0xB9, 0xB1, 0x81, 0x1D, 0xCA, 0x37, 0x36,
                /* 2558 */  0xF0, 0x1C, 0x7A, 0x9E, 0x7A, 0xDE, 0xD8, 0xE0,
                /* 2560 */  0xFF, 0xFF, 0x6F, 0x6C, 0xE0, 0x8A, 0x0D, 0xA1,
                /* 2568 */  0x1B, 0x1B, 0xE0, 0x66, 0x8E, 0x2F, 0x59, 0x60,
                /* 2570 */  0xB9, 0xBD, 0xB0, 0x43, 0x16, 0xEE, 0xFA, 0x02,
                /* 2578 */  0x43, 0xFB, 0x5D, 0x06, 0xAD, 0x7D, 0xB1, 0x3A,
                /* 2580 */  0xBF, 0xB1, 0xBB, 0x0C, 0x4C, 0xAD, 0x77, 0x19,
                /* 2588 */  0x94, 0x4A, 0x18, 0xE5, 0x39, 0x3C, 0xA0, 0x12,
                /* 2590 */  0xC0, 0x08, 0xCE, 0x20, 0x1E, 0xBF, 0xEF, 0x32,
                /* 2598 */  0x80, 0x87, 0xFF, 0xFF, 0x5D, 0x06, 0x70, 0x76,
                /* 25A0 */  0x47, 0x01, 0x16, 0xA1, 0xEE, 0x05, 0xA8, 0x18,
                /* 25A8 */  0xF7, 0x02, 0x0A, 0xE2, 0x81, 0xF9, 0x8E, 0x02,
                /* 25B0 */  0x3C, 0xAF, 0x0E, 0xBE, 0xA3, 0x80, 0xEF, 0x66,
                /* 25B8 */  0x80, 0xBF, 0x72, 0xF8, 0x2C, 0x84, 0x21, 0x18,
                /* 25C0 */  0xE2, 0x60, 0x40, 0x07, 0x05, 0x96, 0xFF, 0xFF,
                /* 25C8 */  0x65, 0x08, 0xC6, 0x75, 0x06, 0xEE, 0xCD, 0x00,
                /* 25D0 */  0x5C, 0xB7, 0x19, 0xE0, 0x7D, 0x6E, 0xE2, 0xB7,
                /* 25D8 */  0x19, 0xC0, 0xC7, 0x75, 0x96, 0xDF, 0x66, 0xE0,
                /* 25E0 */  0x2A, 0xB4, 0xE9, 0x53, 0xA3, 0x51, 0xAB, 0x06,
                /* 25E8 */  0x65, 0x6A, 0x94, 0x69, 0x50, 0xAB, 0x4F, 0xA5,
                /* 25F0 */  0xC6, 0x8C, 0x85, 0x3D, 0x54, 0x48, 0xD2, 0x6A,
                /* 25F8 */  0x35, 0x5C, 0x07, 0x02, 0xA1, 0xD1, 0xDF, 0x09,
                /* 2600 */  0x1A, 0x32, 0x31, 0x01, 0xC2, 0xE4, 0x83, 0xD0,
                /* 2608 */  0xA0, 0xAF, 0x31, 0x81, 0x38, 0xAC, 0x0D, 0x10,
                /* 2610 */  0x26, 0x55, 0x07, 0x08, 0x8B, 0xE5, 0xE3, 0x5C,
                /* 2618 */  0xCE, 0x32, 0x82, 0x08, 0xC8, 0x89, 0xDE, 0x04,
                /* 2620 */  0x02, 0x72, 0x3E, 0x10, 0x01, 0xFD, 0xFF, 0x13,
                /* 2628 */  0x4C, 0xFE, 0x53, 0x11, 0x90, 0x65, 0x3C, 0x36,
                /* 2630 */  0x04, 0xE4, 0xD0, 0x20, 0x02, 0xB2, 0x84, 0xF7,
                /* 2638 */  0xAC, 0x80, 0x1C, 0xCF, 0x0B, 0x08, 0x13, 0xB7,
                /* 2640 */  0x4E, 0x9D, 0x3B, 0x88, 0x19, 0x40, 0x96, 0x0D,
                /* 2648 */  0x44, 0xA7, 0x06, 0xF2, 0x4A, 0x11, 0x90, 0x35,
                /* 2650 */  0x82, 0x08, 0xC8, 0xE1, 0x80, 0x68, 0x52, 0x20,
                /* 2658 */  0xAA, 0xD0, 0x0D, 0x10, 0x93, 0x0B, 0x22, 0x20,
                /* 2660 */  0xA7, 0x06, 0xA2, 0x12, 0x9E, 0x12, 0x02, 0x72,
                /* 2668 */  0x62, 0x10, 0x01, 0x39, 0x3F, 0x10, 0xD5, 0xE7,
                /* 2670 */  0x07, 0x88, 0x89, 0x05, 0x11, 0x90, 0x73, 0x02,
                /* 2678 */  0xD1, 0xD0, 0x40, 0x54, 0xED, 0xA3, 0x40, 0x40,
                /* 2680 */  0x96, 0x0E, 0xA2, 0x01, 0x10, 0x20, 0x1A, 0x1F,
                /* 2688 */  0x88, 0x86, 0x30, 0x04, 0xC4, 0x12, 0x81, 0x08,
                /* 2690 */  0xC8, 0x01, 0x14, 0x01, 0xB1, 0x38, 0x20, 0x02,
                /* 2698 */  0xB2, 0x14, 0x47, 0x40, 0x4C, 0x18, 0x88, 0x80,
                /* 26A0 */  0x1C, 0x10, 0x88, 0xC6, 0x05, 0xA2, 0x91, 0x3C,
                /* 26A8 */  0x81, 0x30, 0x41, 0xA2, 0x40, 0x58, 0x28, 0x53,
                /* 26B0 */  0x80, 0x2C, 0x21, 0x88, 0x80, 0xAC, 0x4E, 0x15,
                /* 26B8 */  0x10, 0x93, 0x0A, 0xA2, 0x01, 0x13, 0x57, 0x40,
                /* 26C0 */  0x4C, 0x24, 0x88, 0x80, 0x9C, 0xE5, 0x59, 0x1B,
                /* 26C8 */  0x88, 0x04, 0x03, 0x11, 0x90, 0x75, 0xBD, 0x88,
                /* 26D0 */  0x04, 0x48, 0x40, 0x74, 0x30, 0x20, 0x40, 0x34,
                /* 26D8 */  0x39, 0x10, 0x8D, 0xEA, 0x0B, 0x88, 0x05, 0x07,
                /* 26E0 */  0xD1, 0xE0, 0xC8, 0xA3, 0x45, 0x83, 0x23, 0x20,
                /* 26E8 */  0x02, 0xB2, 0xBC, 0x77, 0xD1, 0x41, 0x33, 0x10,
                /* 26F0 */  0x0D, 0x84, 0x7C, 0x81, 0x35, 0x10, 0x02, 0xA2,
                /* 26F8 */  0x01, 0x91, 0xF7, 0xB2, 0x0E, 0x04, 0x04, 0x44,
                /* 2700 */  0x40, 0xCE, 0x08, 0x44, 0x03, 0x03, 0x51, 0xE9,
                /* 2708 */  0x6F, 0xDF, 0x40, 0x24, 0x07, 0x88, 0x80, 0x2C,
                /* 2710 */  0xF9, 0xAB, 0x24, 0x20, 0x07, 0x00, 0x11, 0xD0,
                /* 2718 */  0xFF, 0xFF, 0x91, 0x40, 0x2F, 0xE0, 0x40, 0x44,
                /* 2720 */  0x10, 0x88, 0x0E, 0x08, 0x44, 0x1D, 0x08, 0x93,
                /* 2728 */  0xE6, 0xEE, 0x38, 0x41, 0xE5, 0x01, 0xB2, 0x74,
                /* 2730 */  0x20, 0x02, 0xB2, 0x4A, 0x7B, 0x40, 0x4C, 0x32,
                /* 2738 */  0x88, 0x06, 0x48, 0x80, 0x68, 0x6E, 0x20, 0x9A,
                /* 2740 */  0xF3, 0x5F, 0x24, 0x20, 0xA7, 0x06, 0x11, 0x90,
                /* 2748 */  0xD5, 0xFB, 0x03, 0x62, 0x59, 0x40, 0x74, 0x18,
                /* 2750 */  0x20, 0x5F, 0x95, 0x40, 0x24, 0x2D, 0x88, 0x80,
                /* 2758 */  0x2C, 0xFC, 0xD1, 0x11, 0x88, 0xA4, 0x00, 0x11,
                /* 2760 */  0x90, 0x45, 0x3C, 0x5C, 0x02, 0x11, 0x45, 0x20,
                /* 2768 */  0x1A, 0x14, 0x01, 0xA2, 0x49, 0x81, 0xA8, 0xC2,
                /* 2770 */  0x3F, 0x8D, 0x0E, 0x11, 0x04, 0x44, 0x03, 0x27,
                /* 2778 */  0xCF, 0x19, 0x0D, 0x9C, 0x80, 0xE8, 0x00, 0x40,
                /* 2780 */  0x9E, 0x22, 0x81, 0x48, 0x1A, 0x10, 0x01, 0x59,
                /* 2788 */  0xD5, 0x93, 0x56, 0x40, 0x96, 0x08, 0xA2, 0x01,
                /* 2790 */  0x11, 0x20, 0x9A, 0x16, 0x88, 0xA6, 0x7B, 0x97,
                /* 2798 */  0x0B, 0xC8, 0x59, 0x41, 0x04, 0x64, 0x9D, 0x2A,
                /* 27A0 */  0x81, 0x98, 0x6A, 0x10, 0x01, 0x39, 0x3D, 0x10,
                /* 27A8 */  0xD5, 0xE2, 0x12, 0x88, 0xA5, 0x02, 0xD1, 0x21,
                /* 27B0 */  0x84, 0x00, 0xD1, 0xAC, 0x1F, 0x9A, 0x07, 0x04,
                /* 27B8 */  0x06, 0xA2, 0x01, 0x91, 0x87, 0xEE, 0x01, 0x31,
                /* 27C0 */  0x10, 0xDD, 0xCE, 0xC8, 0x4F, 0x25, 0x10, 0x51,
                /* 27C8 */  0x06, 0xA2, 0x83, 0x04, 0x01, 0xA2, 0xF9, 0x80,
                /* 27D0 */  0xA8, 0xC6, 0x07, 0x4F, 0x20, 0x22, 0x18, 0x44,
                /* 27D8 */  0x07, 0x0E, 0x62, 0x14, 0x88, 0xA9, 0x05, 0x11,
                /* 27E0 */  0x90, 0x55, 0xFF, 0x79, 0x04, 0xE4, 0x08, 0x20,
                /* 27E8 */  0x02, 0xB2, 0x9A, 0x97, 0x4F, 0x20, 0x22, 0x0D,
                /* 27F0 */  0x44, 0x07, 0x15, 0x02, 0x44, 0x33, 0x02, 0x51,
                /* 27F8 */  0x71, 0x56, 0x81, 0x98, 0x52, 0x10, 0x1D, 0x3C,
                /* 2800 */  0x08, 0x10, 0x8D, 0x0F, 0x44, 0xD3, 0x3E, 0xCC,
                /* 2808 */  0x03, 0x91, 0xEC, 0x20, 0x02, 0xFA, 0xFF, 0x1F,
                /* 2810 */  0x84, 0xDE, 0x47, 0x07, 0xC1, 0x40, 0x74, 0xD8,
                /* 2818 */  0x20, 0x40, 0x34, 0x21, 0x10, 0x95, 0xA6, 0x16,
                /* 2820 */  0x88, 0xE9, 0x04, 0x11, 0x90, 0x13, 0x02, 0xD1,
                /* 2828 */  0xB8, 0x40, 0x54, 0xA7, 0x5B, 0x20, 0x26, 0x1A,
                /* 2830 */  0x44, 0x03, 0x21, 0x40, 0x34, 0x3A, 0x10, 0x4D,
                /* 2838 */  0xF0, 0x4A, 0x7E, 0xC8, 0x60, 0x20, 0x3A, 0x34,
                /* 2840 */  0x10, 0xBB, 0x87, 0x06, 0x0A, 0x22, 0x20, 0x47,
                /* 2848 */  0xFC, 0x30, 0x05, 0x22, 0x79, 0x41, 0x34, 0x08,
                /* 2850 */  0x22, 0x78, 0x10, 0x14, 0x44, 0x03, 0x27, 0xBF,
                /* 2858 */  0x2C, 0x01, 0x59, 0x31, 0x88, 0x80, 0x9C, 0x1D,
                /* 2860 */  0x88, 0x2A, 0x79, 0x62, 0x07, 0x22, 0x02, 0xBF,
                /* 2868 */  0x46, 0x1A, 0x3C, 0x01, 0x11, 0x90, 0x63, 0x02,
                /* 2870 */  0xD1, 0xCC, 0x40, 0x34, 0xE2, 0xD3, 0x48, 0x87,
                /* 2878 */  0x0E, 0x02, 0xA2, 0x63, 0x0F, 0xF9, 0x47, 0x07,
                /* 2880 */  0x22, 0xC2, 0x41, 0x04, 0xE4, 0xD8, 0x40, 0x54,
                /* 2888 */  0xC4, 0x97, 0x5C, 0xF7, 0x50, 0xF2, 0x28, 0x0A,
                /* 2890 */  0x44, 0x54, 0x82, 0xE8, 0xF0, 0x40, 0x80, 0x68,
                /* 2898 */  0x5A, 0x20, 0x1A, 0x4E, 0x35, 0x10, 0x8B, 0x0A,
                /* 28A0 */  0x22, 0x20, 0xCB, 0x7E, 0xB6, 0x07, 0x22, 0x21,
                /* 28A8 */  0x40, 0x74, 0x00, 0x20, 0x1F, 0xA9, 0x07, 0x00,
                /* 28B0 */  0x06, 0xA2, 0x03, 0x00, 0x79, 0x2F, 0xE9, 0x00,
                /* 28B8 */  0x40, 0x40, 0x74, 0x28, 0x20, 0x40, 0x34, 0x3E,
                /* 28C0 */  0x10, 0x4D, 0xFB, 0x5F, 0x7A, 0x28, 0x60, 0x20,
                /* 28C8 */  0x02, 0xB2, 0xF2, 0x47, 0x9C, 0x0E, 0x27, 0x04,
                /* 28D0 */  0x44, 0x07, 0x0C, 0x62, 0xFC, 0xA0, 0x42, 0x41,
                /* 28D8 */  0x74, 0x20, 0x20, 0x40, 0x34, 0x2F, 0x10, 0x55,
                /* 28E0 */  0xFF, 0x94, 0x7A, 0x08, 0x60, 0x20, 0x3A, 0x28,
                /* 28E8 */  0x91, 0x97, 0x9A, 0x80, 0x1C, 0x0F, 0x44, 0x40,
                /* 28F0 */  0x0E, 0xF3, 0x2A, 0x0B, 0x44, 0xA2, 0x81, 0x68,
                /* 28F8 */  0x90, 0xE4, 0x81, 0x75, 0x90, 0x0C, 0x44, 0x40,
                /* 2900 */  0xFF, 0xFF, 0x47, 0x24, 0x89, 0x3F, 0x88, 0x50,
                /* 2908 */  0x10, 0x0D, 0x88, 0xA8, 0x3F, 0xF3, 0x31, 0xCD,
                /* 2910 */  0xAF, 0x7A, 0x0D, 0x8E, 0x80, 0x50, 0x95, 0xFA,
                /* 2918 */  0x8F, 0x2B, 0x14, 0x44, 0x40, 0x96, 0xE8, 0xFF,
                /* 2920 */  0x78, 0x41, 0x41, 0x74, 0x7C, 0x22, 0x40, 0x54,
                /* 2928 */  0x42, 0x80, 0x63, 0x09, 0x7D, 0x3A, 0xEA, 0x58,
                /* 2930 */  0x42, 0x40, 0x74, 0x14, 0x20, 0x40, 0x54, 0x44,
                /* 2938 */  0x83, 0x01, 0xD0, 0x0A, 0x40, 0x4C, 0x2F, 0x88,
                /* 2940 */  0x80, 0x9C, 0x1B, 0x88, 0x8A, 0xC8, 0x70, 0xF1,
                /* 2948 */  0xA4, 0x20, 0x02, 0x72, 0x2E, 0x20, 0x9A, 0xA3,
                /* 2950 */  0x03, 0x10, 0x4B, 0x05, 0xA2, 0xE1, 0x93, 0x12,
                /* 2958 */  0x47, 0x09, 0x0A, 0xA2, 0x23, 0x01, 0x49, 0x01,
                /* 2960 */  0xC4, 0x32, 0x80, 0x08, 0xC8, 0x9A, 0x5B, 0x00,
                /* 2968 */  0xB1, 0x04, 0x20, 0x02, 0x72, 0x7E, 0x20, 0xAA,
                /* 2970 */  0x26, 0xC6, 0x20, 0x69, 0x8E, 0x41, 0x52, 0x10,
                /* 2978 */  0x01, 0x39, 0x2E, 0x10, 0xCD, 0x0E, 0x44, 0xB3,
                /* 2980 */  0xF6, 0x38, 0x1A, 0x51, 0x10, 0x01, 0x59, 0x77,
                /* 2988 */  0x90, 0xA3, 0x0D, 0x05, 0x11, 0x90, 0x93, 0x25,
                /* 2990 */  0x01, 0x62, 0x39, 0x41, 0x34, 0x08, 0xD2, 0x04,
                /* 2998 */  0x88, 0x69, 0x06, 0xD1, 0xF1, 0x84, 0x54, 0x39,
                /* 29A0 */  0x9E, 0x50, 0x10, 0x1D, 0xA7, 0x48, 0x16, 0x20,
                /* 29A8 */  0xA6, 0x0B, 0x44, 0xC7, 0x20, 0x02, 0x44, 0xD3,
                /* 29B0 */  0x01, 0xD1, 0x34, 0x5D, 0x8E, 0x61, 0x14, 0x44,
                /* 29B8 */  0x47, 0x05, 0x52, 0xE6, 0x28, 0x42, 0x41, 0x34,
                /* 29C0 */  0x50, 0x92, 0x66, 0xA0, 0x14, 0x44, 0x47, 0x24,
                /* 29C8 */  0xD2, 0xE6, 0x88, 0x44, 0x41, 0x74, 0x54, 0x20,
                /* 29D0 */  0x75, 0x8E, 0x0A, 0x14, 0x44, 0x47, 0x0D, 0x92,
                /* 29D8 */  0xE7, 0xA8, 0x41, 0x41, 0x74, 0xAC, 0x21, 0x2F,
                /* 29E0 */  0x73, 0x1D, 0x6B, 0x08, 0x88, 0x8E, 0x11, 0xA4,
                /* 29E8 */  0x10, 0x90, 0xFF, 0xFF, 0x47, 0x02, 0x81, 0xE8,
                /* 29F0 */  0x10, 0x40, 0x80, 0x68, 0x74, 0x20, 0x9A, 0x34,
                /* 29F8 */  0xD1, 0x31, 0x89, 0x82, 0x08, 0xC8, 0x32, 0x2A,
                /* 2A00 */  0x01, 0x31, 0x4D, 0x20, 0x02, 0xB2, 0x86, 0x4C,
                /* 2A08 */  0x47, 0x23, 0x0A, 0xA2, 0xE3, 0x04, 0x01, 0xA2,
                /* 2A10 */  0xF9, 0x80, 0x68, 0xEA, 0xA7, 0xA5, 0x0E, 0x0D,
                /* 2A18 */  0xA4, 0xD4, 0x21, 0x81, 0x82, 0xE8, 0x90, 0x40,
                /* 2A20 */  0x80, 0xA8, 0xA0, 0x54, 0x40, 0x4C, 0x1D, 0x88,
                /* 2A28 */  0x8E, 0x14, 0x04, 0x88, 0x06, 0x05, 0xA2, 0x2A,
                /* 2A30 */  0x5B, 0x1D, 0x0C, 0x28, 0x88, 0x0E, 0x0F, 0x24,
                /* 2A38 */  0xD6, 0x61, 0x82, 0x82, 0x08, 0xC8, 0xE2, 0x73,
                /* 2A40 */  0x01, 0xB1, 0x28, 0x20, 0x3A, 0x3E, 0x91, 0x5E,
                /* 2A48 */  0x40, 0x4C, 0x12, 0x88, 0x0E, 0x03, 0xA4, 0xD8,
                /* 2A50 */  0x61, 0x80, 0x82, 0x08, 0xC8, 0xF9, 0x80, 0x68,
                /* 2A58 */  0x58, 0x20, 0xAA, 0x30, 0xD9, 0x11, 0x8A, 0x82,
                /* 2A60 */  0xE8, 0x70, 0x41, 0x9A, 0x1D, 0x2E, 0x28, 0x88,
                /* 2A68 */  0x80, 0x2C, 0xB7, 0x1A, 0x10, 0x13, 0x0F, 0x22,
                /* 2A70 */  0x20, 0xC7, 0x07, 0xA2, 0x62, 0xB2, 0x1D, 0xC7,
                /* 2A78 */  0x68, 0xB8, 0x63, 0x09, 0x05, 0xD1, 0xE1, 0x81,
                /* 2A80 */  0x00, 0xD1, 0xE0, 0x40, 0x54, 0x75, 0xB9, 0x03,
                /* 2A88 */  0x03, 0x05, 0xD1, 0xE1, 0x80, 0xA4, 0x3B, 0x1C,
                /* 2A90 */  0x50, 0x10, 0x1D, 0x0E, 0x48, 0xBC, 0xC3, 0x01,
                /* 2A98 */  0x05, 0xD1, 0xF1, 0x88, 0xD4, 0x3B, 0xC6, 0x51,
                /* 2AA0 */  0x10, 0x01, 0x59, 0x74, 0xBF, 0x03, 0x06, 0x05,
                /* 2AA8 */  0x11, 0x90, 0x95, 0x04, 0x04, 0x62, 0xB2, 0x40,
                /* 2AB0 */  0x04, 0xE4, 0x4C, 0x40, 0x34, 0x20, 0x10, 0x0D,
                /* 2AB8 */  0x54, 0xF0, 0xB8, 0x42, 0x41, 0x04, 0x64, 0x91,
                /* 2AC0 */  0x09, 0x0F, 0x00, 0x14, 0x44, 0x83, 0x27, 0x11,
                /* 2AC8 */  0x07, 0x4F, 0x41, 0x34, 0x18, 0x52, 0x11, 0xC8,
                /* 2AD0 */  0xFF, 0xFF, 0xC1, 0x08, 0x44, 0x83, 0x22, 0x1D,
                /* 2AD8 */  0x81, 0x58, 0x32, 0x10, 0x01, 0x39, 0x48, 0x48,
                /* 2AE0 */  0x20, 0x16, 0x0B, 0x44, 0x87, 0x08, 0x12, 0xF3,
                /* 2AE8 */  0x28, 0x49, 0x41, 0xA8, 0xC4, 0x9C, 0x07, 0x14,
                /* 2AF0 */  0x0A, 0xA2, 0x63, 0x1F, 0xE9, 0x09, 0xC4, 0xB4,
                /* 2AF8 */  0x82, 0x08, 0xC8, 0x19, 0x8A, 0x02, 0xB1, 0x40,
                /* 2B00 */  0x20, 0x3A, 0x5A, 0x92, 0xA4, 0x40, 0x2C, 0x0C,
                /* 2B08 */  0x88, 0x8E, 0x91, 0x24, 0xEA, 0x71, 0x8C, 0x82,
                /* 2B10 */  0xE8, 0x10, 0x42, 0xAA, 0x1E, 0x42, 0x28, 0x88,
                /* 2B18 */  0x0E, 0x27, 0xA4, 0xEB, 0x61, 0x80, 0x86, 0x3D,
                /* 2B20 */  0x6E, 0x52, 0x10, 0x01, 0x59, 0x48, 0xD9, 0x63,
                /* 2B28 */  0x10, 0x6D, 0x7B, 0x0C, 0xA2, 0x20, 0x3A, 0x64,
                /* 2B30 */  0x90, 0xB8, 0x87, 0x02, 0x0A, 0xA2, 0x23, 0x0E,
                /* 2B38 */  0xC9, 0x0B, 0xC4, 0x62, 0x80, 0xE8, 0x10, 0x40,
                /* 2B40 */  0xFA, 0x1E, 0x0A, 0x28, 0x88, 0x80, 0x1C, 0xAD,
                /* 2B48 */  0xF0, 0x60, 0x28, 0x88, 0x8E, 0x69, 0x24, 0xF1,
                /* 2B50 */  0x11, 0x8C, 0x82, 0xE8, 0xA0, 0x41, 0x2A, 0x1F,
                /* 2B58 */  0xFB, 0x28, 0x88, 0x0E, 0x0C, 0x04, 0x88, 0x8A,
                /* 2B60 */  0xC9, 0x0C, 0xC4, 0x84, 0x86, 0x3E, 0xBA, 0x51,
                /* 2B68 */  0x10, 0x1D, 0xAD, 0x48, 0xE9, 0xA3, 0x15, 0x05,
                /* 2B70 */  0xD1, 0xD1, 0x90, 0xB4, 0x3E, 0x1A, 0x52, 0x10,
                /* 2B78 */  0x01, 0x39, 0xC6, 0x13, 0x57, 0x40, 0x0E, 0x05,
                /* 2B80 */  0x22, 0x20, 0x07, 0xCE, 0x0D, 0xC4, 0xD2, 0x83,
                /* 2B88 */  0xE8, 0x00, 0x41, 0x7A, 0x1F, 0x66, 0x28, 0x88,
                /* 2B90 */  0x80, 0xAC, 0x28, 0x39, 0x10, 0x93, 0x07, 0xA2,
                /* 2B98 */  0x23, 0x1C, 0x69, 0x7E, 0x34, 0xA3, 0x20, 0x02,
                /* 2BA0 */  0xB2, 0xE0, 0xEA, 0x40, 0x4C, 0x3D, 0x88, 0x80,
                /* 2BA8 */  0xAC, 0x35, 0x3B, 0x10, 0x53, 0x0E, 0xA2, 0x83,
                /* 2BB0 */  0x03, 0x09, 0x7F, 0x70, 0xA0, 0x20, 0x3A, 0x9E,
                /* 2BB8 */  0x92, 0xF2, 0x40, 0x2C, 0x1C, 0x88, 0x80, 0x1C,
                /* 2BC0 */  0xBC, 0x3D, 0x90, 0xFF, 0xFF, 0x04, 0x55, 0xC4,
                /* 2BC8 */  0x07, 0x62, 0x99, 0x41, 0x04, 0x64, 0x05, 0xF5,
                /* 2BD0 */  0x81, 0x98, 0xB2, 0x73, 0xAE, 0x80, 0x2C, 0x13,
                /* 2BD8 */  0x44, 0x40, 0xFE, 0x73, 0xBE, 0x35, 0x3D, 0xBC,
                /* 2BE0 */  0x10, 0x10, 0x1D, 0x0F, 0x89, 0x02, 0x20, 0x96,
                /* 2BE8 */  0x02, 0x44, 0x87, 0x21, 0xE2, 0x00, 0x88, 0x25,
                /* 2BF0 */  0x00, 0x11, 0x90, 0x73, 0x59, 0x00, 0x62, 0x21,
                /* 2BF8 */  0x41, 0x74, 0xDC, 0x23, 0x1A, 0x80, 0x58, 0x40,
                /* 2C00 */  0x10, 0x0D, 0x98, 0x88, 0x00, 0x62, 0xE9, 0x41,
                /* 2C08 */  0x34, 0x60, 0x62, 0x02, 0x88, 0x25, 0x07, 0x11,
                /* 2C10 */  0x90, 0xB5, 0xC9, 0x00, 0x62, 0x42, 0x41, 0x74,
                /* 2C18 */  0x50, 0x20, 0x36, 0x80, 0x98, 0x46, 0x10, 0x01,
                /* 2C20 */  0x39, 0x89, 0x0F, 0x20, 0x76, 0xD0, 0x3D, 0x10,
                /* 2C28 */  0x2A, 0x64, 0x20, 0x14, 0x44, 0x87, 0x16, 0xE2,
                /* 2C30 */  0x04, 0x88, 0x29, 0x02, 0xD1, 0x21, 0x82, 0x00,
                /* 2C38 */  0x51, 0x35, 0x52, 0x80, 0x98, 0x5A, 0x2D, 0x40,
                /* 2C40 */  0x4C, 0x3A, 0x88, 0x0E, 0x09, 0xC4, 0x0B, 0x10,
                /* 2C48 */  0x93, 0x0D, 0xA2, 0x43, 0x3A, 0x71, 0x03, 0xC2,
                /* 2C50 */  0xC2, 0x80, 0x50, 0x19, 0x76, 0x00, 0x99, 0x26,
                /* 2C58 */  0x10, 0x1D, 0x72, 0x08, 0x10, 0xCD, 0x05, 0x44,
                /* 2C60 */  0x43, 0xE8, 0x01, 0x62, 0x91, 0x40, 0x74, 0xEC,
                /* 2C68 */  0x24, 0x82, 0x80, 0x58, 0x6E, 0x10, 0x01, 0x39,
                /* 2C70 */  0xA4, 0x21, 0x20, 0x16, 0x19, 0x44, 0x47, 0x3C,
                /* 2C78 */  0xE2, 0x08, 0x88, 0x09, 0x91, 0x04, 0xC4, 0x52,
                /* 2C80 */  0x83, 0x08, 0xC8, 0x1A, 0x2C, 0x01, 0xB1, 0x44,
                /* 2C88 */  0xA2, 0x40, 0x98, 0x1E, 0x53, 0x20, 0x2C, 0x8B,
                /* 2C90 */  0x2A, 0x40, 0x16, 0x0C, 0x44, 0x03, 0x26, 0xAE,
                /* 2C98 */  0x06, 0x44, 0x41, 0x74, 0xB0, 0x22, 0xB6, 0x40,
                /* 2CA0 */  0x1E, 0xCF, 0xAC, 0xD5, 0x17, 0x10, 0x4B, 0x0A,
                /* 2CA8 */  0x42, 0xB5, 0x1A, 0x03, 0x65, 0xC2, 0x41, 0x74,
                /* 2CB0 */  0x7C, 0x26, 0xCA, 0x86, 0x4C, 0x41, 0x04, 0xF4,
                /* 2CB8 */  0xFF, 0x7F, 0x30, 0x11, 0x10, 0x4D, 0x07, 0x44,
                /* 2CC0 */  0xC3, 0x38, 0x03, 0x62, 0xD1, 0x40, 0x74, 0x00,
                /* 2CC8 */  0x24, 0xD6, 0x80, 0x58, 0x5E, 0x10, 0x0D, 0x85,
                /* 2CD0 */  0x68, 0x03, 0x62, 0x21, 0x40, 0x74, 0x5C, 0x20,
                /* 2CD8 */  0xDE, 0x8E, 0x0B, 0x14, 0x44, 0x47, 0x1B, 0x22,
                /* 2CE0 */  0x0E, 0x88, 0xE9, 0x02, 0x11, 0x90, 0xFF, 0xFF 
            })
            Name (BFBC, Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
            })
            Method (EVBC, 0, NotSerialized)
            {
                FNGP = "EVBC"
                WMNM = FNGP
                Return (BFBC)
            }

            Method (HKEV, 2, NotSerialized)
            {
                BFBC = Zero
                BFBC [Zero] = One
                BFBC [One] = Arg0
                BFBC [0x02] = Arg1
                Arg1 >>= 0x08
                BFBC [0x03] = Arg1
                Notify (WMID, 0xBC)
            }

            Method (HKBE, 1, NotSerialized)
            {
                BFBC = Zero
                BFBC [Zero] = 0x02
                BFBC [One] = Arg0
                Notify (WMID, 0xBC)
            }

            Method (GFSE, 1, NotSerialized)
            {
                BFBC = Zero
                BFBC [Zero] = 0x03
                BFBC [One] = Arg0
                Notify (WMID, 0xBC)
            }

            Method (BRCE, 2, NotSerialized)
            {
                BFBC = Zero
                BFBC [Zero] = 0x04
                BFBC [One] = Arg0
                BFBC [0x02] = Arg1
                Notify (WMID, 0xBC)
            }

            Method (SENE, 3, NotSerialized)
            {
                BFBC = Zero
                BFBC [Zero] = 0x05
                BFBC [One] = Arg0
                BFBC [0x02] = Arg1
                Arg1 >>= 0x08
                BFBC [0x03] = Arg1
                Arg1 >>= 0x08
                BFBC [0x04] = Arg1
                Arg1 >>= 0x08
                BFBC [0x05] = Arg1
                BFBC [0x06] = Arg2
                Arg1 >>= 0x08
                BFBC [0x07] = Arg2
                Notify (WMID, 0xBC)
            }

            Method (THME, 2, NotSerialized)
            {
                BFBC = Zero
                BFBC [Zero] = 0x06
                BFBC [One] = Arg0
                BFBC [0x02] = Arg1
                Notify (WMID, 0xBC)
            }

            Method (GHKE, 2, NotSerialized)
            {
                BFBC = Zero
                BFBC [Zero] = 0x07
                BFBC [One] = Arg0
                BFBC [0x02] = Arg1
                Notify (WMID, 0xBC)
            }

            Method (ACSE, 1, NotSerialized)
            {
                BFBC = Zero
                BFBC [Zero] = 0x08
                BFBC [One] = Arg0
                Notify (WMID, 0xBC)
            }

            Method (BBSE, 1, NotSerialized)
            {
                BFBC = Zero
                BFBC [Zero] = 0x09
                BFBC [One] = Arg0
                Notify (WMID, 0xBC)
            }

            Method (SISE, 1, NotSerialized)
            {
                BFBC = Zero
                BFBC [Zero] = 0x0A
                BFBC [One] = Arg0
                Notify (WMID, 0xBC)
            }

            Method (BACE, 1, NotSerialized)
            {
                BFBC = Zero
                BFBC [Zero] = 0x0B
                BFBC [One] = Arg0
                Notify (WMID, 0xBC)
            }

            Method (SKBE, 1, NotSerialized)
            {
                BFBC = Zero
                BFBC [Zero] = 0x0C
                BFBC [One] = Arg0
                Notify (WMID, 0xBC)
            }

            Name (BFBD, Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
            })
            Method (EVBD, 0, NotSerialized)
            {
                FNGP = "EVBD"
                WMNM = FNGP
                Local1 = Zero
                PHSR ()
                BF08 = WBUF
                Return (BF08)
            }

            Method (KRDY, 1, NotSerialized)
            {
                BFBD = Zero
                BFBD [Zero] = 0x0B
                BFBD [One] = Arg0
                Notify (WMID, 0xBD)
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event
            {
                Local1 = Zero
                If ((Arg0 == 0xBC))
                {
                    Local1 = EVBC ()
                    Return (Local1)
                }

                If ((Arg0 == 0xBD))
                {
                    Local1 = EVBD ()
                    WBUF = Local1
                    Return (Local1)
                }

                Return (Local1)
            }

            Method (WMAA, 3, Serialized)
            {
                FNGP = "WMAA"
                WMNM = FNGP
                WFUN = Arg1
                WBUF = Arg2
                Switch (Arg1)
                {
                    Case (One)
                    {
                        PHSR ()
                        BF04 = WBUF
                        Local1 = BF04
                    }
                    Case (0x02)
                    {
                        PHSR ()
                        BF08 = WBUF
                        Local1 = BF08
                    }
                    Default
                    {
                        Local1 = One
                        Noop
                    }

                }

                Return (Local1)
            }

            Method (WMAB, 3, Serialized)
            {
                FNGP = "WMAB"
                WMNM = FNGP
                WFUN = Arg1
                WBUF = Arg2
                Switch (Arg1)
                {
                    Case (One)
                    {
                        PHSR ()
                        BF02 = WBUF
                        Local1 = BF02
                    }
                    Case (0x02)
                    {
                        PHSR ()
                        BF84 = WBUF
                        Local1 = BF84
                    }
                    Default
                    {
                        Local1 = One
                        Noop
                    }

                }

                Return (Local1)
            }

            Method (WMAC, 3, Serialized)
            {
                Name (BF4K, Buffer (0x1000){})
                FNGP = "WMAC"
                WMNM = FNGP
                WFUN = Arg1
                WBUF = Arg2
                Switch (Arg1)
                {
                    Case (One)
                    {
                        PHSR ()
                        BF04 = WBUF
                        Local1 = BF04
                    }
                    Case (0x02)
                    {
                        PHSR ()
                        BF4K = WBUF
                        Local1 = BF4K
                    }

                }

                Return (Local1)
            }

            Method (WMBE, 3, Serialized)
            {
                FNGP = "WMBE"
                WMNM = FNGP
                WFUN = Arg1
                WBUF = Arg2
                Local1 = Zero
                Switch (Arg1)
                {
                    Case (0x13)
                    {
                        PHSR ()
                        BF04 = WBUF
                        Local1 = BF04
                    }
                    Case (0x14)
                    {
                        PHSR ()
                        BF08 = WBUF
                        Local1 = BF08
                    }
                    Case (0x15)
                    {
                        PHSR ()
                        BF04 = WBUF
                        Local1 = BF04
                    }

                }

                Return (Local1)
            }

            Method (WMBF, 3, Serialized)
            {
                FNGP = "WMBF"
                WMNM = FNGP
                WFUN = Arg1
                WBUF = Arg2
                Switch (Arg1)
                {
                    Case (0x02)
                    {
                        PHSR ()
                        BF10 = WBUF
                        Local1 = BF10
                    }
                    Case (0x03)
                    {
                        PHSR ()
                        BF10 = WBUF
                        Local1 = BF10
                    }

                }

                Return (Local1)
            }

            Method (WMBG, 3, Serialized)
            {
                FNGP = "WMBG"
                WMNM = FNGP
                WFUN = Arg1
                WBUF = Arg2
                Switch (Arg1)
                {
                    Case (One)
                    {
                        PHSR ()
                        BF10 = WBUF
                        Local1 = BF10
                    }

                }

                Return (Local1)
            }

            Method (WMBH, 3, Serialized)
            {
                Name (BHSK, Buffer (0x04)
                {
                     0x00, 0x00, 0x00, 0x00                         
                })
                Name (BHGK, Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                FNGP = "WMBH"
                WMNM = FNGP
                WFUN = Arg1
                WBUF = Arg2
                Switch (Arg1)
                {
                    Case (0x05)
                    {
                        Local0 = WBUF [Zero]
                        WBUF [Zero] = One
                        If ((Local0 == Zero))
                        {
                            BHUS (RefOf (Local3), RefOf (Local2))
                            WBUF [0x03] = Local2
                            Local2 >>= 0x08
                            WBUF [0x04] = Local2
                        }
                        ElseIf ((Local0 == One))
                        {
                            BHUS (RefOf (Local3), RefOf (Local2))
                            WBUF [One] = Local2
                            Local2 >>= 0x08
                            WBUF [0x02] = Local2
                        }
                        ElseIf ((Local0 == 0x02))
                        {
                            BHUS (RefOf (Local3), RefOf (Local2))
                            WBUF [0x05] = Local2
                        }

                        WBUF [Zero] = Local3
                        BF08 = WBUF
                        Local1 = BF08
                    }
                    Case (Package (0x09)
                        {
                            One, 
                            0x02, 
                            0x06, 
                            0x08, 
                            0x0A, 
                            0x0C, 
                            0x0E, 
                            0x10, 
                            0x12
                        }

)
                    {
                        PHSR ()
                        BF04 = WBUF
                        Local1 = BF04
                    }
                    Case (Package (0x09)
                        {
                            0x03, 
                            0x04, 
                            0x07, 
                            0x09, 
                            0x0B, 
                            0x0D, 
                            0x0F, 
                            0x11, 
                            0x13
                        }

)
                    {
                        PHSR ()
                        BF08 = WBUF
                        Local1 = BF08
                    }
                    Default
                    {
                        Local1 = One
                        Noop
                    }

                }

                Return (Local1)
            }

            Method (BHUS, 2, NotSerialized)
            {
                Arg0 = One
            }

            Method (WMBK, 3, Serialized)
            {
                FNGP = "WMBK"
                WMNM = FNGP
                WFUN = Arg1
                WBUF = Zero
                WBUF = Arg2
                Switch (Arg1)
                {
                    Case (One)
                    {
                        PHSR ()
                        BF08 = WBUF
                        Local1 = BF08
                    }
                    Case (0x02)
                    {
                        PHSR ()
                        BF08 = WBUF
                        Local1 = BF08
                    }
                    Case (0x03)
                    {
                        PHSR ()
                        BF08 = WBUF
                        Local1 = BF08
                    }
                    Case (0x08)
                    {
                        PHSR ()
                        BF58 = WBUF
                        Local1 = BF58
                    }
                    Case (0x09)
                    {
                        PHSR ()
                        BF30 = WBUF
                        Local1 = BF30
                    }
                    Case (0x0A)
                    {
                        PHSR ()
                        BF48 = WBUF
                        Local1 = BF48
                    }
                    Case (0x0B)
                    {
                        PHSR ()
                        BF04 = WBUF
                        Local1 = BF04
                    }
                    Case (0x0D)
                    {
                        PHSR ()
                        BF04 = WBUF
                        Local1 = BF04
                    }
                    Case (0x10)
                    {
                        PHSR ()
                        BF14 = WBUF
                        Local1 = BF14
                    }
                    Case (0x11)
                    {
                        PHSR ()
                        BF04 = WBUF
                        Local1 = BF04
                    }
                    Case (0x12)
                    {
                        PHSR ()
                        BF08 = WBUF
                        Local1 = BF08
                    }
                    Case (0x13)
                    {
                        PHSR ()
                        BF08 = WBUF
                        Local1 = BF08
                    }
                    Case (0x14)
                    {
                        PHSR ()
                        BF48 = WBUF
                        Local1 = BF48
                    }
                    Case (0x15)
                    {
                        PHSR ()
                        BF04 = WBUF
                        Local1 = BF04
                    }
                    Case (0x16)
                    {
                        PHSR ()
                        BF48 = WBUF
                        Local1 = BF48
                    }
                    Case (0x17)
                    {
                        PHSR ()
                        BF04 = WBUF
                        Local1 = BF04
                    }
                    Case (0x18)
                    {
                        PHSR ()
                        BF08 = WBUF
                        Local1 = BF08
                    }
                    Case (0x19)
                    {
                        PHSR ()
                        BF08 = WBUF
                        Local1 = BF08
                    }
                    Case (0x1A)
                    {
                        PHSR ()
                        BF0C = WBUF
                        Local1 = BF0C
                    }
                    Case (0x1B)
                    {
                        PHSR ()
                        BF04 = WBUF
                        Local1 = BF04
                    }
                    Default
                    {
                        Local1 = One
                        Noop
                    }

                }

                Return (Local1)
            }

            Method (WMBL, 3, Serialized)
            {
                FNGP = "WMBL"
                WMNM = FNGP
                WFUN = Arg1
                WBUF = Arg2
                Switch (Arg1)
                {
                    Case (Package (0x02)
                        {
                            One, 
                            0x0B
                        }

)
                    {
                        PHSR ()
                        BF08 = WBUF
                        Local1 = BF08
                    }
                    Case (Package (0x08)
                        {
                            0x02, 
                            0x04, 
                            0x05, 
                            0x06, 
                            0x07, 
                            0x08, 
                            0x09, 
                            0x0C
                        }

)
                    {
                        PHSR ()
                        BF04 = WBUF
                        Local1 = BF04
                    }
                    Case (0x03)
                    {
                        Name (GBSF, Buffer (0x1008)
                        {
                             0x00                                           
                        })
                        PHSR ()
                        GBSF = WBUF
                        Local1 = GBSF
                    }
                    Case (0x0A)
                    {
                        Name (GHDP, Buffer (0x20)
                        {
                             0x00                                           
                        })
                        PHSR ()
                        GHDP = WBUF
                        Local1 = GHDP
                    }
                    Default
                    {
                        Local1 = One
                        Noop
                    }

                }

                Return (Local1)
            }
        }
    }

    OperationRegion (PECM, SystemIO, 0x72, 0x02)
    Field (PECM, ByteAcc, Lock, Preserve)
    {
        EIND,   8, 
        EDAT,   8
    }

    IndexField (EIND, EDAT, ByteAcc, NoLock, Preserve)
    {
        Offset (0xE0), 
        RAMB,   32, 
        OTPE,   8, 
        MANN,   8, 
        RESV,   16, 
        CTPF,   8, 
        WLDP,   1, 
        BTDP,   1, 
        RES1,   2, 
        WRST,   1, 
        BRST,   1, 
        RES2,   2, 
        FWUP,   8, 
        RSDF,   8, 
        ABTY,   8, 
        RES3,   24, 
        S3TL,   8, 
        S3TH,   8, 
        ES3M,   1, 
        SS3F,   1, 
        KBST,   1, 
        I2CT,   1, 
        TCTP,   2, 
        KBLS,   2, 
        RES4,   16, 
        LDDF,   8, 
        S3FA,   8, 
        POS0,   8, 
        POS1,   8, 
        POS2,   8, 
        POS3,   8, 
        POS4,   8, 
        POS5,   8, 
        POS6,   8, 
        POS7,   8, 
        RES5,   8
    }

    OperationRegion (RAMW, SystemMemory, RAMB, 0x0100)
    Field (RAMW, AnyAcc, NoLock, Preserve)
    {
        TT_P,   8, 
        FS_F,   8, 
        FS_T,   16, 
        FA_D,   32, 
        FS_Z,   16, 
        ST_P,   8, 
        MN_A,   64, 
        BT_P,   8, 
        AL_D,   32, 
        DB_1,   8, 
        DB_2,   32, 
        DB_3,   32, 
        DB_4,   32, 
        RT_W,   16, 
        PM_B,   32, 
        PM_S,   8, 
        ST_B,   32, 
        AC_F,   8, 
        DC_F,   8, 
        DC_2,   8, 
        VG_F,   16, 
        PD_L,   16, 
        CD_L,   16, 
        CD_S,   16, 
        ND_S,   16, 
        SD_S,   16, 
        CN_R,   8, 
        TJ_M,   16, 
        TR_T,   8, 
        CR_T,   8, 
        PC_P,   8, 
        S3_E,   16, 
        S3_B,   16, 
        S3_O,   16
    }

    Scope (\)
    {
        OperationRegion (GPSC, SystemIO, 0xB2, 0x02)
        Field (GPSC, ByteAcc, NoLock, Preserve)
        {
            SMCM,   8, 
            SMST,   8
        }

        Method (ISMI, 1, Serialized)
        {
            SMCM = Arg0
        }

        Method (ASMI, 1, Serialized)
        {
            AL_D = Arg0
            SMCM = 0xD6
            Return (AL_D)
        }

        Method (DB_G, 4, NotSerialized)
        {
            DB_1 = Arg0
            DB_2 = Arg1
            DB_3 = Arg2
            DB_4 = Arg3
            ASMI (0x80)
        }
    }

    Scope (_SB.PCI0.LPCB)
    {
        Device (EC0)
        {
            Name (_HID, EisaId ("PNP0C09"))  // _HID: Hardware ID
            Name (CRS, ResourceTemplate ()
            {
                IO (Decode16,
                    0x0062,             // Range Minimum
                    0x0062,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0066,             // Range Minimum
                    0x0066,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (CRS)
            }

            Name (_GPE, 0x03)  // _GPE: General Purpose Events
            OperationRegion (TRDP, SystemIO, 0x025C, 0x02)
            Field (TRDP, ByteAcc, NoLock, Preserve)
            {
                AEID,   8, 
                AEIC,   8
            }

            Mutex (MUEC, 0x00)
            Name (ECFL, Ones)
            Method (ECAV, 0, NotSerialized)
            {
                If ((_REV >= 0x02))
                {
                    Return (One)
                }

                If ((ST_P >= 0x04))
                {
                    Return (Zero)
                }

                If ((ECFL == Ones))
                {
                    Return (Zero)
                }

                Return (ECFL)
            }

            OperationRegion (ECW1, SystemMemory, 0xFEFF0380, 0x80)
            Field (ECW1, ByteAcc, Lock, Preserve)
            {
                Offset (0x01), 
                EPWS,   8, 
                EB0S,   8, 
                EB1S,   8, 
                EB0R,   8, 
                EB1R,   8, 
                EB0T,   8, 
                EB1T,   8, 
                OCOT,   8, 
                Offset (0x10), 
                B0PN,   16, 
                B0VL,   16, 
                B0RC,   16, 
                B0FC,   16, 
                B0ST,   16, 
                B0CC,   16, 
                B0TM,   16, 
                B0C1,   16, 
                B0CV,   16, 
                Offset (0x30), 
                B1PN,   16, 
                B1VL,   16, 
                B1RC,   16, 
                B1FC,   16, 
                B1ST,   16, 
                B1CC,   16, 
                B1TM,   16, 
                B1C1,   16, 
                B1CV,   16, 
                Offset (0x50), 
                B0DC,   16, 
                B0DV,   16, 
                B0SN,   16, 
                B0MD,   16, 
                B1DC,   16, 
                B1DV,   16, 
                B1SN,   16, 
                B1MD,   16, 
                TH1R,   8, 
                TH1L,   8, 
                TH0R,   8, 
                TH0L,   8, 
                ECRT,   8, 
                EPSV,   8, 
                EACT,   8, 
                TERR,   8, 
                F0TS,   16, 
                F1TS,   16, 
                F0CS,   8, 
                F1CS,   8, 
                PCPT,   16, 
                ALSC,   8, 
                Offset (0x72), 
                ALSU,   16, 
                ALSL,   16, 
                ALSX,   16, 
                BRTC,   8, 
                BCDV,   8, 
                AINP,   16
            }

            OperationRegion (ECW2, SystemMemory, 0xFEFF0700, 0x80)
            Field (ECW2, ByteAcc, Lock, Preserve)
            {
                ESEM,   8, 
                CMD1,   8, 
                CDT1,   8, 
                CDT2,   8, 
                CDT3,   8, 
                CDT4,   8, 
                CDT5,   8, 
                CDT6,   8, 
                CDT7,   8, 
                CDT8,   8, 
                CDT9,   8, 
                CD10,   8, 
                CD11,   8, 
                CD12,   8, 
                CD13,   8, 
                CD14,   8, 
                CD15,   8, 
                CD16,   8, 
                CD17,   8, 
                CD18,   8, 
                CD19,   8, 
                CD20,   8, 
                CD21,   8, 
                CD22,   8, 
                CD23,   8, 
                CD24,   8, 
                Offset (0x40), 
                EDA1,   8, 
                EDA2,   8, 
                EDA3,   8, 
                EDA4,   8, 
                EDA5,   8, 
                EDA6,   8, 
                EDA7,   8, 
                EDA8,   8, 
                EDA9,   8, 
                ED10,   8, 
                ED11,   8, 
                ED12,   8, 
                ED13,   8, 
                ED14,   8, 
                ED15,   8, 
                ED16,   8, 
                ED17,   8, 
                ED18,   8, 
                ED19,   8, 
                ED20,   8
            }

            OperationRegion (ECW3, SystemMemory, 0xFEFF0CF0, 0x80)
            Field (ECW3, ByteAcc, Lock, Preserve)
            {
                CTLB,   8, 
                CTHB,   8, 
                CFLB,   8, 
                CFHB,   8, 
                STLB,   8, 
                STHB,   8, 
                SFLB,   8, 
                SFHB,   8, 
                GFLB,   8, 
                GFHB,   8
            }

            OperationRegion (PHM0, SystemMemory, 0xFEFF0380, 0x80)
            Field (PHM0, ByteAcc, Lock, Preserve)
            {
                Offset (0x12), 
                BD25,   8, 
                BD26,   8, 
                BD27,   8, 
                BD28,   8, 
                BD29,   8, 
                BD2A,   8, 
                BD2D,   8, 
                BD2E,   8, 
                BD2F,   8, 
                BD30,   8, 
                BD31,   8, 
                BD32,   8, 
                Offset (0x22), 
                BD33,   8, 
                BD34,   8, 
                BD35,   8, 
                BD36,   8, 
                BD37,   8, 
                BD38,   8, 
                BD39,   8, 
                BD3A,   8, 
                Offset (0x50), 
                BD3B,   8, 
                BD3C,   8, 
                BD3D,   8, 
                BD3E,   8, 
                Offset (0x60), 
                BD20,   8, 
                Offset (0x62), 
                BD22,   8, 
                Offset (0x68), 
                BD23,   8, 
                BD24,   8, 
                Offset (0x6E), 
                BD21,   8
            }

            OperationRegion (PHM1, SystemMemory, 0xFEFF0700, 0xFF)
            Field (PHM1, ByteAcc, Lock, Preserve)
            {
                Offset (0xB7), 
                BD1E,   8, 
                BD1F,   8, 
                Offset (0xBA), 
                BD1C,   8, 
                BD1D,   8, 
                Offset (0xBE), 
                BD1A,   8, 
                BD1B,   8, 
                Offset (0xC5), 
                PECR,   8, 
                Offset (0xC8), 
                CR01,   8, 
                CR02,   8, 
                CR03,   8, 
                CR04,   8, 
                CR05,   8
            }

            OperationRegion (ECWB, SystemMemory, 0xFEFF0700, 0x80)
            Field (ECWB, ByteAcc, Lock, Preserve)
            {
                ESEB,   8, 
                CMDB,   8, 
                CDTB,   496, 
                EDAB,   512
            }

            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
            }

            Name (BADR, 0x0B)
            Name (CADR, 0x09)
            Name (SADR, 0x0A)
            Name (ISHE, Zero)
            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                ECFL = One
                Local1 = RR_M (0x04A0)
                Local1 |= 0x08
                WR_M (0x04A0, Local1)
                H0_2 ()
                If ((OSYS >= 0x07DC))
                {
                    WR_M (0x0617, One)
                }
                Else
                {
                    WR_M (0x0617, Zero)
                }
            }

            Method (ALMH, 1, NotSerialized)
            {
                If ((Arg0 == BADR))
                {
                    NB_T (0x80)
                }
            }

            Method (SR_W, 1, NotSerialized)
            {
                Local0 = SR_T (RDWD, BADR, Arg0)
                Local1 = DerefOf (Local0 [Zero])
                If (Local1)
                {
                    Return (Ones)
                }
                Else
                {
                    Return (DerefOf (Local0 [0x02]))
                }
            }

            Name (BSLF, Zero)
            Method (BS_F, 1, Serialized)
            {
                If (Arg0)
                {
                    BSLF = One
                }
                Else
                {
                    BSLF = Zero
                }
            }

            Method (BP_U, 0, Serialized)
            {
                If (BSLF)
                {
                    Local0 = B1MD
                }
                Else
                {
                    Local0 = B0MD
                }

                If ((Local0 != 0xFFFF))
                {
                    Local1 = (Local0 >> 0x0F)
                    Local1 &= One
                    Local0 = (Local1 ^ One)
                }

                Return (Local0)
            }

            Method (BD_C, 0, Serialized)
            {
                If (BSLF)
                {
                    Local0 = B1DC
                }
                Else
                {
                    Local0 = B0DC
                }

                Local0 &= 0xFFFF
                Return (Local0)
            }

            Method (BL_F, 0, Serialized)
            {
                If (BSLF)
                {
                    Local0 = B1FC
                }
                Else
                {
                    Local0 = B0FC
                }

                Local0 &= 0xFFFF
                Return (Local0)
            }

            Method (BT_C, 0, Serialized)
            {
                If (BSLF)
                {
                    Local0 = B1MD
                }
                Else
                {
                    Local0 = B0MD
                }

                If ((Local0 != 0xFFFF))
                {
                    Local0 >>= 0x09
                    Local0 &= One
                    Local0 ^= One
                }
                Else
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (BD_V, 0, Serialized)
            {
                If (BSLF)
                {
                    Local0 = B1DV
                }
                Else
                {
                    Local0 = B0DV
                }

                Return (Local0)
            }

            Method (BD_N, 0, NotSerialized)
            {
                Name (BSTR, Buffer (0x20){})
                Local0 = SR_T (RDBL, BADR, 0x21)
                If ((DerefOf (Local0 [Zero]) != Zero))
                {
                    BSTR [0x04] = Zero
                }
                Else
                {
                    BSTR = DerefOf (Local0 [0x02])
                    BSTR [DerefOf (Local0 [One])] = Zero
                }

                Return (BSTR)
            }

            Method (BS_N, 0, Serialized)
            {
                If (BSLF)
                {
                    Local0 = B1SN
                }
                Else
                {
                    Local0 = B0SN
                }

                Return (Local0)
            }

            Method (BS_T, 0, Serialized)
            {
                If (BSLF)
                {
                    Local0 = B1ST
                }
                Else
                {
                    Local0 = B0ST
                }

                Return (Local0)
            }

            Method (BC_R, 0, Serialized)
            {
                If (BSLF)
                {
                    Local0 = B1CC
                }
                Else
                {
                    Local0 = B0CC
                }

                Return (Local0)
            }

            Method (BR_C, 0, Serialized)
            {
                If (BSLF)
                {
                    Local0 = B1RC
                }
                Else
                {
                    Local0 = B0RC
                }

                Return (Local0)
            }

            Method (BV_T, 0, Serialized)
            {
                If (BSLF)
                {
                    Local0 = B1VL
                }
                Else
                {
                    Local0 = B0VL
                }

                Return (Local0)
            }

            Method (BT_P, 1, Serialized)
            {
                Local0 = (EPWS & 0x02)
                If (Local0)
                {
                    Local1 = One
                }
                Else
                {
                    Local1 = Zero
                }

                Local0 = (EPWS & 0x04)
                If (Local0)
                {
                    Local2 = One
                }
                Else
                {
                    Local2 = Zero
                }

                If (Arg0)
                {
                    DC_2 = Local2
                    Return (Local2)
                }
                Else
                {
                    DC_F = Local1
                    Return (Local1)
                }
            }

            Method (AP_S, 0, Serialized)
            {
                Local0 = (EPWS & One)
                Return (Local0)
            }

            Method (GB_T, 1, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    Local0 = EB0T
                }
                Else
                {
                    Local0 = EB1T
                }

                Return (Local0)
            }

            Method (BC_H, 1, Serialized)
            {
                If (Arg0)
                {
                    Local0 = EB1S
                }
                Else
                {
                    Local0 = EB0S
                }

                Local0 &= 0xFF
                If ((Local0 != 0xFF))
                {
                    Local0 &= 0x02
                    Local0 >>= One
                }
                Else
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (BC_F, 1, Serialized)
            {
                If (Arg0)
                {
                    Local0 = EB1S
                }
                Else
                {
                    Local0 = EB0S
                }

                Local0 &= 0xFF
                If ((Local0 != 0xFF))
                {
                    Local0 &= 0x10
                    Local0 >>= 0x04
                }
                Else
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (CB_T, 1, Serialized)
            {
                Local1 = GB_T (Arg0)
                If ((Local1 == 0xFF))
                {
                    Local0 = Zero
                }
                Else
                {
                    Local0 = (Local1 & 0x10)
                    If (Local0)
                    {
                        Local0 = One
                    }
                }

                Return (Local0)
            }

            Method (FS_C, 1, Serialized)
            {
                If (Arg0)
                {
                    Local0 = F1TS
                }
                Else
                {
                    Local0 = F0TS
                }

                Local0 = ~Local0
                Local0 &= 0xFFFF
                If ((Local0 != Zero))
                {
                    If ((Local0 == 0xFFFF))
                    {
                        Local0 = Zero
                    }
                    Else
                    {
                        Local0 *= 0x02
                        Local1 = 0x001C8402
                        Divide (Local1, Local0, Local2, Local0)
                    }
                }
                Else
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (RT_M, 0, NotSerialized)
            {
                Local0 = PCPT
                Return (Local0)
            }

            Method (RC_R, 0, NotSerialized)
            {
                Local0 = ECRT
                If ((Local0 > 0x80))
                {
                    Local0 = 0x7F
                }

                Return (Local0)
            }

            Method (RS_V, 0, NotSerialized)
            {
                Local0 = EPSV
                If ((Local0 > 0x80))
                {
                    Local0 = 0x7F
                }

                Return (Local0)
            }

            Method (EC_S, 1, NotSerialized)
            {
                OE_S (Arg0)
            }

            Method (EC_W, 1, NotSerialized)
            {
                If ((Arg0 <= 0x04))
                {
                    PNOT ()
                }

                If ((Arg0 == 0x04)){}
                OE_W (Arg0)
            }

            Method (RR_M, 1, Serialized)
            {
                If ((Acquire (MUEC, 0xFFFF) == Zero))
                {
                    Local0 = Arg0
                    Local1 = (Local0 & 0xFF)
                    Local0 >>= 0x08
                    Local0 &= 0xFF
                    CDT2 = Local1
                    CDT1 = Local0
                    CMD1 = 0x80
                    ESEM = 0x0F
                    Local0 = 0x7F
                    While ((Local0 && CMD1))
                    {
                        Sleep (One)
                        Local0--
                    }

                    If ((CMD1 == Zero))
                    {
                        Local0 = EDA1
                    }
                    Else
                    {
                        Local0 = Ones
                    }

                    Release (MUEC)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WR_M, 2, Serialized)
            {
                If ((Acquire (MUEC, 0xFFFF) == Zero))
                {
                    Local0 = Arg0
                    Local1 = (Local0 & 0xFF)
                    Local0 >>= 0x08
                    Local0 &= 0xFF
                    CDT2 = Local1
                    CDT1 = Local0
                    CDT3 = Arg1
                    CMD1 = 0x81
                    ESEM = 0x0F
                    Local0 = 0x7F
                    While ((Local0 && CMD1))
                    {
                        Sleep (One)
                        Local0--
                    }

                    If ((CMD1 == Zero))
                    {
                        Local0 = One
                    }
                    Else
                    {
                        Local0 = Ones
                    }

                    Release (MUEC)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (SB_R, 1, Serialized)
            {
                WB_O (Zero, Arg0)
            }

            Name (DECF, Zero)
            Method (SF_A, 2, Serialized)
            {
                Local1 = RR_M (0x0521)
                Local2 = RR_M (0x0522)
                Local3 = RR_M (0x0523)
                Local4 = RR_M (0x0524)
                If ((Arg0 == Zero))
                {
                    Local3 |= 0x80
                    Local4 |= 0x80
                    If ((Local1 & 0x80))
                    {
                        Local0 = (Local1 >> 0x04)
                        Local0 &= 0x03
                        If ((Local0 == Zero))
                        {
                            WR_M (0x0523, Local3)
                        }
                        ElseIf ((Local0 == One))
                        {
                            WR_M (0x0524, Local4)
                        }
                        ElseIf ((Local0 == 0x02))
                        {
                            WR_M (0x0523, Local3)
                            WR_M (0x0524, Local4)
                        }
                    }

                    If ((Local2 & 0x80))
                    {
                        Local0 = (Local2 >> 0x04)
                        Local0 &= 0x03
                        If ((Local0 == Zero))
                        {
                            WR_M (0x0523, Local3)
                        }
                        ElseIf ((Local0 == One))
                        {
                            WR_M (0x0524, Local4)
                        }
                        ElseIf ((Local0 == 0x02))
                        {
                            WR_M (0x0523, Local3)
                            WR_M (0x0524, Local4)
                        }
                    }

                    Return (Zero)
                }

                Local3 &= 0x7F
                Local4 &= 0x7F
                WR_M (0x0523, Local3)
                WR_M (0x0524, Local4)
                WF_O (Arg0--, Arg1)
                Return (Zero)
            }

            Method (SP_N, 3, Serialized)
            {
                If ((Acquire (MUEC, 0xFFFF) == Zero))
                {
                    Local0 = Arg0
                    Local1 = Arg1
                    If ((Local0 >= 0x41))
                    {
                        Local0 -= 0x41
                    }

                    Local0 <<= 0x04
                    Local0 |= Local1
                    CDT2 = Local0
                    If ((Arg2 == One))
                    {
                        Local2 = 0x20
                    }
                    Else
                    {
                        Local2 = 0x40
                    }

                    CDT1 = Local2
                    CMD1 = 0x87
                    ESEM = 0x0F
                    Local0 = 0x7F
                    While ((Local0 && CMD1))
                    {
                        Sleep (One)
                        Local0--
                    }

                    If ((CMD1 == Zero))
                    {
                        Local0 = One
                    }
                    Else
                    {
                        Local0 = Ones
                    }

                    Release (MUEC)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (RP_N, 2, Serialized)
            {
                If ((Acquire (MUEC, 0xFFFF) == Zero))
                {
                    Local0 = Arg0
                    If ((Local0 >= 0x41))
                    {
                        Local0 -= 0x41
                    }

                    Local0 <<= 0x04
                    Local0 |= Arg1
                    CDT2 = Local0
                    CDT1 = Zero
                    CMD1 = 0x87
                    ESEM = 0x0F
                    Local0 = 0x7F
                    While ((Local0 && CMD1))
                    {
                        Sleep (One)
                        Local0--
                    }

                    If ((CMD1 == Zero))
                    {
                        Local0 = EDA1
                    }
                    Else
                    {
                        Local0 = Ones
                    }

                    Release (MUEC)
                    Return (Local0)
                }

                Return (Ones)
            }

            Name (WRQK, 0x02)
            Name (RDQK, 0x03)
            Name (SDBT, 0x04)
            Name (RCBT, 0x05)
            Name (WRBT, 0x06)
            Name (RDBT, 0x07)
            Name (WRWD, 0x08)
            Name (RDWD, 0x09)
            Name (WRBL, 0x0A)
            Name (RDBL, 0x0B)
            Name (WBLP, 0x8A)
            Name (RBLP, 0x8B)
            Name (PCLL, 0x0C)
            Name (GOOD, Zero)
            Name (UKER, 0x07)
            Name (DAER, 0x10)
            Name (DERR, 0x11)
            Name (CMDN, 0x12)
            Name (UKE2, 0x13)
            Name (DADN, 0x17)
            Name (SBTO, 0x18)
            Name (USPT, 0x19)
            Name (SBBY, 0x1A)
            Method (SR_T, 3, Serialized)
            {
                Local0 = Package (0x03)
                    {
                        0x07, 
                        Zero, 
                        Zero
                    }
                OperationRegion (ECBD, SystemMemory, 0xFEFF0700, 0x80)
                Field (ECBD, ByteAcc, Lock, Preserve)
                {
                    Offset (0x40), 
                    Offset (0x41), 
                    BCNT,   8, 
                    BDAT,   240
                }

                If ((Arg0 != RDBL))
                {
                    If ((Arg0 != RDWD))
                    {
                        If ((Arg0 != RDBT))
                        {
                            If ((Arg0 != RCBT))
                            {
                                If ((Arg0 != RDQK))
                                {
                                    If ((Arg0 != RBLP))
                                    {
                                        Return (Local0)
                                    }
                                }
                            }
                        }
                    }
                }

                If ((Acquire (MUEC, 0xFFFF) == Zero))
                {
                    CDT1 = Zero
                    CDT2 = Arg0
                    Local1 = (Arg1 << One)
                    CDT3 = Local1
                    CDT4 = Arg2
                    CDT5 = Zero
                    CMD1 = 0x9A
                    ESEM = 0x0F
                    Local2 = 0xFA
                    While ((Local2 && CMD1))
                    {
                        Sleep (0x02)
                        Local2--
                    }

                    If ((CMD1 == Zero))
                    {
                        If ((EDA1 == 0x80))
                        {
                            Local0 [Zero] = GOOD
                            If ((Arg0 == RDBL))
                            {
                                Local0 [One] = BCNT
                                Local0 [0x02] = BDAT
                            }

                            If ((Arg0 == RBLP))
                            {
                                Local0 [One] = BCNT
                                Local0 [0x02] = BDAT
                            }

                            If ((Arg0 == RDWD))
                            {
                                Local0 [One] = 0x02
                                Local1 = EDA3
                                Local1 <<= 0x08
                                Local1 |= EDA2
                                Local0 [0x02] = Local1
                            }

                            If ((Arg0 == RDBT))
                            {
                                Local0 [One] = One
                                Local0 [0x02] = EDA2
                            }

                            If ((Arg0 == RCBT))
                            {
                                Local0 [One] = One
                                Local0 [0x02] = EDA2
                            }
                        }
                    }
                    Else
                    {
                        Local0 [Zero] = UKER
                        Local0 [One] = Zero
                        Local0 [0x02] = 0xFF
                    }

                    Release (MUEC)
                }

                Return (Local0)
            }

            Method (SW_T, 5, Serialized)
            {
                Local0 = Package (0x03)
                    {
                        0x07, 
                        Zero, 
                        Zero
                    }
                OperationRegion (ECBD, SystemMemory, 0xFEFF0380, 0x80)
                Field (ECBD, ByteAcc, Lock, Preserve)
                {
                    Offset (0x07), 
                    BDAT,   256
                }

                If ((Arg0 != WRBL))
                {
                    If ((Arg0 != WRWD))
                    {
                        If ((Arg0 != WRBT))
                        {
                            If ((Arg0 != SDBT))
                            {
                                If ((Arg0 != WRQK))
                                {
                                    If ((Arg0 != WBLP))
                                    {
                                        Return (Local0)
                                    }
                                }
                            }
                        }
                    }
                }

                If ((Acquire (MUEC, 0xFFFF) == Zero))
                {
                    CDT1 = Zero
                    CDT2 = Arg0
                    Local1 = (Arg1 << One)
                    CDT3 = Local1
                    CDT4 = Arg2
                    If ((Arg0 == WRBL))
                    {
                        CDT5 = Arg3
                        BDAT = Arg4
                    }

                    If ((Arg0 == WBLP))
                    {
                        CDT5 = Arg3
                        BDAT = Arg4
                    }

                    If ((Arg0 == WRWD))
                    {
                        CDT5 = Zero
                        CDT6 = Arg4
                        Local3 = (Arg4 & 0xFF)
                        CDT6 = Local3
                        Local4 = (Arg4 & 0xFF00)
                        Local4 >>= 0x08
                        CDT7 = Local4
                    }

                    If ((Arg0 == WRBT))
                    {
                        CDT5 = Zero
                        CDT6 = Arg4
                    }

                    If ((Arg0 == SDBT))
                    {
                        CDT5 = Zero
                        CDT6 = Arg4
                    }

                    CMD1 = 0x9A
                    ESEM = 0x0F
                    Local2 = 0x7F
                    While ((Local2 && CMD1))
                    {
                        Sleep (One)
                        Local2--
                    }

                    If ((CMD1 == Zero))
                    {
                        Local0 [Zero] = Zero
                    }
                    Else
                    {
                        Local0 [Zero] = UKER
                    }

                    Release (MUEC)
                }

                Return (Local0)
            }

            Method (RE_P, 1, NotSerialized)
            {
                Return (Zero)
            }

            Method (WE_P, 2, NotSerialized)
            {
                Return (Zero)
            }

            Method (WB_R, 2, Serialized)
            {
                If ((Acquire (MUEC, 0xFFFF) == Zero))
                {
                    CDT1 = Arg0
                    CDT2 = Arg1
                    CMD1 = 0x86
                    ESEM = 0x0F
                    Local0 = 0x7F
                    While ((Local0 && CMD1))
                    {
                        Sleep (One)
                        Local0--
                    }

                    If ((CMD1 == Zero))
                    {
                        Local0 = One
                    }
                    Else
                    {
                        Local0 = Ones
                    }

                    Release (MUEC)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (EX_T, 6, NotSerialized)
            {
                Local1 = Package (0x06)
                    {
                        0x10, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                If ((Acquire (MUEC, 0xFFFF) == Zero))
                {
                    CDT1 = Arg1
                    CDT2 = Arg2
                    CDT3 = Arg3
                    CDT4 = Arg4
                    CDT5 = Arg5
                    CMD1 = Arg0
                    ESEM = 0x0F
                    Local0 = 0x7F
                    While ((Local0 && CMD1))
                    {
                        Sleep (One)
                        Local0--
                    }

                    If ((CMD1 == Zero))
                    {
                        Local1 [Zero] = Zero
                        Local1 [One] = EDA1
                        Local1 [0x02] = EDA2
                        Local1 [0x03] = EDA3
                        Local1 [0x04] = EDA4
                        Local1 [0x05] = EDA5
                    }
                    Else
                    {
                        Local1 [Zero] = 0x10
                    }

                    Release (MUEC)
                }

                Return (Local1)
            }

            Method (EX_1, 1, Serialized)
            {
                Local1 = Package (0x0D)
                    {
                        0x10, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                If ((Acquire (MUEC, 0xFFFF) == Zero))
                {
                    CDT1 = DerefOf (Arg0 [One])
                    CDT2 = DerefOf (Arg0 [0x02])
                    CDT3 = DerefOf (Arg0 [0x03])
                    CDT4 = DerefOf (Arg0 [0x04])
                    CDT5 = DerefOf (Arg0 [0x05])
                    CDT6 = DerefOf (Arg0 [0x06])
                    CDT7 = DerefOf (Arg0 [0x07])
                    CDT8 = DerefOf (Arg0 [0x08])
                    CDT9 = DerefOf (Arg0 [0x09])
                    CD10 = DerefOf (Arg0 [0x0A])
                    CD11 = DerefOf (Arg0 [0x0B])
                    CD12 = DerefOf (Arg0 [0x0C])
                    CMD1 = DerefOf (Arg0 [Zero])
                    ESEM = 0x0F
                    Local0 = 0x7F
                    While ((Local0 && CMD1))
                    {
                        Sleep (One)
                        Local0--
                    }

                    If ((CMD1 == Zero))
                    {
                        Local1 [Zero] = Zero
                        Local1 [One] = EDA1
                        Local1 [0x02] = EDA2
                        Local1 [0x03] = EDA3
                        Local1 [0x04] = EDA4
                        Local1 [0x05] = EDA5
                        Local1 [0x06] = EDA6
                        Local1 [0x07] = EDA7
                        Local1 [0x08] = EDA8
                        Local1 [0x09] = EDA9
                        Local1 [0x0A] = ED10
                        Local1 [0x0B] = ED11
                        Local1 [0x0C] = ED12
                    }
                    Else
                    {
                        Local1 [Zero] = 0x10
                    }

                    Release (MUEC)
                }

                Return (Local1)
            }

            Method (ES_M, 6, NotSerialized)
            {
                Local1 = Package (0x05)
                    {
                        0x11, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                If ((Arg0 > One))
                {
                    Return (Local1)
                }

                If ((Acquire (MUEC, 0xFFFF) == Zero))
                {
                    CDT1 = Arg0
                    CDT2 = Arg1
                    CDT3 = Arg2
                    CDT4 = Arg3
                    CDT5 = Zero
                    CDT6 = Arg4
                    CDT7 = Arg5
                    CMD1 = 0x9A
                    ESEM = 0x0F
                    Local2 = 0x7F
                    While ((Local2 && CMD1))
                    {
                        Sleep (One)
                        Local2--
                    }

                    If ((CMD1 == Zero))
                    {
                        Local1 [Zero] = Zero
                        Local1 [One] = EDA1
                        Local1 [0x02] = EDA2
                        Local1 [0x03] = EDA3
                        Local1 [0x04] = EDA4
                    }
                    Else
                    {
                        Local1 [Zero] = 0x10
                    }

                    Release (MUEC)
                }

                Return (Local1)
            }

            Method (ES_B, 6, NotSerialized)
            {
                OperationRegion (EWW2, SystemMemory, 0xFEFF0700, 0x80)
                Field (EWW2, ByteAcc, Lock, Preserve)
                {
                    Offset (0x07), 
                    SMWB,   256, 
                    Offset (0x40), 
                    SMAK,   8, 
                    SMLT,   8, 
                    SMRB,   256
                }

                Local1 = Package (0x05)
                    {
                        0x11, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                If ((Arg0 > One))
                {
                    Return (Local1)
                }

                If ((Acquire (MUEC, 0xFFFF) == Zero))
                {
                    CDT1 = Arg0
                    CDT2 = Arg1
                    CDT3 = Arg2
                    CDT4 = Arg3
                    CDT5 = Zero
                    If ((Arg1 == 0x0A))
                    {
                        CDT5 = Arg4
                        SMWB = Arg5
                    }

                    CMD1 = 0x9A
                    ESEM = 0x0F
                    Local2 = 0x7F
                    While ((Local2 && CMD1))
                    {
                        Sleep (One)
                        Local2--
                    }

                    If ((CMD1 == Zero))
                    {
                        Local1 [Zero] = Zero
                        Local1 [One] = EDA1
                        Local1 [0x02] = EDA2
                        Local1 [0x03] = EDA3
                        Local1 [0x04] = SMRB
                    }
                    Else
                    {
                        Local1 [Zero] = 0x10
                    }

                    Release (MUEC)
                }

                Return (Local1)
            }

            Method (WE_I, 0, Serialized)
            {
                Local0 = 0x4000
                Local1 = (AEIC & 0x02)
                While (((Local0 != Zero) && (Local1 == 0x02)))
                {
                    Local1 = (AEIC & 0x02)
                    Local0--
                }
            }

            Method (WE_O, 0, Serialized)
            {
                Local0 = 0x4000
                Local1 = (AEIC & One)
                While (((Local0 != Zero) && (Local1 == Zero)))
                {
                    Local1 = (AEIC & One)
                    Local0--
                }
            }

            Method (RF_O, 1, Serialized)
            {
                If ((Acquire (MUEC, 0xFFFF) == Zero))
                {
                    CDT1 = Arg0
                    CMD1 = 0x83
                    ESEM = 0x0F
                    Local0 = 0x7F
                    While ((Local0 && CMD1))
                    {
                        Sleep (One)
                        Local0--
                    }

                    If ((CMD1 == Zero))
                    {
                        Local0 = EDA1
                    }
                    Else
                    {
                        Local0 = Ones
                    }

                    Release (MUEC)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WF_O, 2, Serialized)
            {
                If ((Acquire (MUEC, 0xFFFF) == Zero))
                {
                    CDT1 = Arg0
                    CDT2 = Arg1
                    CMD1 = 0x84
                    ESEM = 0x0F
                    Local0 = 0x7F
                    While ((Local0 && CMD1))
                    {
                        Sleep (One)
                        Local0--
                    }

                    If ((CMD1 == Zero))
                    {
                        Local0 = One
                    }
                    Else
                    {
                        Local0 = Ones
                    }

                    Release (MUEC)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (RB_O, 1, Serialized)
            {
                If ((Acquire (MUEC, 0xFFFF) == Zero))
                {
                    CDT1 = Arg0
                    CMD1 = 0x85
                    ESEM = 0x0F
                    Local0 = 0x7F
                    While ((Local0 && CMD1))
                    {
                        Sleep (One)
                        Local0--
                    }

                    If ((CMD1 == Zero))
                    {
                        Local0 = EDA1
                    }
                    Else
                    {
                        Local0 = Ones
                    }

                    Release (MUEC)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WB_O, 2, Serialized)
            {
                If ((Acquire (MUEC, 0xFFFF) == Zero))
                {
                    CDT1 = Arg0
                    CDT2 = Arg1
                    CMD1 = 0x86
                    ESEM = 0x0F
                    Local0 = 0x7F
                    While ((Local0 && CMD1))
                    {
                        Sleep (One)
                        Local0--
                    }

                    If ((CMD1 == Zero))
                    {
                        Local0 = One
                    }
                    Else
                    {
                        Local0 = Ones
                    }

                    Release (MUEC)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (PK_E, 1, NotSerialized)
            {
                If ((Acquire (MUEC, 0xFFFF) == Zero))
                {
                    CDT1 = Arg0
                    CMD1 = 0xB1
                    ESEM = 0x0F
                    Local0 = 0x7F
                    While ((Local0 && CMD1))
                    {
                        Sleep (One)
                        Local0--
                    }

                    If ((CMD1 == Zero))
                    {
                        Local0 = One
                    }
                    Else
                    {
                        Local0 = Ones
                    }

                    Release (MUEC)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (PK_L, 1, NotSerialized)
            {
                If ((Acquire (MUEC, 0xFFFF) == Zero))
                {
                    CDT1 = Arg0
                    CMD1 = 0xB0
                    ESEM = 0x0F
                    Local0 = 0x7F
                    While ((Local0 && CMD1))
                    {
                        Sleep (One)
                        Local0--
                    }

                    If ((CMD1 == Zero))
                    {
                        Local0 = One
                    }
                    Else
                    {
                        Local0 = Ones
                    }

                    Release (MUEC)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (PT_P, 1, NotSerialized)
            {
                If ((Acquire (MUEC, 0xFFFF) == Zero))
                {
                    CreateField (Arg0, Zero, 0x01F0, CDB0)
                    CDTB = CDB0
                    CMDB = 0x97
                    ESEB = 0x0F
                    Local0 = 0x7F
                    While ((Local0 && CMD1))
                    {
                        Sleep (One)
                        Local0--
                    }

                    If ((CMD1 == Zero))
                    {
                        Local0 = One
                    }
                    Else
                    {
                        Local0 = Ones
                    }

                    Release (MUEC)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (AC_P, 0, Serialized)
            {
                Return ((GP_S () & One))
            }

            Method (DC_P, 1, Serialized)
            {
                Local0 = GP_S ()
                If (Arg0)
                {
                    Local0 &= 0x04
                }
                Else
                {
                    Local0 &= 0x02
                }

                If (Local0)
                {
                    Local0 = One
                }
                Else
                {
                    Local0 = Zero
                }

                Return (Local0)
            }

            Method (GP_S, 0, Serialized)
            {
                Local0 = EPWS
                Return (Local0)
            }

            Method (BC_E, 1, Serialized)
            {
                If (Arg0)
                {
                    If (ECAV ())
                    {
                        Local1 = EB1S
                        Local1 &= 0xFFFF
                        If ((Local1 != 0xFFFF))
                        {
                            Local1 &= 0x16
                            If ((Local1 == 0x04))
                            {
                                Local0 = Zero
                            }
                            ElseIf ((Local1 == 0x02))
                            {
                                Local0 = One
                            }
                            ElseIf ((Local1 == 0x10))
                            {
                                Local0 = One
                            }
                        }

                        Local0 = Ones
                    }
                    Else
                    {
                        Local0 = Ones
                    }

                    Return (Local0)
                }
                Else
                {
                    If (ECAV ())
                    {
                        Local1 = EB0S
                        Local1 &= 0xFFFF
                        If ((Local1 != 0xFFFF))
                        {
                            Local1 &= 0x16
                            If ((Local1 == 0x04))
                            {
                                Local0 = Zero
                            }
                            ElseIf ((Local1 == 0x02))
                            {
                                Local0 = One
                            }
                            ElseIf ((Local1 == 0x10))
                            {
                                Local0 = One
                            }
                        }

                        Local0 = Ones
                    }
                    Else
                    {
                        Local0 = Ones
                    }

                    Return (Local0)
                }
            }
        }
    }

    Scope (_SB.PCI0.LPCB.EC0)
    {
    }

    Name (ATKP, Zero)
    Scope (\)
    {
        Device (WMI0)
        {
            Name (_HID, "PNP0C14")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (WAPF, Zero)
            Name (_WDG, Buffer (0x01B8)
            {
                /* 0000 */  0x00, 0x24, 0x14, 0x39, 0xA3, 0xC6, 0xFA, 0x40,
                /* 0008 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,
                /* 0010 */  0x30, 0x30, 0x01, 0x01, 0x00, 0x24, 0x14, 0x49,
                /* 0018 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,
                /* 0020 */  0x52, 0x83, 0x41, 0x00, 0x30, 0x31, 0x01, 0x01,
                /* 0028 */  0x00, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,
                /* 0030 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,
                /* 0038 */  0x30, 0x32, 0x01, 0x01, 0x01, 0x24, 0x14, 0x49,
                /* 0040 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,
                /* 0048 */  0x52, 0x83, 0x41, 0x00, 0x31, 0x31, 0x01, 0x01,
                /* 0050 */  0x01, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,
                /* 0058 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,
                /* 0060 */  0x31, 0x32, 0x01, 0x01, 0x02, 0x24, 0x14, 0x49,
                /* 0068 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,
                /* 0070 */  0x52, 0x83, 0x41, 0x00, 0x32, 0x31, 0x01, 0x01,
                /* 0078 */  0x02, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,
                /* 0080 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,
                /* 0088 */  0x32, 0x32, 0x01, 0x01, 0x03, 0x24, 0x14, 0x49,
                /* 0090 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,
                /* 0098 */  0x52, 0x83, 0x41, 0x00, 0x33, 0x31, 0x01, 0x01,
                /* 00A0 */  0x03, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,
                /* 00A8 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,
                /* 00B0 */  0x33, 0x32, 0x01, 0x01, 0x04, 0x24, 0x14, 0x49,
                /* 00B8 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,
                /* 00C0 */  0x52, 0x83, 0x41, 0x00, 0x34, 0x31, 0x01, 0x01,
                /* 00C8 */  0x04, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,
                /* 00D0 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,
                /* 00D8 */  0x34, 0x32, 0x01, 0x01, 0x05, 0x24, 0x14, 0x49,
                /* 00E0 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,
                /* 00E8 */  0x52, 0x83, 0x41, 0x00, 0x35, 0x31, 0x01, 0x01,
                /* 00F0 */  0x05, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,
                /* 00F8 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,
                /* 0100 */  0x35, 0x32, 0x01, 0x01, 0x06, 0x24, 0x14, 0x49,
                /* 0108 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,
                /* 0110 */  0x52, 0x83, 0x41, 0x00, 0x36, 0x31, 0x01, 0x01,
                /* 0118 */  0x06, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,
                /* 0120 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,
                /* 0128 */  0x36, 0x32, 0x01, 0x01, 0x07, 0x24, 0x14, 0x49,
                /* 0130 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,
                /* 0138 */  0x52, 0x83, 0x41, 0x00, 0x37, 0x31, 0x01, 0x01,
                /* 0140 */  0x07, 0x24, 0x14, 0x4A, 0xA3, 0xC6, 0xFA, 0x40,
                /* 0148 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,
                /* 0150 */  0x37, 0x32, 0x01, 0x01, 0x00, 0x24, 0x14, 0x59,
                /* 0158 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,
                /* 0160 */  0x52, 0x83, 0x41, 0x00, 0x80, 0x00, 0x01, 0x08,
                /* 0168 */  0x00, 0x24, 0x14, 0x69, 0xA3, 0xC6, 0xFA, 0x40,
                /* 0170 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,
                /* 0178 */  0x30, 0x35, 0x01, 0x02, 0x00, 0x24, 0x14, 0x79,
                /* 0180 */  0xA3, 0xC6, 0xFA, 0x40, 0xBA, 0xDB, 0x8A, 0x26,
                /* 0188 */  0x52, 0x83, 0x41, 0x00, 0x30, 0x36, 0x01, 0x02,
                /* 0190 */  0x00, 0x24, 0x14, 0x89, 0xA3, 0xC6, 0xFA, 0x40,
                /* 0198 */  0xBA, 0xDB, 0x8A, 0x26, 0x52, 0x83, 0x41, 0x00,
                /* 01A0 */  0x30, 0x37, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,
                /* 01A8 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,
                /* 01B0 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x01 
            })
            Name (XVCD, Zero)
            Method (WQ00, 1, NotSerialized)
            {
                Return (XVCD)
            }

            OperationRegion (\WMIA, SystemMemory, PM_B, 0x9000)
            Field (WMIA, AnyAcc, NoLock, Preserve)
            {
                WAG1,   2048, 
                WAG2,   2048, 
                WAG3,   2048, 
                WAG4,   2048, 
                WAG5,   2048, 
                WAG6,   2048, 
                WAG7,   2048, 
                WAG8,   2048, 
                Offset (0x1000), 
                WPD1,   32768, 
                WPD2,   32768, 
                WPD3,   32768, 
                WPD4,   32768, 
                WPD5,   32768, 
                WPD6,   32768, 
                WPD7,   32768, 
                WPD8,   32768
            }

            Method (WQ01, 1, NotSerialized)
            {
                Return (WAG1)
            }

            Method (WS01, 2, NotSerialized)
            {
                WAG1 = Arg1
                Return (Zero)
            }

            Method (WQ02, 1, NotSerialized)
            {
                Return (WPD1)
            }

            Method (WS02, 2, NotSerialized)
            {
                WPD1 = Arg1
                Return (Zero)
            }

            Method (WQ11, 1, NotSerialized)
            {
                Return (WAG2)
            }

            Method (WS11, 2, NotSerialized)
            {
                WAG2 = Arg1
                Return (Zero)
            }

            Method (WQ12, 1, NotSerialized)
            {
                Return (WPD2)
            }

            Method (WS12, 2, NotSerialized)
            {
                WPD2 = Arg1
                Return (Zero)
            }

            Method (WQ21, 1, NotSerialized)
            {
                Return (WAG3)
            }

            Method (WS21, 2, NotSerialized)
            {
                WAG3 = Arg1
                Return (Zero)
            }

            Method (WQ22, 1, NotSerialized)
            {
                Return (WPD3)
            }

            Method (WS22, 2, NotSerialized)
            {
                WPD3 = Arg1
                Return (Zero)
            }

            Method (WQ31, 1, NotSerialized)
            {
                Return (WAG4)
            }

            Method (WS31, 2, NotSerialized)
            {
                WAG4 = Arg1
                Return (Zero)
            }

            Method (WQ32, 1, NotSerialized)
            {
                Return (WPD4)
            }

            Method (WS32, 2, NotSerialized)
            {
                WPD4 = Arg1
                Return (Zero)
            }

            Method (WQ41, 1, NotSerialized)
            {
                Return (WAG5)
            }

            Method (WS41, 2, NotSerialized)
            {
                WAG5 = Arg1
                Return (Zero)
            }

            Method (WQ42, 1, NotSerialized)
            {
                Return (WPD5)
            }

            Method (WS42, 2, NotSerialized)
            {
                WPD5 = Arg1
                Return (Zero)
            }

            Method (WQ51, 1, NotSerialized)
            {
                Return (WAG6)
            }

            Method (WS51, 2, NotSerialized)
            {
                WAG6 = Arg1
                Return (Zero)
            }

            Method (WQ52, 1, NotSerialized)
            {
                Return (WPD6)
            }

            Method (WS52, 2, NotSerialized)
            {
                WPD6 = Arg1
                Return (Zero)
            }

            Method (WQ61, 1, NotSerialized)
            {
                Return (WAG7)
            }

            Method (WS61, 2, NotSerialized)
            {
                WAG7 = Arg1
                Return (Zero)
            }

            Method (WQ62, 1, NotSerialized)
            {
                Return (WPD7)
            }

            Method (WS62, 2, NotSerialized)
            {
                WPD7 = Arg1
                Return (Zero)
            }

            Method (WQ71, 1, NotSerialized)
            {
                Return (WAG8)
            }

            Method (WS71, 2, NotSerialized)
            {
                WAG8 = Arg1
                Return (Zero)
            }

            Method (WQ72, 1, NotSerialized)
            {
                Return (WPD8)
            }

            Method (WS72, 2, NotSerialized)
            {
                WPD8 = Arg1
                Return (Zero)
            }

            Method (WM05, 3, NotSerialized)
            {
                CreateDWordField (Arg2, Zero, WMA5)
                If ((WMA5 == One))
                {
                    WG_F (PM_B, (PM_B + 0x1000), One)
                    Return (Zero)
                }

                If ((WMA5 == 0x02))
                {
                    WG_F ((PM_B + 0x0100), (PM_B + 0x2000), 0x02)
                    Return (Zero)
                }

                If ((WMA5 == 0x03))
                {
                    WG_F ((PM_B + 0x0200), (PM_B + 0x3000), 0x03)
                    Return (Zero)
                }

                If ((WMA5 == 0x04))
                {
                    WG_F ((PM_B + 0x0300), (PM_B + 0x4000), 0x04)
                    Return (Zero)
                }

                If ((WMA5 == 0x05))
                {
                    WG_F ((PM_B + 0x0400), (PM_B + 0x5000), 0x05)
                    Return (Zero)
                }

                If ((WMA5 == 0x06))
                {
                    WG_F ((PM_B + 0x0500), (PM_B + 0x6000), 0x06)
                    Return (Zero)
                }

                If ((WMA5 == 0x07))
                {
                    WG_F ((PM_B + 0x0600), (PM_B + 0x7000), 0x07)
                    Return (Zero)
                }

                If ((WMA5 == 0x08))
                {
                    WG_F ((PM_B + 0x0700), (PM_B + 0x8000), 0x08)
                    Return (Zero)
                }

                Return (Zero)
            }

            Method (WM06, 3, Serialized)
            {
                CreateDWordField (Arg2, Zero, WM6A)
                Local0 = IN_T (WM6A)
                Return (Local0)
            }

            Method (WM07, 3, Serialized)
            {
                CreateDWordField (Arg2, Zero, WM7A)
                Local0 = WD_G (WM7A)
                Return (Local0)
            }

            Method (NTFY, 1, Serialized)
            {
                XVCD = Arg0
                Notify (WMI0, 0x80)
            }

            Method (WSMI, 1, Serialized)
            {
                PM_S = Arg0
                ISMI (0xDF)
                Stall (0xFF)
            }

            Name (WQBA, Buffer (0x0914)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,
                /* 0008 */  0x04, 0x09, 0x00, 0x00, 0x50, 0x67, 0x00, 0x00,
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,
                /* 0018 */  0x28, 0xC7, 0xB2, 0x00, 0x01, 0x06, 0x18, 0x42,
                /* 0020 */  0x10, 0x2B, 0x10, 0x92, 0x2B, 0x81, 0x42, 0x04,
                /* 0028 */  0x0A, 0x44, 0x24, 0x81, 0x30, 0x28, 0x0D, 0x20,
                /* 0030 */  0x92, 0x03, 0x21, 0x17, 0x4C, 0x4C, 0x80, 0x08,
                /* 0038 */  0x08, 0x79, 0x15, 0x60, 0x53, 0x80, 0x49, 0x10,
                /* 0040 */  0xF5, 0xEF, 0x0F, 0x51, 0x12, 0x1C, 0x4A, 0x08,
                /* 0048 */  0x84, 0x24, 0x0A, 0x30, 0x2F, 0x40, 0xB7, 0x00,
                /* 0050 */  0xC3, 0x02, 0x6C, 0x0B, 0x30, 0x2D, 0xC0, 0x31,
                /* 0058 */  0x24, 0x95, 0x06, 0x4E, 0x09, 0x2C, 0x05, 0x42,
                /* 0060 */  0x42, 0x05, 0x28, 0x17, 0xE0, 0x5B, 0x80, 0x76,
                /* 0068 */  0x44, 0x49, 0x16, 0xB0, 0xA3, 0x30, 0x09, 0x3C,
                /* 0070 */  0x8A, 0xC8, 0x46, 0xE3, 0xD0, 0xD8, 0x61, 0x58,
                /* 0078 */  0x26, 0x98, 0x06, 0x71, 0x18, 0x65, 0x23, 0x8B,
                /* 0080 */  0xC0, 0x13, 0xEA, 0x74, 0x74, 0x05, 0x08, 0x13,
                /* 0088 */  0x20, 0x1E, 0x55, 0x18, 0xCD, 0x41, 0x91, 0x08,
                /* 0090 */  0xD0, 0x28, 0x31, 0x63, 0x22, 0xB0, 0x9D, 0x63,
                /* 0098 */  0x6B, 0x14, 0xA7, 0x51, 0xB8, 0x00, 0xE9, 0x18,
                /* 00A0 */  0x1A, 0xC1, 0x71, 0x85, 0xF7, 0xC8, 0x8E, 0x90,
                /* 00A8 */  0x59, 0x1C, 0x8B, 0x20, 0x43, 0x85, 0xEB, 0x10,
                /* 00B0 */  0x4E, 0x73, 0x32, 0xC8, 0x89, 0x9C, 0x49, 0xEC,
                /* 00B8 */  0x08, 0x05, 0x09, 0xB0, 0x8E, 0x21, 0xA4, 0x58,
                /* 00C0 */  0x51, 0x6A, 0xC6, 0xD3, 0x0C, 0x82, 0x34, 0x0A,
                /* 00C8 */  0xA5, 0xC9, 0x79, 0x00, 0x61, 0xC2, 0xC3, 0x20,
                /* 00D0 */  0x30, 0xFE, 0x11, 0x61, 0x64, 0x40, 0xC8, 0x33,
                /* 00D8 */  0xB2, 0x86, 0x6A, 0x02, 0xBB, 0x17, 0xE0, 0x6C,
                /* 00E0 */  0x6A, 0x32, 0x36, 0x39, 0x29, 0x9B, 0x1D, 0x41,
                /* 00E8 */  0x68, 0x0B, 0x5E, 0xDA, 0x04, 0x18, 0x04, 0x13,
                /* 00F0 */  0x4A, 0x24, 0x0F, 0xE5, 0x78, 0xA2, 0x54, 0x88,
                /* 00F8 */  0xA4, 0xF1, 0xC5, 0x88, 0x52, 0x1C, 0x8A, 0x60,
                /* 0100 */  0x23, 0xB6, 0x86, 0x21, 0x98, 0x98, 0x21, 0xE3,
                /* 0108 */  0x07, 0xB7, 0xFD, 0x83, 0x01, 0x53, 0x00, 0xD1,
                /* 0110 */  0x02, 0x88, 0x22, 0x8D, 0x06, 0x75, 0x18, 0x48,
                /* 0118 */  0xF0, 0x70, 0xE0, 0x71, 0x9E, 0xD6, 0xF9, 0x1D,
                /* 0120 */  0xD7, 0x41, 0x04, 0x39, 0xE1, 0xE3, 0xAA, 0xF3,
                /* 0128 */  0x54, 0x40, 0x46, 0xC6, 0xFE, 0xFF, 0x58, 0x09,
                /* 0130 */  0x3A, 0x38, 0x26, 0x40, 0x71, 0x0D, 0xA8, 0x69,
                /* 0138 */  0x3E, 0x1D, 0xB0, 0x81, 0x86, 0xC3, 0x0C, 0xD1,
                /* 0140 */  0xA3, 0x0D, 0x77, 0x02, 0x87, 0xC8, 0x00, 0x3D,
                /* 0148 */  0xA2, 0x07, 0x03, 0xEC, 0x10, 0x4F, 0xE6, 0x25,
                /* 0150 */  0xA0, 0x54, 0x01, 0x66, 0x4F, 0x08, 0x9A, 0x76,
                /* 0158 */  0x82, 0xE3, 0xF1, 0x71, 0xC0, 0xF3, 0x39, 0xE1,
                /* 0160 */  0x04, 0x96, 0x3F, 0x08, 0xD4, 0xC8, 0x0C, 0xED,
                /* 0168 */  0x71, 0x9E, 0xD6, 0x5B, 0x81, 0x8F, 0x00, 0x26,
                /* 0170 */  0xB0, 0x58, 0x08, 0x6D, 0x52, 0xE3, 0x01, 0x02,
                /* 0178 */  0x8A, 0x0F, 0x05, 0x42, 0x78, 0x75, 0xF0, 0x7C,
                /* 0180 */  0x4D, 0x30, 0x32, 0x84, 0x9C, 0x8C, 0x07, 0x35,
                /* 0188 */  0x0A, 0x83, 0xD6, 0x0A, 0xAE, 0x9B, 0x40, 0x02,
                /* 0190 */  0x47, 0x84, 0xD0, 0x67, 0xC3, 0xA2, 0x86, 0x4D,
                /* 0198 */  0x8F, 0x16, 0xFC, 0x54, 0xC1, 0x20, 0xCF, 0xE0,
                /* 01A0 */  0x11, 0xC0, 0x23, 0x39, 0x21, 0x1F, 0x3E, 0x3C,
                /* 01A8 */  0x30, 0xF8, 0xB3, 0xF0, 0x91, 0x02, 0x1C, 0x1E,
                /* 01B0 */  0xC1, 0x84, 0xF3, 0x0A, 0x01, 0x6B, 0xA4, 0xF0,
                /* 01B8 */  0x6F, 0x11, 0x46, 0xF6, 0xA9, 0xE1, 0xB5, 0x21,
                /* 01C0 */  0x81, 0x0F, 0x1E, 0x81, 0xB1, 0x43, 0xB5, 0x5F,
                /* 01C8 */  0x01, 0x08, 0xC1, 0xA3, 0x3D, 0x0A, 0x3C, 0x7B,
                /* 01D0 */  0x44, 0x78, 0xDC, 0xC0, 0xFC, 0xFF, 0x8F, 0x1B,
                /* 01D8 */  0xB0, 0x09, 0x8A, 0x1C, 0x20, 0x7A, 0x0C, 0xFC,
                /* 01E0 */  0x04, 0x71, 0x0A, 0xF1, 0xC3, 0x1F, 0xC3, 0x11,
                /* 01E8 */  0x45, 0x89, 0x7C, 0x48, 0x3E, 0x9C, 0x18, 0xE1,
                /* 01F0 */  0x10, 0x9E, 0x49, 0xCE, 0xC0, 0x07, 0x0C, 0x4F,
                /* 01F8 */  0xEB, 0x14, 0x5E, 0x24, 0x3C, 0x02, 0x4C, 0xA0,
                /* 0200 */  0x43, 0x0C, 0x8D, 0xB2, 0x7E, 0x45, 0x80, 0x41,
                /* 0208 */  0x9D, 0x63, 0x00, 0x57, 0x30, 0xCF, 0x31, 0xE0,
                /* 0210 */  0x3B, 0x3E, 0xF0, 0x6B, 0x00, 0xE6, 0x7C, 0xF2,
                /* 0218 */  0x14, 0x03, 0x07, 0x97, 0x81, 0xBC, 0x04, 0xC4,
                /* 0220 */  0x79, 0x77, 0xF1, 0xCD, 0xC4, 0xD7, 0x02, 0xE3,
                /* 0228 */  0x3E, 0xC4, 0x80, 0x61, 0x60, 0x0F, 0x31, 0xE0,
                /* 0230 */  0xFC, 0xFF, 0x1F, 0x62, 0xE0, 0x05, 0x3F, 0xC4,
                /* 0238 */  0x00, 0x34, 0x91, 0x77, 0xBE, 0x90, 0x91, 0x55,
                /* 0240 */  0xF8, 0x10, 0x83, 0xBA, 0x21, 0x9C, 0xCF, 0x43,
                /* 0248 */  0xCA, 0xD3, 0x01, 0x93, 0x73, 0xCE, 0xA0, 0x87,
                /* 0250 */  0x18, 0xE0, 0x01, 0x88, 0xF7, 0x3E, 0x65, 0x32,
                /* 0258 */  0x82, 0x33, 0x35, 0xA0, 0x51, 0x7D, 0xAE, 0x00,
                /* 0260 */  0xC7, 0x79, 0x82, 0xFF, 0xFF, 0xCF, 0x13, 0x18,
                /* 0268 */  0xBC, 0xD7, 0x0A, 0x76, 0x0C, 0x60, 0x67, 0x0A,
                /* 0270 */  0x38, 0x57, 0x0A, 0x9F, 0x5A, 0x7C, 0x4E, 0xF0,
                /* 0278 */  0x18, 0xF9, 0x58, 0x0C, 0x1A, 0xF2, 0x41, 0xC0,
                /* 0280 */  0x0B, 0xB4, 0xAC, 0xB3, 0x0D, 0x68, 0x2E, 0x13,
                /* 0288 */  0xCF, 0x3D, 0xD8, 0xA3, 0x0D, 0x18, 0x90, 0x2A,
                /* 0290 */  0xBD, 0x05, 0xE8, 0x02, 0x82, 0x23, 0xF0, 0xC1,
                /* 0298 */  0x06, 0xF8, 0xC4, 0x3A, 0xD5, 0xD0, 0x30, 0x63,
                /* 02A0 */  0x54, 0x10, 0x18, 0xD4, 0xC1, 0x06, 0x70, 0x75,
                /* 02A8 */  0xE8, 0xF0, 0xC1, 0x06, 0x3C, 0xFF, 0xFF, 0x11,
                /* 02B0 */  0xB2, 0xC1, 0x9C, 0x44, 0x98, 0xA3, 0x08, 0xF6,
                /* 02B8 */  0x2C, 0xE1, 0x9B, 0x0D, 0x78, 0xB0, 0xB1, 0x27,
                /* 02C0 */  0x1B, 0xB0, 0x9C, 0x09, 0x9E, 0x6C, 0x80, 0x49,
                /* 02C8 */  0xF8, 0x93, 0x0D, 0x40, 0x1E, 0xD8, 0x27, 0x81,
                /* 02D0 */  0x77, 0x80, 0xFF, 0xFF, 0x93, 0x0D, 0x60, 0xF1,
                /* 02D8 */  0x4A, 0x81, 0x3D, 0xD9, 0x40, 0x5E, 0xBC, 0x4E,
                /* 02E0 */  0x36, 0xE0, 0x3A, 0x03, 0x82, 0xED, 0x08, 0x02,
                /* 02E8 */  0xF3, 0x6C, 0x03, 0x9C, 0xCE, 0x80, 0xC0, 0xE1,
                /* 02F0 */  0xFF, 0x7F, 0x06, 0x04, 0x1C, 0x9E, 0x5B, 0x9E,
                /* 02F8 */  0x01, 0xC1, 0x75, 0xF2, 0x64, 0x67, 0x40, 0x70,
                /* 0300 */  0xA1, 0x3C, 0x03, 0x02, 0x66, 0xFF, 0xFF, 0x67,
                /* 0308 */  0x40, 0xC0, 0xD2, 0xE9, 0x80, 0x9D, 0x01, 0x01,
                /* 0310 */  0x4E, 0xFD, 0xFF, 0x2F, 0x20, 0xFC, 0x0C, 0x08,
                /* 0318 */  0x30, 0xEC, 0x66, 0x03, 0x1B, 0x1B, 0x7B, 0xB2,
                /* 0320 */  0x01, 0xCB, 0x19, 0x10, 0x77, 0xB2, 0x01, 0xEF,
                /* 0328 */  0xFF, 0xFF, 0x0C, 0x08, 0x30, 0xE9, 0x64, 0x03,
                /* 0330 */  0x58, 0xFB, 0xFF, 0x9F, 0x01, 0x01, 0x63, 0x67,
                /* 0338 */  0x1B, 0x60, 0x75, 0x06, 0x04, 0xBC, 0xFF, 0xFF,
                /* 0340 */  0xCF, 0x80, 0xF8, 0x63, 0xCB, 0x33, 0x20, 0xB8,
                /* 0348 */  0x70, 0x9F, 0x01, 0xC1, 0x87, 0xF1, 0x0C, 0x08,
                /* 0350 */  0xF0, 0xEF, 0x74, 0xC0, 0x8E, 0x36, 0xFC, 0xFF,
                /* 0358 */  0x7F, 0x06, 0x04, 0x18, 0x75, 0x10, 0x60, 0x67,
                /* 0360 */  0x40, 0xC0, 0xD3, 0xFF, 0xFF, 0x0C, 0x08, 0x58,
                /* 0368 */  0xBB, 0xD9, 0xC0, 0xC6, 0xC6, 0x9E, 0x6C, 0xC0,
                /* 0370 */  0x72, 0x06, 0xC4, 0x9D, 0x6C, 0xC0, 0x7F, 0x06,
                /* 0378 */  0x04, 0x5C, 0xFD, 0xFF, 0xCF, 0x80, 0x80, 0x95,
                /* 0380 */  0x93, 0x0D, 0xE0, 0xF1, 0x0C, 0x08, 0xF8, 0x39,
                /* 0388 */  0x0A, 0xFC, 0xFF, 0x9F, 0x01, 0x01, 0x6E, 0xCD,
                /* 0390 */  0xE1, 0x19, 0x10, 0x5C, 0x33, 0xF3, 0x19, 0x10,
                /* 0398 */  0x6C, 0xF7, 0x1A, 0x9F, 0x01, 0xC1, 0xFF, 0xFF,
                /* 03A0 */  0x3F, 0x03, 0x02, 0xEC, 0x39, 0x1D, 0xB0, 0xA3,
                /* 03A8 */  0x0D, 0xE0, 0xEE, 0xFF, 0x7F, 0x06, 0x04, 0xEC,
                /* 03B0 */  0x1C, 0x04, 0xD8, 0x19, 0x10, 0xE0, 0xD6, 0xFF,
                /* 03B8 */  0xFF, 0x66, 0x03, 0x1F, 0x1B, 0x7B, 0xB2, 0x01,
                /* 03C0 */  0xCB, 0x19, 0x10, 0x77, 0xB2, 0x01, 0xFF, 0x19,
                /* 03C8 */  0x10, 0x60, 0xD0, 0xC9, 0x06, 0xF6, 0xFF, 0xFF,
                /* 03D0 */  0x0C, 0x08, 0x30, 0xE9, 0x6C, 0x03, 0xAC, 0xCE,
                /* 03D8 */  0x80, 0xC0, 0xEF, 0xFF, 0x7F, 0x06, 0x04, 0x3C,
                /* 03E0 */  0xDD, 0x5B, 0x9E, 0x01, 0xC1, 0x85, 0xFB, 0x0C,
                /* 03E8 */  0x08, 0x3E, 0x88, 0x67, 0x40, 0xC0, 0xFA, 0xFF,
                /* 03F0 */  0xFF, 0x0C, 0x08, 0x98, 0x38, 0x1D, 0xB0, 0x33,
                /* 03F8 */  0x20, 0xC0, 0xAC, 0x83, 0x00, 0x3B, 0xD8, 0xE0,
                /* 0400 */  0xFF, 0xFF, 0x67, 0x40, 0x80, 0x4D, 0x37, 0x1B,
                /* 0408 */  0xD8, 0xD8, 0xD8, 0x93, 0x0D, 0x58, 0xCE, 0x80,
                /* 0410 */  0xB8, 0x93, 0x0D, 0xF8, 0xCF, 0x80, 0x70, 0xFE,
                /* 0418 */  0xFF, 0x67, 0x40, 0x80, 0x2D, 0x27, 0x1B, 0xC0,
                /* 0420 */  0xE3, 0x95, 0x02, 0xF3, 0xFF, 0x3F, 0x03, 0x02,
                /* 0428 */  0x56, 0xCE, 0x36, 0xC0, 0xEA, 0x0C, 0x08, 0xF0,
                /* 0430 */  0xE0, 0xE0, 0xF2, 0x66, 0x83, 0xF9, 0xFF, 0x9F,
                /* 0438 */  0x01, 0xC1, 0x80, 0xFB, 0x0C, 0x08, 0xBE, 0xFB,
                /* 0440 */  0xC1, 0x33, 0x20, 0xC0, 0xBF, 0xD3, 0x01, 0x3B,
                /* 0448 */  0xDA, 0x80, 0xE3, 0xFF, 0x7F, 0x06, 0x04, 0x58,
                /* 0450 */  0x73, 0x10, 0x60, 0x67, 0x40, 0xC0, 0xE1, 0xFF,
                /* 0458 */  0xFF, 0x0C, 0x08, 0x98, 0xB9, 0xD9, 0xC0, 0xC6,
                /* 0460 */  0xC6, 0x9E, 0x6C, 0xC0, 0x72, 0x06, 0xC4, 0x9D,
                /* 0468 */  0x6C, 0xC0, 0x7F, 0x06, 0x04, 0x3C, 0xFE, 0xFF,
                /* 0470 */  0xCF, 0x80, 0xC0, 0xFC, 0x64, 0x03, 0x78, 0x3C,
                /* 0478 */  0x03, 0x02, 0x7E, 0xCE, 0x36, 0xB0, 0xFF, 0xFF,
                /* 0480 */  0x67, 0x40, 0x80, 0x3F, 0xDE, 0xCE, 0x80, 0x20,
                /* 0488 */  0xC3, 0x7D, 0x06, 0x04, 0xDF, 0xFD, 0xE0, 0x19,
                /* 0490 */  0x10, 0xD8, 0xFD, 0xFF, 0xCF, 0x80, 0x00, 0x43,
                /* 0498 */  0x4E, 0x07, 0xEC, 0x0C, 0x08, 0x78, 0xFD, 0xFF,
                /* 04A0 */  0x9F, 0x01, 0x01, 0x03, 0x07, 0x01, 0x76, 0x06,
                /* 04A8 */  0x04, 0xD8, 0x75, 0xB3, 0x81, 0xF9, 0xFF, 0xBF,
                /* 04B0 */  0x60, 0xC1, 0x38, 0xD9, 0x80, 0xE5, 0x0C, 0x88,
                /* 04B8 */  0x3B, 0xD9, 0x80, 0xFF, 0x0C, 0x08, 0x30, 0xE8,
                /* 04C0 */  0x64, 0x03, 0xE6, 0xFF, 0xFF, 0x19, 0x10, 0x60,
                /* 04C8 */  0xCB, 0xD9, 0x06, 0x58, 0x9D, 0x01, 0x81, 0xFB,
                /* 04D0 */  0xFF, 0xFF, 0x0C, 0x08, 0xB8, 0x38, 0x1A, 0x3C,
                /* 04D8 */  0x03, 0x82, 0xEB, 0x96, 0xE0, 0x33, 0x20, 0xD8,
                /* 04E0 */  0xEE, 0x07, 0xCF, 0x80, 0x00, 0x23, 0xFE, 0xFF,
                /* 04E8 */  0x67, 0x40, 0x60, 0x7B, 0x3A, 0x60, 0x67, 0x40,
                /* 04F0 */  0x80, 0x59, 0x07, 0x01, 0x76, 0xB0, 0x01, 0xD7,
                /* 04F8 */  0xFF, 0xFF, 0x0C, 0x08, 0x30, 0xE6, 0x66, 0x03,
                /* 0500 */  0x1B, 0x1B, 0x7B, 0xB2, 0x01, 0xCB, 0x19, 0x10,
                /* 0508 */  0x77, 0xB2, 0x01, 0xFF, 0x19, 0x10, 0x7C, 0xFF,
                /* 0510 */  0xFF, 0x33, 0x20, 0xC0, 0x88, 0x93, 0x0D, 0xE0,
                /* 0518 */  0xF1, 0x0C, 0x08, 0x96, 0xFF, 0xFF, 0x19, 0x10,
                /* 0520 */  0x98, 0x9F, 0x6D, 0x80, 0x55, 0xB4, 0x83, 0x0D,
                /* 0528 */  0x2A, 0xCC, 0xD9, 0x06, 0x10, 0x3D, 0xEF, 0x87,
                /* 0530 */  0x0F, 0x1F, 0x0C, 0x7C, 0x10, 0xC0, 0xDC, 0x6C,
                /* 0538 */  0xE0, 0xDC, 0x2A, 0x7C, 0x5D, 0xF1, 0x41, 0xC4,
                /* 0540 */  0x87, 0x07, 0xF6, 0xFF, 0x87, 0x8A, 0x13, 0x9E,
                /* 0548 */  0x9F, 0x1C, 0x7C, 0xB6, 0x81, 0x7D, 0x9A, 0x79,
                /* 0550 */  0x08, 0xC4, 0x21, 0x3C, 0xDB, 0x80, 0xFD, 0x4D,
                /* 0558 */  0xE1, 0x63, 0x81, 0xCF, 0x36, 0x00, 0x3F, 0x44,
                /* 0560 */  0x1C, 0x30, 0xE4, 0x64, 0x3C, 0xA8, 0x51, 0x58,
                /* 0568 */  0xE3, 0x25, 0x81, 0x4C, 0xDB, 0x04, 0x43, 0x43,
                /* 0570 */  0xE8, 0xB4, 0xE4, 0xB3, 0x0D, 0x38, 0xFF, 0xFF,
                /* 0578 */  0x67, 0x1B, 0x70, 0x9E, 0x4E, 0xF0, 0x67, 0x1B,
                /* 0580 */  0x30, 0x9D, 0x25, 0x30, 0x04, 0x1E, 0x32, 0xFC,
                /* 0588 */  0xD3, 0x0C, 0x3F, 0x3E, 0xBC, 0x3F, 0x24, 0xF0,
                /* 0590 */  0xB9, 0x0F, 0x6C, 0xA7, 0x0E, 0x38, 0x87, 0x19,
                /* 0598 */  0x60, 0x32, 0x26, 0xDC, 0x91, 0xC2, 0x43, 0xE0,
                /* 05A0 */  0x03, 0x68, 0x75, 0x7E, 0xE4, 0x58, 0x78, 0x56,
                /* 05A8 */  0xB8, 0xB3, 0x0C, 0x1F, 0x15, 0xE6, 0x74, 0x83,
                /* 05B0 */  0x8B, 0xF2, 0x3E, 0x30, 0x81, 0x82, 0xBC, 0x0B,
                /* 05B8 */  0x24, 0xF2, 0x81, 0x40, 0x61, 0x7C, 0xBA, 0x01,
                /* 05C0 */  0x8E, 0xFF, 0xFF, 0xD3, 0x0D, 0xF0, 0x98, 0xA4,
                /* 05C8 */  0x4F, 0x37, 0x60, 0x83, 0x88, 0x18, 0xAC, 0x68,
                /* 05D0 */  0x30, 0xDD, 0x9A, 0x70, 0xB7, 0x1B, 0x1C, 0x5E,
                /* 05D8 */  0xB8, 0x18, 0xA7, 0xC3, 0x10, 0xA2, 0x3C, 0xB0,
                /* 05E0 */  0x18, 0x99, 0x1F, 0x03, 0xC1, 0x70, 0x9B, 0x79,
                /* 05E8 */  0xB6, 0x01, 0x2E, 0xE1, 0x0E, 0x05, 0xFA, 0x43,
                /* 05F0 */  0xF9, 0x6C, 0x03, 0xF8, 0xFC, 0xFF, 0x9F, 0x6D,
                /* 05F8 */  0x80, 0xCF, 0x41, 0x04, 0x77, 0x32, 0x01, 0xC3,
                /* 0600 */  0x89, 0x01, 0xD6, 0xB1, 0x0D, 0xB8, 0x88, 0x5B,
                /* 0608 */  0xA9, 0x4E, 0x3B, 0x16, 0x06, 0x22, 0x1B, 0x87,
                /* 0610 */  0x45, 0x3A, 0x54, 0x0B, 0xA1, 0xD2, 0x90, 0x7C,
                /* 0618 */  0x04, 0x3A, 0xBB, 0x47, 0x85, 0xE7, 0x04, 0x01,
                /* 0620 */  0x09, 0xD4, 0x10, 0x0E, 0x0F, 0xA1, 0xE8, 0xA3,
                /* 0628 */  0xA1, 0xC0, 0x0E, 0x0B, 0x46, 0x41, 0x3C, 0x7A,
                /* 0630 */  0x07, 0x81, 0xD0, 0xA1, 0x08, 0x7F, 0x62, 0xF0,
                /* 0638 */  0x7C, 0xDE, 0xF8, 0x4D, 0xF0, 0xB0, 0xF1, 0xB4,
                /* 0640 */  0x00, 0xEB, 0x62, 0xE0, 0x63, 0x00, 0x3F, 0x13,
                /* 0648 */  0xE2, 0x0F, 0xFD, 0x26, 0xE0, 0xC7, 0x1E, 0xF0,
                /* 0650 */  0x09, 0x3C, 0x0D, 0x80, 0x02, 0xC8, 0x93, 0xF7,
                /* 0658 */  0xB1, 0xE6, 0x01, 0x80, 0xCD, 0xE1, 0xC9, 0xC6,
                /* 0660 */  0x68, 0xFF, 0xFF, 0x47, 0x1A, 0x9C, 0x8C, 0x95,
                /* 0668 */  0xEA, 0x4B, 0xE3, 0x33, 0xA3, 0xC7, 0xC5, 0xCF,
                /* 0670 */  0x03, 0x3E, 0xB8, 0xB0, 0xB3, 0x01, 0xEE, 0x0C,
                /* 0678 */  0x85, 0x81, 0xF5, 0x48, 0x39, 0xAC, 0xD1, 0xC2,
                /* 0680 */  0x1E, 0xF0, 0x43, 0x83, 0x2F, 0x1C, 0x9E, 0x99,
                /* 0688 */  0xCF, 0x28, 0x3E, 0x6A, 0x80, 0xE5, 0x38, 0x05,
                /* 0690 */  0xFF, 0xB0, 0x82, 0x3B, 0xC9, 0xC0, 0x9D, 0xE6,
                /* 0698 */  0x23, 0xC1, 0xA3, 0x9E, 0x87, 0x1E, 0xDE, 0x47,
                /* 06A0 */  0x18, 0xCF, 0x2E, 0x88, 0xAF, 0x9D, 0xFC, 0xF2,
                /* 06A8 */  0x7D, 0x5A, 0xBE, 0xEF, 0xF8, 0xE8, 0x63, 0xA0,
                /* 06B0 */  0x27, 0x86, 0xA8, 0xAF, 0x27, 0x9E, 0x00, 0xBF,
                /* 06B8 */  0x50, 0x38, 0xC6, 0xA9, 0x88, 0x06, 0x5A, 0xA9,
                /* 06C0 */  0xA4, 0xAE, 0x99, 0xC2, 0xF8, 0x54, 0x04, 0xB8,
                /* 06C8 */  0x8A, 0x30, 0x78, 0x50, 0xFC, 0xFF, 0x4F, 0x45,
                /* 06D0 */  0xD8, 0x1B, 0x86, 0x2F, 0x03, 0x3E, 0x14, 0x81,
                /* 06D8 */  0xE5, 0x40, 0xE2, 0x89, 0xBD, 0x04, 0xF8, 0xDC,
                /* 06E0 */  0x80, 0xC3, 0x39, 0x03, 0x7E, 0x32, 0x02, 0xC3,
                /* 06E8 */  0x5D, 0xFB, 0xC9, 0x08, 0xB8, 0x44, 0x3B, 0x19,
                /* 06F0 */  0x01, 0x34, 0x39, 0xDF, 0xE1, 0xFE, 0xFF, 0x27,
                /* 06F8 */  0x23, 0x30, 0x9C, 0x1A, 0x60, 0x1C, 0x8C, 0x80,
                /* 0700 */  0x8B, 0xA4, 0x83, 0x11, 0x95, 0x73, 0x30, 0x82,
                /* 0708 */  0x72, 0x84, 0xC0, 0x1D, 0x8C, 0xC0, 0x3F, 0xA6,
                /* 0710 */  0x33, 0x7A, 0x1D, 0x38, 0x75, 0x1F, 0x8C, 0x00,
                /* 0718 */  0x73, 0xC3, 0xF5, 0xC1, 0x08, 0xF8, 0xFC, 0xFF,
                /* 0720 */  0x0F, 0x46, 0xC0, 0xE5, 0x70, 0xE1, 0x83, 0x11,
                /* 0728 */  0xB8, 0x0F, 0x0B, 0xFC, 0x10, 0x83, 0x25, 0x28,
                /* 0730 */  0xFE, 0x35, 0x64, 0x02, 0x85, 0x5A, 0xA4, 0x24,
                /* 0738 */  0x2F, 0x97, 0xC2, 0xF8, 0x4C, 0x04, 0xB8, 0x8A,
                /* 0740 */  0x71, 0x26, 0x02, 0x21, 0xC6, 0xE3, 0xB1, 0x11,
                /* 0748 */  0xCF, 0x38, 0x6C, 0xB8, 0xE7, 0x8B, 0xA7, 0x22,
                /* 0750 */  0xB0, 0xCF, 0xE1, 0x0C, 0xFA, 0xBC, 0x6E, 0xE9,
                /* 0758 */  0x54, 0x84, 0xFF, 0xFF, 0x9F, 0x8A, 0x60, 0x1C,
                /* 0760 */  0x83, 0x9E, 0x8A, 0x80, 0x4B, 0xBC, 0x53, 0x11,
                /* 0768 */  0x40, 0x93, 0x13, 0xC4, 0x53, 0x11, 0xB8, 0xCE,
                /* 0770 */  0x0D, 0x30, 0xCF, 0x45, 0xE0, 0xFB, 0xFF, 0x9F,
                /* 0778 */  0x8B, 0xE0, 0x3E, 0x08, 0x7C, 0x18, 0x22, 0xE7,
                /* 0780 */  0x22, 0x74, 0x78, 0x2A, 0x1D, 0x22, 0x70, 0xB1,
                /* 0788 */  0xCF, 0x45, 0x74, 0xD8, 0x0E, 0x4C, 0xA2, 0x43,
                /* 0790 */  0xBD, 0xCF, 0x45, 0x3C, 0xE6, 0x91, 0x86, 0x82,
                /* 0798 */  0x18, 0xD0, 0x19, 0xCE, 0x45, 0x68, 0x15, 0xE7,
                /* 07A0 */  0x22, 0xE4, 0x20, 0xDF, 0x16, 0xD8, 0xEC, 0x7C,
                /* 07A8 */  0x0F, 0xE0, 0x37, 0x15, 0x5F, 0x8B, 0x18, 0x6E,
                /* 07B0 */  0x35, 0xD7, 0x1D, 0x14, 0x98, 0x6F, 0x45, 0x18,
                /* 07B8 */  0x5D, 0xA7, 0x22, 0x90, 0xE9, 0xBB, 0x14, 0x81,
                /* 07C0 */  0x1C, 0x9D, 0x9F, 0xA8, 0xC0, 0x87, 0xFF, 0x3C,
                /* 07C8 */  0xE0, 0x21, 0x3C, 0x51, 0xC1, 0x3D, 0x13, 0xBC,
                /* 07D0 */  0xF5, 0xF8, 0x44, 0x05, 0xFB, 0x90, 0x4B, 0x4E,
                /* 07D8 */  0x54, 0x40, 0xE3, 0xFF, 0x7F, 0xA2, 0x02, 0x5F,
                /* 07E0 */  0xEC, 0x13, 0x15, 0xA0, 0xE7, 0x08, 0x82, 0x3B,
                /* 07E8 */  0xB9, 0x82, 0xF5, 0x98, 0x81, 0x51, 0x68, 0xD3,
                /* 07F0 */  0xA7, 0x46, 0xA3, 0x56, 0x0D, 0xCA, 0xD4, 0x28,
                /* 07F8 */  0xD3, 0xA0, 0x56, 0x9F, 0x4A, 0x8D, 0x19, 0xBB,
                /* 0800 */  0x0F, 0x58, 0xE2, 0x3B, 0x41, 0xC3, 0x75, 0x40,
                /* 0808 */  0x10, 0x1A, 0x89, 0x42, 0x20, 0x8E, 0xF2, 0xA7,
                /* 0810 */  0x10, 0x88, 0x85, 0x78, 0x00, 0x61, 0x42, 0x57,
                /* 0818 */  0x24, 0x10, 0x8B, 0x5B, 0x9B, 0x40, 0x1C, 0x0D,
                /* 0820 */  0x84, 0x46, 0x5F, 0x9D, 0x40, 0x1C, 0xD8, 0x07,
                /* 0828 */  0x08, 0x93, 0xFB, 0x26, 0x10, 0x88, 0xE3, 0x18,
                /* 0830 */  0x01, 0x61, 0x11, 0x5E, 0x54, 0x3A, 0x06, 0x10,
                /* 0838 */  0x2B, 0x20, 0x4C, 0xA0, 0x16, 0x10, 0x26, 0xCB,
                /* 0840 */  0x0C, 0x08, 0x0B, 0x05, 0x42, 0x43, 0x7F, 0x39,
                /* 0848 */  0x04, 0xE2, 0xA0, 0x76, 0x40, 0x98, 0x4C, 0x3D,
                /* 0850 */  0x20, 0x2C, 0x86, 0x1F, 0x10, 0x26, 0x5E, 0xD1,
                /* 0858 */  0x60, 0x28, 0x08, 0x95, 0xF6, 0xE6, 0xD2, 0x61,
                /* 0860 */  0x82, 0x78, 0x02, 0x61, 0x61, 0x40, 0xE8, 0xFF,
                /* 0868 */  0x3F, 0xAC, 0x28, 0x10, 0x16, 0xD1, 0xD5, 0x60,
                /* 0870 */  0xE8, 0xDB, 0x40, 0x20, 0x0E, 0xF0, 0x4C, 0x0A,
                /* 0878 */  0x42, 0x44, 0x3F, 0x25, 0x04, 0xE2, 0xC8, 0x20,
                /* 0880 */  0x54, 0xD2, 0x1F, 0x42, 0x43, 0x25, 0x7F, 0xA5,
                /* 0888 */  0x83, 0x61, 0x20, 0x34, 0xE6, 0x83, 0xE9, 0x50,
                /* 0890 */  0xD9, 0x5F, 0x4B, 0x20, 0x16, 0xA6, 0x0E, 0x84,
                /* 0898 */  0x09, 0x77, 0x37, 0x54, 0xFA, 0x19, 0xD1, 0x60,
                /* 08A0 */  0x08, 0x08, 0x15, 0xF3, 0xA8, 0xD0, 0x50, 0xC9,
                /* 08A8 */  0x83, 0x22, 0x08, 0x91, 0x0F, 0x42, 0xE3, 0xBD,
                /* 08B0 */  0x04, 0x34, 0x54, 0xF2, 0x21, 0xD0, 0x60, 0xC8,
                /* 08B8 */  0x1B, 0x47, 0x20, 0x96, 0xFC, 0x4A, 0xD3, 0x50,
                /* 08C0 */  0xC9, 0x43, 0x41, 0x20, 0x0E, 0x09, 0x42, 0x45,
                /* 08C8 */  0xBC, 0x72, 0x82, 0x90, 0xF0, 0xCF, 0x8B, 0x20,
                /* 08D0 */  0x44, 0xBA, 0xD1, 0x41, 0xD0, 0xE7, 0xC5, 0x83,
                /* 08D8 */  0x01, 0xB3, 0x0A, 0xC2, 0x04, 0x69, 0x1D, 0x36,
                /* 08E0 */  0x7D, 0x28, 0x14, 0xF0, 0x15, 0xD0, 0xE1, 0x20,
                /* 08E8 */  0x88, 0x80, 0x2C, 0xD2, 0xED, 0x80, 0x29, 0x08,
                /* 08F0 */  0x15, 0x63, 0x17, 0x90, 0x49, 0x03, 0x11, 0x90,
                /* 08F8 */  0xE3, 0x0A, 0x06, 0x61, 0x62, 0x5F, 0x14, 0x41,
                /* 0900 */  0x48, 0xAE, 0xE7, 0x51, 0x40, 0x12, 0x12, 0x44,
                /* 0908 */  0xC7, 0x03, 0xF2, 0x84, 0x13, 0x90, 0xC3, 0x81,
                /* 0910 */  0x08, 0xC8, 0xFF, 0x7F                         
            })
        }
    }

    Scope (WMI0)
    {
        Name (WMIP, Zero)
        Method (IN_T, 1, NotSerialized)
        {
            WMIP = One
            Return (Zero)
        }

        Name (PCDV, Zero)
        Method (WD_G, 1, NotSerialized)
        {
            Return (Zero)
        }

        Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event
        {
            Return (Arg0)
        }

        Method (WG_F, 3, Serialized)
        {
            Local0 = WG_N (Arg0)
            Local1 = ((Local0 >> 0x10) & 0xFFFF)
            Local0 &= 0xFFFF
            If (CS_C (Arg0, Local0, Local1, Arg2))
            {
                Return (Zero)
            }

            WG_L (Arg0, Arg1, Local0, Local1, Arg2)
            OperationRegion (\WMIF, SystemMemory, Arg0, 0x0100)
            Field (WMIF, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                STAS,   8, 
                REST,   8
            }

            If (((STAS && One) != One))
            {
                Return (Zero)
            }

            STAS = 0x82
            REST = One
            Return (Zero)
        }

        Method (WG_N, 1, NotSerialized)
        {
            OperationRegion (\PAR, SystemMemory, Arg0, 0x08)
            Field (PAR, DWordAcc, NoLock, Preserve)
            {
                FUNC,   32, 
                Offset (0x06), 
                STAS,   8, 
                EROR,   8
            }

            EROR = Zero
            STAS = One
            Return (FUNC)
        }

        Name (WGSL, Package (0x05)
        {
            0x66, 
            One, 
            0x6A, 
            One, 
            0xFFFFFFFF
        })
        Method (CS_C, 4, NotSerialized)
        {
            Local0 = Zero
            While (One)
            {
                Local1 = DerefOf (WGSL [Local0])
                If ((Local1 == 0xFFFFFFFF))
                {
                    Return (Zero)
                }

                Local0 += One
                Local2 = DerefOf (WGSL [Local0])
                If ((Local1 == Arg1))
                {
                    If ((Local2 == Arg2))
                    {
                        Break
                    }
                }

                Local0 += One
            }

            OperationRegion (\WMIC, SystemMemory, Arg0, 0x0100)
            Field (WMIC, DWordAcc, NoLock, Preserve)
            {
                Offset (0x07), 
                REST,   8
            }

            PM_S = Arg3
            ISMI (0xDE)
            Return (REST)
        }
    }

    Scope (_SB.PCI0.LPCB.EC0)
    {
        Name (DVOT, 0x0E)
        Name (PUNT, One)
        Name (LFCC, 0x1770)
        Name (NBIF, Package (0x0D)
        {
            Zero, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            One, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            "", 
            "", 
            "", 
            ""
        })
        Name (PBIF, Package (0x0D)
        {
            One, 
            0x1770, 
            0x1770, 
            One, 
            0x39D0, 
            0x0258, 
            0x012C, 
            0x3C, 
            0x3C, 
            "Model", 
            "  ", 
            "LIon", 
            "OEM"
        })
        Name (PBST, Package (0x04)
        {
            Zero, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF
        })
        Name (NBIX, Package (0x14)
        {
            Zero, 
            Zero, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            One, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0x00095000, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            Zero, 
            Zero, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            "", 
            "", 
            "", 
            ""
        })
        Name (BIXP, Package (0x14)
        {
            Zero, 
            Zero, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            One, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            0x00095000, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            Zero, 
            Zero, 
            0xFFFFFFFF, 
            0xFFFFFFFF, 
            "SDI ICR18650", 
            "123456789", 
            "LION", 
            "Simplo"
        })
        Mutex (MUBT, 0x00)
        Method (BI_F, 5, NotSerialized)
        {
            PUNT = Arg0
            Local1 = Arg1
            Local2 = Arg2
            If ((PUNT == Zero))
            {
                Local1 *= 0x0A
                Local2 *= 0x0A
            }

            PBIF [Zero] = PUNT
            PBIF [One] = Local1
            PBIF [0x02] = Local2
            LFCC = Local2
            PBIF [0x03] = Arg3
            PBIF [0x04] = Arg4
            DVOT = Arg4
            Divide (Local2, 0x64, Local3, Local5)
            Local6 = (Local5 * 0x0A)
            PBIF [0x05] = Local6
            Local6 = (Local5 * 0x05)
            PBIF [0x06] = Local6
            Divide (Local1, 0x64, Local3, Local7)
            PBIF [0x07] = Local7
            PBIF [0x08] = Local7
        }

        Method (BS_L, 1, Serialized)
        {
            If (!BT_P (Arg0))
            {
                Return (NBIF)
            }

            If ((GB_T (Arg0) == 0xFF))
            {
                Return (NBIF)
            }

            If ((Acquire (MUBT, 0xFFFF) == Zero))
            {
                BS_F (Arg0)
                PBIF [0x09] = BD_N ()
                Local0 = BP_U ()
                Local1 = BD_C ()
                Local2 = BL_F ()
                Local3 = BT_C ()
                Local4 = BD_V ()
                If ((Local0 != Ones))
                {
                    If ((Local1 != Ones))
                    {
                        If ((Local2 != Ones))
                        {
                            If ((Local3 != Ones))
                            {
                                If ((Local4 != Ones))
                                {
                                    BI_F (Local0, Local1, Local2, Local3, Local4)
                                }
                            }
                        }
                    }
                }

                Release (MUBT)
            }

            Return (PBIF)
        }

        Method (BS_C, 5, NotSerialized)
        {
            Local1 = (Arg1 & 0xFFFF)
            Local0 = Zero
            If (AP_S ())
            {
                Local0 = One
            }

            If (Local0)
            {
                If (BC_H (Arg4))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = Zero
                }
            }
            Else
            {
                Local0 = One
            }

            Local2 = (Arg0 & 0x0300)
            If (Local2)
            {
                Local2 = 0x04
                Local0 |= Local2
            }

            If ((Local1 >= 0x8000))
            {
                Local1 = (0xFFFF - Local1)
            }

            Local2 = Arg2
            If ((PUNT == Zero))
            {
                Local1 *= DVOT
                Divide (Local1, 0x03E8, Local3, Local1)
                Local2 *= 0x0A
            }

            Local3 = (Local0 & 0x02)
            If (!Local3)
            {
                Local3 = (LFCC - Local2)
                Divide (LFCC, 0xC8, Local4, Local5)
                If ((Local3 < Local5))
                {
                    Local2 = LFCC
                }
            }
            Else
            {
                Divide (LFCC, 0xC8, Local4, Local5)
                Local4 = (LFCC - Local5)
                If ((Local2 > Local4))
                {
                    Local2 = Local4
                }
            }

            If (!AP_S ())
            {
                Divide (Local2, 0x0A, Local3, Local4)
                If ((Local1 < Local4))
                {
                    Local1 = Local4
                }
            }

            Divide (LFCC, 0x64, Local4, Local3)
            Local4 = (Local3 * 0x02)
            Divide (Local3, 0x02, Local6, Local5)
            Local3 = (LFCC - Local4)
            Local4 = (Local3 + Local5)
            If (((Local2 >= Local3) && (Local2 <= Local4)))
            {
                If (!BC_F (Arg4))
                {
                    Local2 += Local5
                }
            }

            If ((AP_S () && BC_F (Arg4)))
            {
                Local6 = RR_M (0x07C0)
                Local6 >>= 0x07
                If (!(Local6 & One))
                {
                    Local0 &= 0x05
                    Local2 = LFCC
                }
            }

            PBST [Zero] = Local0
            PBST [One] = Local1
            PBST [0x02] = Local2
            PBST [0x03] = Arg3
        }

        Method (BS_P, 1, Serialized)
        {
            PBST [Zero] = Zero
            PBST [One] = Ones
            PBST [0x02] = Ones
            PBST [0x03] = Ones
            If (!BT_P (Arg0))
            {
                Return (PBST)
            }

            If ((GB_T (Arg0) == 0xFF))
            {
                Return (PBST)
            }

            If ((Acquire (MUBT, 0xFFFF) == Zero))
            {
                BS_F (Arg0)
                Local0 = BS_T ()
                Local1 = BC_R ()
                Local2 = BR_C ()
                Local3 = BV_T ()
                If ((Local0 != Ones))
                {
                    If ((Local1 != Ones))
                    {
                        If ((Local2 != Ones))
                        {
                            If ((Local3 != Ones))
                            {
                                BS_C (Local0, Local1, Local2, Local3, Arg0)
                            }
                        }
                    }
                }

                Release (MUBT)
            }

            Divide (LFCC, 0x64, Local5, Local4)
            Local5 = BL_F ()
            If ((PUNT == Zero))
            {
                Local5 *= 0x0A
            }

            If ((LFCC >= Local5))
            {
                Local5 = (LFCC - Local5)
            }
            Else
            {
                Local5 -= LFCC
            }

            If ((Local5 > Local4))
            {
                Notify (BAT0, 0x81)
            }

            Return (PBST)
        }

        Method (BX_2, 5, NotSerialized)
        {
            PUNT = Arg0
            Local1 = Arg1
            Local2 = Arg2
            If ((PUNT == Zero))
            {
                Local1 *= 0x0A
                Local2 *= 0x0A
            }

            PBIF [One] = PUNT
            PBIF [0x02] = Local1
            PBIF [0x03] = Local2
            LFCC = Local2
            PBIF [0x04] = Arg3
            PBIF [0x05] = Arg4
            DVOT = Arg4
            Divide (Local2, 0x64, Local3, Local5)
            Local6 = (Local5 * 0x0A)
            PBIF [0x06] = Local6
            Local6 = (Local5 * 0x05)
            PBIF [0x07] = Local6
            Divide (Local1, 0x64, Local3, Local7)
            PBIF [0x0E] = Local7
            PBIF [0x0F] = Local7
        }

        Method (BI_X, 1, Serialized)
        {
            If (!BT_P (Arg0))
            {
                Return (NBIX)
            }

            If ((GB_T (Arg0) == 0xFF))
            {
                Return (NBIX)
            }

            If ((Acquire (MUBT, 0xFFFF) == Zero))
            {
                BS_F (Arg0)
                BIXP [0x10] = BD_N ()
                Local0 = BP_U ()
                Local1 = BD_C ()
                Local2 = BL_F ()
                Local3 = BT_C ()
                Local4 = BD_V ()
                If ((Local0 != Ones))
                {
                    If ((Local1 != Ones))
                    {
                        If ((Local2 != Ones))
                        {
                            If ((Local3 != Ones))
                            {
                                If ((Local4 != Ones))
                                {
                                    BX_2 (Local0, Local1, Local2, Local3, Local4)
                                }
                            }
                        }
                    }
                }

                Release (MUBT)
            }

            Return (BIXP)
        }
    }

    Scope (_SB.PCI0)
    {
        Device (BAT0)
        {
            Name (_HID, EisaId ("PNP0C0A"))  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                PCI0
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (^^LPCB.EC0.BT_P (Zero))
                {
                    DC_F = ^^LPCB.EC0.BT_P (Zero)
                    Return (0x1F)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (_BIF, 0, Serialized)  // _BIF: Battery Information
            {
                Return (^^LPCB.EC0.BS_L (Zero))
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                Return (^^LPCB.EC0.BS_P (Zero))
            }
        }
    }

    Scope (_SB.PCI0.LPCB.EC0)
    {
        Method (_QA1, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (DC_P (Zero))
            {
                Sleep (0x07D0)
            }

            Notify (BAT0, 0x80)
            Notify (BAT0, 0x81)
        }

        Method (NB_T, 1, NotSerialized)
        {
            If (BT_P (Zero))
            {
                Notify (BAT0, Arg0)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (AC0)
        {
            Name (_HID, "ACPI0003")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                AC_F = ^^LPCB.EC0.AP_S ()
                Return (^^LPCB.EC0.AP_S ())
            }

            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                PCI0
            })
        }
    }

    Scope (WMI0)
    {
        Method (WG_L, 5, NotSerialized)
        {
            AX_X (Arg0, Arg1, Arg2, Arg3, Arg4)
            BX_X (Arg0, Arg1, Arg2, Arg3, Arg4)
            EX_X (Arg0, Arg1, Arg2, Arg3, Arg4)
            FX_X (Arg0, Arg1, Arg2, Arg3, Arg4)
            GX_X (Arg0, Arg1, Arg2, Arg3, Arg4)
            JX_X (Arg0, Arg1, Arg2, Arg3, Arg4)
            KX_X (Arg0, Arg1, Arg2, Arg3, Arg4)
            LX_X (Arg0, Arg1, Arg2, Arg3, Arg4)
            WF_S (Arg0, Arg1, Arg2, Arg3, Arg4)
            MX_X (Arg0, Arg1, Arg2, Arg3, Arg4)
        }
    }

    Scope (WMI0)
    {
        Method (JX_X, 5, NotSerialized)
        {
            If ((Arg2 != 0x62))
            {
                Return (Zero)
            }

            OperationRegion (JX_X, SystemMemory, Arg0, 0x08)
            Field (JX_X, DWordAcc, NoLock, Preserve)
            {
                MFUN,   16, 
                SFUN,   16, 
                LEN,    16, 
                SM62,   8, 
                EM62,   8
            }

            If ((Arg3 == One))
            {
                J0_1 (Arg4)
            }
            Else
            {
                EM62 = One
            }

            If ((EM62 == Zero))
            {
                SM62 = 0x80
            }
            Else
            {
                SM62 = 0x82
            }

            Return (Zero)
        }

        Method (J0_1, 1, NotSerialized)
        {
            WSMI (Arg0)
        }
    }

    Scope (WMI0)
    {
        Method (KX_X, 5, NotSerialized)
        {
            If ((Arg2 != 0x63))
            {
                Return (Zero)
            }

            OperationRegion (KX_X, SystemMemory, Arg0, 0x10)
            Field (KX_X, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8
            }

            If ((Arg3 == One))
            {
                K0_1 (Arg0)
            }
            ElseIf ((Arg3 == 0x02))
            {
                K0_2 (Arg0, Arg4)
            }
            ElseIf ((Arg3 == 0x03))
            {
                K0_3 (Arg0)
            }
            ElseIf ((Arg3 == 0x04))
            {
                K0_4 (Arg0)
            }
            ElseIf ((Arg3 == 0x05))
            {
                K0_5 (Arg0)
            }
            ElseIf ((Arg3 == 0x06))
            {
                K0_6 (Arg0)
            }
            ElseIf ((Arg3 == 0x07))
            {
                K0_7 (Arg0)
            }
            ElseIf ((Arg3 == 0x08))
            {
                K0_8 (Arg0)
            }
            ElseIf ((Arg3 == 0x09))
            {
                K0_9 (Arg0)
            }
            ElseIf ((Arg3 == 0x0A))
            {
                K0_A (Arg0)
            }
            ElseIf ((Arg3 == 0x0B))
            {
                K0_B (Arg0)
            }
            ElseIf ((Arg3 == 0x0C))
            {
                K0_C (Arg0)
            }
            ElseIf ((Arg3 == 0x0D))
            {
                K0_D (Arg0)
            }
            ElseIf ((Arg3 == 0x0E))
            {
                K0_E (Arg0)
            }
            ElseIf ((Arg3 == 0x0F))
            {
                K0_F (Arg0)
            }
            Else
            {
                EM63 = One
            }

            If ((EM63 == Zero))
            {
                SM63 = 0x80
            }
            Else
            {
                SM63 = 0x82
            }

            Return (Zero)
        }

        Method (K0_1, 1, NotSerialized)
        {
            OperationRegion (KX_X, SystemMemory, Arg0, 0x10)
            Field (KX_X, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                TSXR,   8, 
                TSXL,   8
            }

            If ((FUNC == Zero))
            {
                TSXR = \_SB.PCI0.LPCB.EC0.RR_M (0x03E2)
                TSXL = \_SB.PCI0.LPCB.EC0.RR_M (0x03E3)
            }
            ElseIf ((FUNC == One))
            {
                TSXR = \_SB.PCI0.LPCB.EC0.RR_M (0x03E0)
                TSXL = \_SB.PCI0.LPCB.EC0.RR_M (0x03E1)
            }
            Else
            {
                EM63 = One
            }
        }

        Method (K0_2, 2, NotSerialized)
        {
            OperationRegion (KX_X, SystemMemory, Arg0, 0x10)
            Field (KX_X, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                DEVS,   8, 
                DEVT,   16
            }

            If ((DEVS == Zero))
            {
                WSMI (Arg1)
            }
            ElseIf ((DEVS == One))
            {
                DEVT = \_SB.PCI0.LPCB.EC0.PCPT
            }
            ElseIf ((DEVS == 0x02))
            {
                WSMI (Arg1)
            }
            ElseIf ((DEVS == 0x03))
            {
                WSMI (Arg1)
            }
            Else
            {
                EM63 = One
            }
        }

        Method (K0_3, 1, NotSerialized)
        {
            OperationRegion (KX_X, SystemMemory, Arg0, 0x10)
            Field (KX_X, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FANX,   8, 
                FANS,   8, 
                FANT,   16, 
                TRGG,   8
            }

            If ((FANX == Zero))
            {
                FANS = \_SB.PCI0.LPCB.EC0.F0CS
                FANT = \_SB.PCI0.LPCB.EC0.F0TS
                TRGG = \_SB.PCI0.LPCB.EC0.RR_M (0x0576)
            }
            ElseIf ((FANX == One))
            {
                FANS = \_SB.PCI0.LPCB.EC0.F1CS
                FANT = \_SB.PCI0.LPCB.EC0.F1TS
                TRGG = \_SB.PCI0.LPCB.EC0.RR_M (0x0577)
            }
            Else
            {
                EM63 = One
            }
        }

        Method (K0_4, 1, Serialized)
        {
            OperationRegion (KX_X, SystemMemory, Arg0, 0x10)
            Field (KX_X, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                PARA,   8, 
                DATA,   8
            }

            If ((FUNC == Zero))
            {
                Switch (ToInteger (PARA))
                {
                    Case (Zero)
                    {
                        DATA = \_SB.PCI0.LPCB.EC0.RR_M (0x0521)
                    }
                    Case (One)
                    {
                        DATA = \_SB.PCI0.LPCB.EC0.RR_M (0x0522)
                    }
                    Case (0x02)
                    {
                        DATA = \_SB.PCI0.LPCB.EC0.RR_M (0x0523)
                    }
                    Case (0x03)
                    {
                        DATA = \_SB.PCI0.LPCB.EC0.RR_M (0x0524)
                    }
                    Case (0x04)
                    {
                        DATA = \_SB.PCI0.LPCB.EC0.RR_M (0x0518)
                    }
                    Case (0x05)
                    {
                        DATA = \_SB.PCI0.LPCB.EC0.RR_M (0x0519)
                    }
                    Case (0x06)
                    {
                        DATA = \_SB.PCI0.LPCB.EC0.RR_M (0x0568)
                    }
                    Default
                    {
                        EM63 = One
                    }

                }
            }
            ElseIf ((FUNC == One))
            {
                Switch (ToInteger (PARA))
                {
                    Case (Zero)
                    {
                        \_SB.PCI0.LPCB.EC0.WR_M (0x0521, DATA)
                    }
                    Case (One)
                    {
                        \_SB.PCI0.LPCB.EC0.WR_M (0x0522, DATA)
                    }
                    Case (0x02)
                    {
                        \_SB.PCI0.LPCB.EC0.WR_M (0x0523, DATA)
                    }
                    Case (0x03)
                    {
                        \_SB.PCI0.LPCB.EC0.WR_M (0x0524, DATA)
                    }
                    Case (0x04)
                    {
                        \_SB.PCI0.LPCB.EC0.WR_M (0x0518, DATA)
                    }
                    Case (0x05)
                    {
                        \_SB.PCI0.LPCB.EC0.WR_M (0x0519, DATA)
                    }
                    Case (0x06)
                    {
                        \_SB.PCI0.LPCB.EC0.WR_M (0x0568, DATA)
                    }
                    Default
                    {
                        EM63 = One
                    }

                }
            }
            Else
            {
                EM63 = One
            }
        }

        Method (K0_5, 1, NotSerialized)
        {
            OperationRegion (KX_X, SystemMemory, Arg0, 0x10)
            Field (KX_X, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                ECSD,   8, 
                OSSD,   8, 
                OSPV,   8, 
                THON,   8, 
                THOF,   8, 
                FNER,   8, 
                VGSD,   8
            }

            If ((FUNC == Zero))
            {
                ECSD = \_SB.PCI0.LPCB.EC0.RR_M (0x0530)
                OSSD = \_SB.PCI0.LPCB.EC0.RR_M (0x03E4)
                OSPV = \_SB.PCI0.LPCB.EC0.RR_M (0x03E5)
                THON = \_SB.PCI0.LPCB.EC0.RR_M (0x0533)
                THOF = \_SB.PCI0.LPCB.EC0.RR_M (0x0534)
                FNER = \_SB.PCI0.LPCB.EC0.RR_M (0x0535)
                VGSD = \_SB.PCI0.LPCB.EC0.RR_M (0x0536)
            }
            ElseIf ((FUNC == One))
            {
                \_SB.PCI0.LPCB.EC0.WR_M (0x0530, ECSD)
                \_SB.PCI0.LPCB.EC0.WR_M (0x03E4, OSSD)
                \_SB.PCI0.LPCB.EC0.WR_M (0x03E5, OSPV)
                \_SB.PCI0.LPCB.EC0.WR_M (0x0533, THON)
                \_SB.PCI0.LPCB.EC0.WR_M (0x0534, THOF)
                \_SB.PCI0.LPCB.EC0.WR_M (0x0535, FNER)
                \_SB.PCI0.LPCB.EC0.WR_M (0x0536, VGSD)
            }
            Else
            {
                EM63 = One
            }
        }

        Method (K0_6, 1, NotSerialized)
        {
            OperationRegion (KX_X, SystemMemory, Arg0, 0x20)
            Field (KX_X, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                ALGM,   8, 
                TTS1,   8, 
                TTS2,   8, 
                TTS3,   8, 
                TTS4,   8, 
                TTS5,   8, 
                TTS6,   8, 
                TTS7,   8, 
                TTS8,   8, 
                TFFP,   8
            }

            If ((FUNC == Zero))
            {
                If ((ALGM == Zero))
                {
                    TTS1 = \_SB.PCI0.LPCB.EC0.RR_M (0x0537)
                    TTS2 = \_SB.PCI0.LPCB.EC0.RR_M (0x0538)
                    TTS3 = \_SB.PCI0.LPCB.EC0.RR_M (0x0539)
                    TTS4 = \_SB.PCI0.LPCB.EC0.RR_M (0x053A)
                    TTS5 = \_SB.PCI0.LPCB.EC0.RR_M (0x053B)
                    TTS6 = \_SB.PCI0.LPCB.EC0.RR_M (0x053C)
                    TTS7 = \_SB.PCI0.LPCB.EC0.RR_M (0x053D)
                    TTS8 = \_SB.PCI0.LPCB.EC0.RR_M (0x053E)
                    TFFP = \_SB.PCI0.LPCB.EC0.RR_M (0x053F)
                }
                ElseIf ((ALGM == One))
                {
                    TTS1 = \_SB.PCI0.LPCB.EC0.RR_M (0x0597)
                    TTS2 = \_SB.PCI0.LPCB.EC0.RR_M (0x0598)
                    TTS3 = \_SB.PCI0.LPCB.EC0.RR_M (0x0599)
                    TTS4 = \_SB.PCI0.LPCB.EC0.RR_M (0x059A)
                    TTS5 = \_SB.PCI0.LPCB.EC0.RR_M (0x059B)
                    TTS6 = \_SB.PCI0.LPCB.EC0.RR_M (0x059C)
                    TTS7 = \_SB.PCI0.LPCB.EC0.RR_M (0x059D)
                    TTS8 = \_SB.PCI0.LPCB.EC0.RR_M (0x059E)
                    TFFP = \_SB.PCI0.LPCB.EC0.RR_M (0x059F)
                }
                Else
                {
                    EM63 = One
                }
            }
            ElseIf ((FUNC == One))
            {
                If ((ALGM == Zero))
                {
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0537, TTS1)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0538, TTS2)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0539, TTS3)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x053A, TTS4)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x053B, TTS5)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x053C, TTS6)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x053D, TTS7)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x053E, TTS8)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x053F, TFFP)
                }
                ElseIf ((ALGM == One))
                {
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0597, TTS1)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0598, TTS2)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0599, TTS3)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x059A, TTS4)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x059B, TTS5)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x059C, TTS6)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x059D, TTS7)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x059E, TTS8)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x059F, TFFP)
                }
                Else
                {
                    EM63 = One
                }
            }
            Else
            {
                EM63 = One
            }
        }

        Method (K0_7, 1, NotSerialized)
        {
            OperationRegion (KX_X, SystemMemory, Arg0, 0x20)
            Field (KX_X, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                ALGM,   8, 
                TDA1,   8, 
                TDA2,   8, 
                TDA3,   8, 
                TDA4,   8, 
                TDA5,   8, 
                TDA6,   8, 
                TDA7,   8, 
                TDA8,   8
            }

            If ((FUNC == Zero))
            {
                If ((ALGM == Zero))
                {
                    TDA1 = \_SB.PCI0.LPCB.EC0.RR_M (0x0548)
                    TDA2 = \_SB.PCI0.LPCB.EC0.RR_M (0x0549)
                    TDA3 = \_SB.PCI0.LPCB.EC0.RR_M (0x054A)
                    TDA4 = \_SB.PCI0.LPCB.EC0.RR_M (0x054B)
                    TDA5 = \_SB.PCI0.LPCB.EC0.RR_M (0x054C)
                    TDA6 = \_SB.PCI0.LPCB.EC0.RR_M (0x054D)
                    TDA7 = \_SB.PCI0.LPCB.EC0.RR_M (0x054E)
                    TDA8 = \_SB.PCI0.LPCB.EC0.RR_M (0x054F)
                }
                ElseIf ((ALGM == One))
                {
                    TDA1 = \_SB.PCI0.LPCB.EC0.RR_M (0x05A8)
                    TDA2 = \_SB.PCI0.LPCB.EC0.RR_M (0x05A9)
                    TDA3 = \_SB.PCI0.LPCB.EC0.RR_M (0x05AA)
                    TDA4 = \_SB.PCI0.LPCB.EC0.RR_M (0x05AB)
                    TDA5 = \_SB.PCI0.LPCB.EC0.RR_M (0x05AC)
                    TDA6 = \_SB.PCI0.LPCB.EC0.RR_M (0x05AD)
                    TDA7 = \_SB.PCI0.LPCB.EC0.RR_M (0x05AE)
                    TDA8 = \_SB.PCI0.LPCB.EC0.RR_M (0x05AF)
                }
                Else
                {
                    EM63 = One
                }
            }
            ElseIf ((FUNC == One))
            {
                If ((ALGM == Zero))
                {
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0548, TDA1)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0549, TDA2)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x054A, TDA3)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x054B, TDA4)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x054C, TDA5)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x054D, TDA6)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x054E, TDA7)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x054F, TDA8)
                }
                ElseIf ((ALGM == One))
                {
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05A8, TDA1)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05A9, TDA2)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05AA, TDA3)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05AB, TDA4)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05AC, TDA5)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05AD, TDA6)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05AE, TDA7)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05AF, TDA8)
                }
                Else
                {
                    EM63 = One
                }
            }
            Else
            {
                EM63 = One
            }
        }

        Method (K0_8, 1, NotSerialized)
        {
            OperationRegion (KX_X, SystemMemory, Arg0, 0x20)
            Field (KX_X, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                ALGM,   8, 
                ASC1,   8, 
                ASC2,   8, 
                ASC3,   8, 
                ASC4,   8, 
                ADA1,   8, 
                ADA2,   8, 
                ADA3,   8, 
                ADA4,   8, 
                DSC1,   8, 
                DSC2,   8, 
                DSC3,   8, 
                DSC4,   8, 
                DDA1,   8, 
                DDA2,   8, 
                DDA3,   8, 
                DDA4,   8
            }

            If ((FUNC == Zero))
            {
                If ((ALGM == Zero))
                {
                    ASC1 = \_SB.PCI0.LPCB.EC0.RR_M (0x0550)
                    ASC2 = \_SB.PCI0.LPCB.EC0.RR_M (0x0551)
                    ASC3 = \_SB.PCI0.LPCB.EC0.RR_M (0x0552)
                    ASC4 = \_SB.PCI0.LPCB.EC0.RR_M (0x0553)
                    ADA1 = \_SB.PCI0.LPCB.EC0.RR_M (0x0554)
                    ADA2 = \_SB.PCI0.LPCB.EC0.RR_M (0x0555)
                    ADA3 = \_SB.PCI0.LPCB.EC0.RR_M (0x0556)
                    ADA4 = \_SB.PCI0.LPCB.EC0.RR_M (0x0557)
                    DSC1 = \_SB.PCI0.LPCB.EC0.RR_M (0x0558)
                    DSC2 = \_SB.PCI0.LPCB.EC0.RR_M (0x0559)
                    DSC3 = \_SB.PCI0.LPCB.EC0.RR_M (0x055A)
                    DSC4 = \_SB.PCI0.LPCB.EC0.RR_M (0x055B)
                    DDA1 = \_SB.PCI0.LPCB.EC0.RR_M (0x055C)
                    DDA2 = \_SB.PCI0.LPCB.EC0.RR_M (0x055D)
                    DDA3 = \_SB.PCI0.LPCB.EC0.RR_M (0x055E)
                    DDA4 = \_SB.PCI0.LPCB.EC0.RR_M (0x055F)
                }
                ElseIf ((ALGM == One))
                {
                    ASC1 = \_SB.PCI0.LPCB.EC0.RR_M (0x05B0)
                    ASC2 = \_SB.PCI0.LPCB.EC0.RR_M (0x05B1)
                    ASC3 = \_SB.PCI0.LPCB.EC0.RR_M (0x05B2)
                    ASC4 = \_SB.PCI0.LPCB.EC0.RR_M (0x05B3)
                    ADA1 = \_SB.PCI0.LPCB.EC0.RR_M (0x05B4)
                    ADA2 = \_SB.PCI0.LPCB.EC0.RR_M (0x05B5)
                    ADA3 = \_SB.PCI0.LPCB.EC0.RR_M (0x05B6)
                    ADA4 = \_SB.PCI0.LPCB.EC0.RR_M (0x05B7)
                    DSC1 = \_SB.PCI0.LPCB.EC0.RR_M (0x05B8)
                    DSC2 = \_SB.PCI0.LPCB.EC0.RR_M (0x05B9)
                    DSC3 = \_SB.PCI0.LPCB.EC0.RR_M (0x05BA)
                    DSC4 = \_SB.PCI0.LPCB.EC0.RR_M (0x05BB)
                    DDA1 = \_SB.PCI0.LPCB.EC0.RR_M (0x05BC)
                    DDA2 = \_SB.PCI0.LPCB.EC0.RR_M (0x05BD)
                    DDA3 = \_SB.PCI0.LPCB.EC0.RR_M (0x05BE)
                    DDA4 = \_SB.PCI0.LPCB.EC0.RR_M (0x05BF)
                }
                Else
                {
                    EM63 = One
                }
            }
            ElseIf ((FUNC == One))
            {
                If ((ALGM == Zero))
                {
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0550, ASC1)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0551, ASC2)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0552, ASC3)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0553, ASC4)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0554, ADA1)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0555, ADA2)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0556, ADA3)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0557, ADA4)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0558, DSC1)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0559, DSC2)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x055A, DSC3)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x055B, DSC4)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x055C, DDA1)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x055D, DDA2)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x055E, DDA3)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x055F, DDA4)
                }
                ElseIf ((ALGM == One))
                {
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05B0, ASC1)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05B1, ASC2)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05B2, ASC3)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05B3, ASC4)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05B4, ADA1)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05B5, ADA2)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05B6, ADA3)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05B7, ADA4)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05B8, DSC1)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05B9, DSC2)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05BA, DSC3)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05BB, DSC4)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05BC, DDA1)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05BD, DDA2)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05BE, DDA3)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05BF, DDA4)
                }
                Else
                {
                    EM63 = One
                }
            }
            Else
            {
                EM63 = One
            }
        }

        Method (K0_9, 1, NotSerialized)
        {
            OperationRegion (KX_X, SystemMemory, Arg0, 0x20)
            Field (KX_X, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                ALGM,   8, 
                HYS1,   8, 
                HYS2,   8, 
                HYS3,   8, 
                HYS4,   8, 
                HYS5,   8, 
                HYS6,   8, 
                HYS7,   8, 
                HYS8,   8
            }

            If ((FUNC == Zero))
            {
                If ((ALGM == Zero))
                {
                    HYS1 = \_SB.PCI0.LPCB.EC0.RR_M (0x0540)
                    HYS2 = \_SB.PCI0.LPCB.EC0.RR_M (0x0541)
                    HYS3 = \_SB.PCI0.LPCB.EC0.RR_M (0x0542)
                    HYS4 = \_SB.PCI0.LPCB.EC0.RR_M (0x0543)
                    HYS5 = \_SB.PCI0.LPCB.EC0.RR_M (0x0544)
                    HYS6 = \_SB.PCI0.LPCB.EC0.RR_M (0x0545)
                    HYS7 = \_SB.PCI0.LPCB.EC0.RR_M (0x0546)
                    HYS8 = \_SB.PCI0.LPCB.EC0.RR_M (0x0547)
                }
                ElseIf ((ALGM == One))
                {
                    HYS1 = \_SB.PCI0.LPCB.EC0.RR_M (0x05A0)
                    HYS2 = \_SB.PCI0.LPCB.EC0.RR_M (0x05A1)
                    HYS3 = \_SB.PCI0.LPCB.EC0.RR_M (0x05A2)
                    HYS4 = \_SB.PCI0.LPCB.EC0.RR_M (0x05A3)
                    HYS5 = \_SB.PCI0.LPCB.EC0.RR_M (0x05A4)
                    HYS6 = \_SB.PCI0.LPCB.EC0.RR_M (0x05A5)
                    HYS7 = \_SB.PCI0.LPCB.EC0.RR_M (0x05A6)
                    HYS8 = \_SB.PCI0.LPCB.EC0.RR_M (0x05A7)
                }
                Else
                {
                    EM63 = One
                }
            }
            ElseIf ((FUNC == One))
            {
                If ((ALGM == Zero))
                {
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0540, HYS1)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0541, HYS2)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0542, HYS3)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0543, HYS4)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0544, HYS5)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0545, HYS6)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0546, HYS7)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0547, HYS8)
                }
                ElseIf ((ALGM == One))
                {
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05A0, HYS1)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05A1, HYS2)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05A2, HYS3)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05A3, HYS4)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05A4, HYS5)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05A5, HYS6)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05A6, HYS7)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05A7, HYS8)
                }
                Else
                {
                    EM63 = One
                }
            }
            Else
            {
                EM63 = One
            }
        }

        Method (K0_A, 1, NotSerialized)
        {
            OperationRegion (KX_X, SystemMemory, Arg0, 0x20)
            Field (KX_X, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                FANX,   8, 
                TA1L,   8, 
                TA1H,   8, 
                TA2L,   8, 
                TA2H,   8, 
                TA3L,   8, 
                TA3H,   8, 
                TA4L,   8, 
                TA4H,   8, 
                TA5L,   8, 
                TA5H,   8, 
                TA6L,   8, 
                TA6H,   8, 
                TA7L,   8, 
                TA7H,   8, 
                TA8L,   8, 
                TA8H,   8
            }

            If ((FUNC == Zero))
            {
                If ((FANX == Zero))
                {
                    TA1L = \_SB.PCI0.LPCB.EC0.RR_M (0x05C0)
                    TA1H = \_SB.PCI0.LPCB.EC0.RR_M (0x05C1)
                    TA2L = \_SB.PCI0.LPCB.EC0.RR_M (0x05C2)
                    TA2H = \_SB.PCI0.LPCB.EC0.RR_M (0x05C3)
                    TA3L = \_SB.PCI0.LPCB.EC0.RR_M (0x05C4)
                    TA3H = \_SB.PCI0.LPCB.EC0.RR_M (0x05C5)
                    TA4L = \_SB.PCI0.LPCB.EC0.RR_M (0x05C6)
                    TA4H = \_SB.PCI0.LPCB.EC0.RR_M (0x05C7)
                    TA5L = \_SB.PCI0.LPCB.EC0.RR_M (0x05C8)
                    TA5H = \_SB.PCI0.LPCB.EC0.RR_M (0x05C9)
                    TA6L = \_SB.PCI0.LPCB.EC0.RR_M (0x05CA)
                    TA6H = \_SB.PCI0.LPCB.EC0.RR_M (0x05CB)
                    TA7L = \_SB.PCI0.LPCB.EC0.RR_M (0x05CC)
                    TA7H = \_SB.PCI0.LPCB.EC0.RR_M (0x05CD)
                    TA8L = \_SB.PCI0.LPCB.EC0.RR_M (0x05CE)
                    TA8H = \_SB.PCI0.LPCB.EC0.RR_M (0x05CF)
                }
                ElseIf ((FANX == One))
                {
                    TA1L = \_SB.PCI0.LPCB.EC0.RR_M (0x05D0)
                    TA1H = \_SB.PCI0.LPCB.EC0.RR_M (0x05D1)
                    TA2L = \_SB.PCI0.LPCB.EC0.RR_M (0x05D2)
                    TA2H = \_SB.PCI0.LPCB.EC0.RR_M (0x05D3)
                    TA3L = \_SB.PCI0.LPCB.EC0.RR_M (0x05D4)
                    TA3H = \_SB.PCI0.LPCB.EC0.RR_M (0x05D5)
                    TA4L = \_SB.PCI0.LPCB.EC0.RR_M (0x05D6)
                    TA4H = \_SB.PCI0.LPCB.EC0.RR_M (0x05D7)
                    TA5L = \_SB.PCI0.LPCB.EC0.RR_M (0x05D8)
                    TA5H = \_SB.PCI0.LPCB.EC0.RR_M (0x05D9)
                    TA6L = \_SB.PCI0.LPCB.EC0.RR_M (0x05DA)
                    TA6H = \_SB.PCI0.LPCB.EC0.RR_M (0x05DB)
                    TA7L = \_SB.PCI0.LPCB.EC0.RR_M (0x05DC)
                    TA7H = \_SB.PCI0.LPCB.EC0.RR_M (0x05DD)
                    TA8L = \_SB.PCI0.LPCB.EC0.RR_M (0x05DE)
                    TA8H = \_SB.PCI0.LPCB.EC0.RR_M (0x05DF)
                }
                Else
                {
                    EM63 = One
                }
            }
            ElseIf ((FUNC == One))
            {
                If ((FANX == Zero))
                {
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05C0, TA1L)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05C1, TA1H)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05C2, TA2L)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05C3, TA2H)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05C4, TA3L)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05C5, TA3H)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05C6, TA4L)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05C7, TA4H)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05C8, TA5L)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05C9, TA5H)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05CA, TA6L)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05CB, TA6H)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05CC, TA7L)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05CD, TA7H)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05CE, TA8L)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05CF, TA8H)
                }
                ElseIf ((FANX == One))
                {
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05D0, TA1L)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05D1, TA1H)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05D2, TA2L)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05D3, TA2H)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05D4, TA3L)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05D5, TA3H)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05D6, TA4L)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05D7, TA4H)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05D8, TA5L)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05D9, TA5H)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05DA, TA6L)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05DB, TA6H)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05DC, TA7L)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05DD, TA7H)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05DE, TA8L)
                    \_SB.PCI0.LPCB.EC0.WR_M (0x05DF, TA8H)
                }
                Else
                {
                    EM63 = One
                }
            }
            Else
            {
                EM63 = One
            }
        }

        Method (K0_B, 1, NotSerialized)
        {
            OperationRegion (KX_X, SystemMemory, Arg0, 0x20)
            Field (KX_X, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                PARA,   8, 
                DATA,   8
            }

            If ((FUNC == Zero))
            {
                If ((PARA == Zero))
                {
                    DATA = \_SB.PCI0.LPCB.EC0.RR_M (0x0569)
                }
                ElseIf ((PARA == One))
                {
                    DATA = \_SB.PCI0.LPCB.EC0.RR_M (0x056A)
                }
                Else
                {
                    EM63 = One
                }
            }
            ElseIf ((FUNC == One))
            {
                If ((PARA == Zero))
                {
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0569, DATA)
                }
                ElseIf ((PARA == One))
                {
                    \_SB.PCI0.LPCB.EC0.WR_M (0x056A, DATA)
                }
                Else
                {
                    EM63 = One
                }
            }
            Else
            {
                EM63 = One
            }
        }

        Method (K0_C, 1, NotSerialized)
        {
            OperationRegion (KX_X, SystemMemory, Arg0, 0x20)
            Field (KX_X, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                DATA,   8
            }

            If ((FUNC == Zero))
            {
                DATA = \_SB.PCI0.LPCB.EC0.RR_M (0x0511)
            }
            ElseIf ((FUNC == One))
            {
                DATA = \_SB.PCI0.LPCB.EC0.RR_M (0x0512)
            }
            ElseIf ((FUNC == 0x02))
            {
                DATA = \_SB.PCI0.LPCB.EC0.RR_M (0x0513)
            }
            Else
            {
                EM63 = One
            }
        }

        Method (K0_D, 1, NotSerialized)
        {
            OperationRegion (KX_X, SystemMemory, Arg0, 0x10)
            Field (KX_X, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                FREQ,   16
            }

            If ((FUNC == Zero))
            {
                Local0 = 0x017D7840
                Local1 = \_SB.PCI0.LPCB.EC0.RR_M (0xF4A0)
                Local1 += One
                Local2 = \_SB.PCI0.LPCB.EC0.RR_M (0xF4A2)
                Local2 += One
                Local2 *= Local1
                Divide (Local0, Local2, Local3, Local1)
                FREQ = Local1
            }
            ElseIf ((FUNC == One))
            {
                FREQ = Zero
            }
            Else
            {
                EM63 = One
            }
        }

        Method (K0_E, 1, NotSerialized)
        {
            OperationRegion (KX_X, SystemMemory, Arg0, 0x10)
            Field (KX_X, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                FANX,   8, 
                FAND,   8
            }

            If ((FUNC == Zero))
            {
                If ((FANX == Zero))
                {
                    FAND = \_SB.PCI0.LPCB.EC0.RF_O (Zero)
                }
                ElseIf ((FANX == One))
                {
                    FAND = \_SB.PCI0.LPCB.EC0.RF_O (One)
                }
                Else
                {
                    EM63 = One
                }
            }
            ElseIf ((FUNC == One))
            {
                If ((FANX == Zero))
                {
                    \_SB.PCI0.LPCB.EC0.WF_O (Zero, FAND)
                }
                ElseIf ((FANX == One))
                {
                    \_SB.PCI0.LPCB.EC0.WF_O (One, FAND)
                }
                Else
                {
                    EM63 = One
                }
            }
            Else
            {
                EM63 = One
            }
        }

        Method (K0_F, 1, NotSerialized)
        {
            OperationRegion (KX_X, SystemMemory, Arg0, 0x10)
            Field (KX_X, ByteAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM63,   8, 
                EM63,   8, 
                FUNC,   8, 
                FANX,   8, 
                DIFF,   8
            }

            If ((FUNC == Zero))
            {
                If ((FANX == Zero))
                {
                    DIFF = \_SB.PCI0.LPCB.EC0.RR_M (0x0564)
                }
                ElseIf ((FANX == One))
                {
                    DIFF = 0xFF
                }
                Else
                {
                    EM63 = One
                }
            }
            ElseIf ((FUNC == One))
            {
                If ((FANX == Zero))
                {
                    \_SB.PCI0.LPCB.EC0.WR_M (0x0564, DIFF)
                }
                ElseIf ((FANX == One)){}
                Else
                {
                    EM63 = One
                }
            }
            Else
            {
                EM63 = One
            }
        }
    }

    Scope (WMI0)
    {
        Method (LX_X, 5, NotSerialized)
        {
            If ((Arg2 != 0x64))
            {
                Return (Zero)
            }

            WSMI (Arg4)
            Return (Zero)
        }
    }

    Scope (WMI0)
    {
        Method (GX_X, 5, NotSerialized)
        {
            If ((Arg2 != 0x30))
            {
                Return (Zero)
            }

            OperationRegion (GX_X, SystemMemory, Arg0, 0x08)
            Field (GX_X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM30,   8, 
                EM30,   8
            }

            If ((Arg3 == One))
            {
                EM30 = G0_1 (Arg0)
            }
            ElseIf ((Arg3 == 0x02))
            {
                EM30 = G0_2 (Arg0)
            }
            ElseIf ((Arg3 == 0x83))
            {
                EM30 = G8_3 (Arg0)
            }
            ElseIf ((Arg3 == 0x84))
            {
                EM30 = G8_4 (Arg0)
            }
            ElseIf ((Arg3 == 0x80))
            {
                G8_0 (Arg0)
                EM30 = Zero
            }
            ElseIf ((Arg3 == 0x81))
            {
                G8_1 (Arg0)
                EM30 = Zero
            }
            ElseIf ((Arg3 == 0x82))
            {
                G8_2 (Arg0)
                EM30 = Zero
            }
            Else
            {
                EM30 = One
            }

            If ((EM30 == Zero))
            {
                SM30 = 0x80
            }
            Else
            {
                SM30 = 0x82
            }

            Return (Zero)
        }

        Method (G0_1, 1, NotSerialized)
        {
            OperationRegion (GX_X, SystemMemory, Arg0, 0x10)
            Field (GX_X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                ECMD,   8, 
                EDA1,   8, 
                EDA2,   8, 
                EDA3,   8, 
                EDA4,   8, 
                EDA5,   8
            }

            Local0 = \_SB.PCI0.LPCB.EC0.EX_T (ECMD, EDA1, EDA2, EDA3, EDA4, EDA5)
            EDA1 = DerefOf (Local0 [One])
            EDA2 = DerefOf (Local0 [0x02])
            EDA3 = DerefOf (Local0 [0x03])
            EDA4 = DerefOf (Local0 [0x04])
            EDA5 = DerefOf (Local0 [0x05])
            Return (DerefOf (Local0 [Zero]))
        }

        Method (G0_2, 1, NotSerialized)
        {
            OperationRegion (GX_X, SystemMemory, Arg0, 0x30)
            Field (GX_X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM30,   8, 
                EM30,   8, 
                BUSN,   8, 
                PROT,   8, 
                DADD,   8, 
                DREG,   8, 
                DAT0,   8, 
                DAT1,   8, 
                BLEN,   8, 
                REVB,   8, 
                BLK1,   32, 
                BLK2,   32, 
                BLK3,   32, 
                BLK4,   32, 
                BLK5,   32, 
                BLK6,   32, 
                BLK7,   32, 
                BLK8,   32
            }

            OperationRegion (GX_2, SystemMemory, Arg0, 0x30)
            Field (GX_2, ByteAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                BLKD,   256
            }

            If ((PROT == 0x0A))
            {
                Local0 = \_SB.PCI0.LPCB.EC0.ES_B (BUSN, PROT, DADD, DREG, BLEN, BLKD)
                Local2 = DerefOf (Local0 [Zero])
                Local2 &= 0x3F
                Return (Local2)
            }

            If ((PROT == 0x0B))
            {
                Local0 = \_SB.PCI0.LPCB.EC0.ES_B (BUSN, PROT, DADD, DREG, BLEN, BLKD)
                BLEN = DerefOf (Local0 [0x03])
                BLKD = DerefOf (Local0 [0x04])
                Local2 = DerefOf (Local0 [Zero])
                Local2 &= 0x3F
                Return (Local2)
            }

            Local0 = \_SB.PCI0.LPCB.EC0.ES_M (BUSN, PROT, DADD, DREG, DAT0, DAT1)
            DAT0 = DerefOf (Local0 [One])
            DAT1 = DerefOf (Local0 [0x02])
            BLEN = DerefOf (Local0 [0x03])
            Name (BKUF, Buffer (0x20){})
            CreateDWordField (BKUF, Zero, DD01)
            CreateDWordField (BKUF, 0x04, DD02)
            CreateDWordField (BKUF, 0x08, DD03)
            CreateDWordField (BKUF, 0x0C, DD04)
            CreateDWordField (BKUF, 0x10, DD05)
            CreateDWordField (BKUF, 0x14, DD06)
            CreateDWordField (BKUF, 0x18, DD07)
            CreateDWordField (BKUF, 0x1C, DD08)
            BKUF = DerefOf (Local0 [0x04])
            BLK1 = DD01
            BLK2 = DD02
            BLK3 = DD03
            BLK4 = DD04
            BLK5 = DD05
            BLK6 = DD06
            BLK7 = DD07
            BLK8 = DD08
            Local2 = DerefOf (Local0 [Zero])
            Local2 &= 0x3F
            Return (Local2)
        }

        Method (G8_4, 1, NotSerialized)
        {
            OperationRegion (GX_X, SystemMemory, Arg0, 0x10)
            Field (GX_X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                EVTP,   8, 
                EVID,   8
            }

            \_SB.PCI0.LPCB.EC0.EX_T (0xAE, EVTP, EVID, Zero, Zero, Zero)
            Return (Zero)
        }

        Method (G8_3, 1, NotSerialized)
        {
            OperationRegion (ECGC, SystemMemory, Arg0, 0x10)
            Field (ECGC, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM1X,   8, 
                EM1X,   8, 
                FUNC,   8, 
                PORT,   8, 
                PIND,   8, 
                DATA,   8
            }

            If ((FUNC == Zero))
            {
                DATA = \_SB.PCI0.LPCB.EC0.RP_N (PORT, PIND)
            }
            ElseIf ((FUNC == One))
            {
                \_SB.PCI0.LPCB.EC0.SP_N (PORT, PIND, DATA)
            }
            Else
            {
                Return (One)
            }

            Return (Zero)
        }

        Method (G8_0, 1, NotSerialized)
        {
            OperationRegion (GX_X, SystemMemory, Arg0, 0x20)
            Field (GX_X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                EFUN,   8
            }

            \_SB.PCI0.LPCB.EC0.WE_I ()
            \_SB.PCI0.LPCB.EC0.AEIC = 0xA7
            \_SB.PCI0.LPCB.EC0.WE_I ()
            \_SB.PCI0.LPCB.EC0.AEID = Zero
            \_SB.PCI0.LPCB.EC0.WE_I ()
            \_SB.PCI0.LPCB.EC0.AEID = EFUN
        }

        Method (G8_1, 1, NotSerialized)
        {
            OperationRegion (GX_X, SystemMemory, Arg0, 0x20)
            Field (GX_X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                EFUN,   8, 
                BATT,   8, 
                WRNT,   8
            }

            Local0 = Zero
            \_SB.PCI0.LPCB.EC0.WE_I ()
            \_SB.PCI0.LPCB.EC0.AEIC = 0x80
            \_SB.PCI0.LPCB.EC0.WE_I ()
            \_SB.PCI0.LPCB.EC0.AEID = 0x06
            \_SB.PCI0.LPCB.EC0.WE_I ()
            \_SB.PCI0.LPCB.EC0.AEID = 0x20
            \_SB.PCI0.LPCB.EC0.WE_O ()
            Local0 = \_SB.PCI0.LPCB.EC0.AEID
            If ((EFUN == One))
            {
                Local0 |= 0x80
                \_SB.PCI0.LPCB.EC0.WE_I ()
                \_SB.PCI0.LPCB.EC0.AEIC = 0x81
                \_SB.PCI0.LPCB.EC0.WE_I ()
                \_SB.PCI0.LPCB.EC0.AEID = 0x06
                \_SB.PCI0.LPCB.EC0.WE_I ()
                \_SB.PCI0.LPCB.EC0.AEID = 0x20
                \_SB.PCI0.LPCB.EC0.WE_I ()
                \_SB.PCI0.LPCB.EC0.AEID = Local0
                \_SB.PCI0.LPCB.EC0.WE_O ()
                WRNT = Local0
            }
            ElseIf ((EFUN == Zero))
            {
                Local0 &= 0x7F
                \_SB.PCI0.LPCB.EC0.WE_I ()
                \_SB.PCI0.LPCB.EC0.AEIC = 0x81
                \_SB.PCI0.LPCB.EC0.WE_I ()
                \_SB.PCI0.LPCB.EC0.AEID = 0x06
                \_SB.PCI0.LPCB.EC0.WE_I ()
                \_SB.PCI0.LPCB.EC0.AEID = 0x20
                \_SB.PCI0.LPCB.EC0.WE_I ()
                \_SB.PCI0.LPCB.EC0.AEID = Local0
                \_SB.PCI0.LPCB.EC0.WE_O ()
                WRNT = Local0
            }
        }

        Method (G8_2, 1, NotSerialized)
        {
            OperationRegion (GX_X, SystemMemory, Arg0, 0x20)
            Field (GX_X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                EFUN,   8, 
                WRNT,   8
            }

            Local0 = Zero
            \_SB.PCI0.LPCB.EC0.WE_I ()
            \_SB.PCI0.LPCB.EC0.AEIC = 0x80
            \_SB.PCI0.LPCB.EC0.WE_I ()
            \_SB.PCI0.LPCB.EC0.AEID = 0x05
            \_SB.PCI0.LPCB.EC0.WE_I ()
            \_SB.PCI0.LPCB.EC0.AEID = 0x20
            \_SB.PCI0.LPCB.EC0.WE_O ()
            Local0 = \_SB.PCI0.LPCB.EC0.AEID
            If ((EFUN == One))
            {
                Local0 |= 0x80
                \_SB.PCI0.LPCB.EC0.WE_I ()
                \_SB.PCI0.LPCB.EC0.AEIC = 0x81
                \_SB.PCI0.LPCB.EC0.WE_I ()
                \_SB.PCI0.LPCB.EC0.AEID = 0x05
                \_SB.PCI0.LPCB.EC0.WE_I ()
                \_SB.PCI0.LPCB.EC0.AEID = 0x20
                \_SB.PCI0.LPCB.EC0.WE_I ()
                \_SB.PCI0.LPCB.EC0.AEID = Local0
                \_SB.PCI0.LPCB.EC0.WE_O ()
                WRNT = Local0
            }
            ElseIf ((EFUN == Zero))
            {
                Local0 &= 0x7F
                \_SB.PCI0.LPCB.EC0.WE_I ()
                \_SB.PCI0.LPCB.EC0.AEIC = 0x81
                \_SB.PCI0.LPCB.EC0.WE_I ()
                \_SB.PCI0.LPCB.EC0.AEID = 0x05
                \_SB.PCI0.LPCB.EC0.WE_I ()
                \_SB.PCI0.LPCB.EC0.AEID = 0x20
                \_SB.PCI0.LPCB.EC0.WE_I ()
                \_SB.PCI0.LPCB.EC0.AEID = Local0
                \_SB.PCI0.LPCB.EC0.WE_O ()
                WRNT = Local0
            }
        }
    }

    Scope (WMI0)
    {
        Method (AX_X, 5, NotSerialized)
        {
            OperationRegion (AX_X, SystemMemory, Arg0, 0x08)
            Field (AX_X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM10,   8, 
                EM10,   8
            }

            If ((Arg2 != 0x10))
            {
                Return (Zero)
            }

            If ((Arg3 == One))
            {
                A0_1 (Arg0)
                EM10 = Zero
            }
            Else
            {
                EM10 = One
            }

            If ((EM10 == Zero))
            {
                SM10 = 0x80
            }
            Else
            {
                SM10 = 0x82
            }

            Return (Zero)
        }

        Method (A0_1, 1, NotSerialized)
        {
            OperationRegion (AX_X, SystemMemory, Arg0, 0x10)
            Field (AX_X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                DLTM,   16
            }

            RT_W = DLTM
        }
    }

    Scope (WMI0)
    {
        Method (BX_X, 5, NotSerialized)
        {
            OperationRegion (BX_X, SystemMemory, Arg0, 0x08)
            Field (BX_X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM11,   8, 
                EM11,   8
            }

            If ((Arg2 != 0x11))
            {
                Return (Zero)
            }

            If ((Arg3 == 0x02))
            {
                B0_2 (Arg0, Arg3)
                EM11 = Zero
            }
            ElseIf ((Arg3 == 0x04))
            {
                B0_4 (Arg0)
                EM11 = Zero
            }
            ElseIf ((Arg3 == 0x82))
            {
                B8_2 (Arg0)
            }
            Else
            {
                EM11 = One
            }

            If ((EM11 == Zero))
            {
                SM11 = 0x80
            }
            Else
            {
                SM11 = 0x82
            }

            Return (Zero)
        }

        Method (B0_2, 2, NotSerialized)
        {
            OperationRegion (BX_X, SystemMemory, Arg0, 0x30)
            Field (BX_X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                BATN,   8, 
                BATA,   8, 
                REGS,   8, 
                BDAT,   16, 
                BLEN,   8, 
                BREV,   16, 
                BLK1,   32, 
                BLK2,   32, 
                BLK3,   32, 
                BLK4,   32, 
                BLK5,   32, 
                BLK6,   32, 
                BLK7,   32, 
                BLK8,   32
            }

            If ((BATN >= One))
            {
                Return (0x11)
            }

            If ((BATA == Zero))
            {
                Local0 = \_SB.PCI0.LPCB.EC0.SR_T (\_SB.PCI0.LPCB.EC0.RDWD, \_SB.PCI0.LPCB.EC0.BADR, REGS)
                BDAT = DerefOf (Local0 [0x02])
                Local2 = DerefOf (Local0 [Zero])
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            If ((BATA == One))
            {
                Local0 = \_SB.PCI0.LPCB.EC0.SW_T (\_SB.PCI0.LPCB.EC0.WRWD, \_SB.PCI0.LPCB.EC0.BADR, REGS, 0x02, BDAT)
                Local2 = DerefOf (Local0 [Zero])
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            If ((BATA == 0x02))
            {
                Name (BKUF, Buffer (0x20){})
                Local0 = \_SB.PCI0.LPCB.EC0.SR_T (\_SB.PCI0.LPCB.EC0.RDBL, \_SB.PCI0.LPCB.EC0.BADR, REGS)
                BKUF = DerefOf (Local0 [0x02])
                BLEN = DerefOf (Local0 [One])
                Local2 = DerefOf (Local0 [Zero])
                CreateDWordField (BKUF, One, DAT1)
                CreateDWordField (BKUF, 0x05, DAT2)
                CreateDWordField (BKUF, 0x09, DAT3)
                CreateDWordField (BKUF, 0x0D, DAT4)
                CreateDWordField (BKUF, 0x11, DAT5)
                CreateDWordField (BKUF, 0x15, DAT6)
                CreateDWordField (BKUF, 0x19, DAT7)
                BKUF = DerefOf (Local0 [0x02])
                BLK1 = DAT1
                BLK2 = DAT2
                BLK3 = DAT3
                BLK4 = DAT4
                BLK5 = DAT5
                BLK6 = DAT6
                BLK7 = DAT7
                BLK8 = Zero
                BLEN = DerefOf (Local0 [One])
                Local2 = DerefOf (Local0 [Zero])
                Local2 &= 0x1F
                If (Local2)
                {
                    Local2 += 0x10
                }

                Return (Local2)
            }

            Return (0x10)
        }

        Method (B0_4, 1, NotSerialized)
        {
            OperationRegion (BX_X, SystemMemory, Arg0, 0x10)
            Field (BX_X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM11,   8, 
                EM11,   8, 
                ENBC,   8
            }

            H0_0 (ENBC)
        }

        Method (B8_2, 1, NotSerialized)
        {
            OperationRegion (BX_X, SystemMemory, Arg0, 0x10)
            Field (BX_X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM11,   8, 
                EM11,   8, 
                ENDI,   8
            }

            If ((ENDI == One))
            {
                H0_1 ()
            }
            Else
            {
                EM11 = One
            }
        }
    }

    Scope (WMI0)
    {
        Method (EX_X, 5, NotSerialized)
        {
            OperationRegion (EX_X, SystemMemory, Arg0, 0x08)
            Field (EX_X, DWordAcc, NoLock, Preserve)
            {
                Offset (0x06), 
                SM17,   8, 
                EM17,   8
            }

            If ((Arg2 != 0x17))
            {
                Return (Zero)
            }

            If ((Arg3 == 0x03))
            {
                E0_3 (Arg0)
                EM17 = Zero
            }
            Else
            {
                EM17 = One
            }

            If ((EM17 == Zero))
            {
                SM17 = 0x80
            }
            Else
            {
                SM17 = 0x82
            }

            Return (Zero)
        }

        Method (E0_3, 1, NotSerialized)
        {
            OperationRegion (EX_X, SystemMemory, Arg0, 0x20)
            Field (EX_X, ByteAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                ELEN,   8, 
                ECVR,   128
            }

            \_SB.PCI0.LPCB.EC0.WE_I ()
            \_SB.PCI0.LPCB.EC0.AEIC = 0x88
            Local0 = Zero
            Local1 = Zero
            Local2 = Zero
            Name (ECBF, Buffer (0x10){})
            While (One)
            {
                \_SB.PCI0.LPCB.EC0.WE_O ()
                Local1 = \_SB.PCI0.LPCB.EC0.AEID
                If ((Local1 != Zero))
                {
                    ECBF [Local0] = Local1
                    Local0 += One
                }

                If ((Local2 == 0x10))
                {
                    Break
                }

                Local2 += One
            }

            ELEN = Local0
            ECVR = ECBF
        }
    }

    Scope (WMI0)
    {
        Method (FX_X, 5, NotSerialized)
        {
            If ((Arg2 == 0x1F))
            {
                OperationRegion (FX_X, SystemMemory, Arg0, 0x08)
                Field (FX_X, DWordAcc, NoLock, Preserve)
                {
                    MFUN,   16, 
                    SFUN,   16, 
                    LEN,    16, 
                    STAS,   8, 
                    EROR,   8
                }

                WSMI (Arg4)
                STAS &= 0xFE
            }
        }
    }

    Scope (WMI0)
    {
        Method (MX_X, 5, NotSerialized)
        {
            If ((Arg2 == 0x80))
            {
                OperationRegion (MX_X, SystemMemory, Arg0, 0x08)
                Field (MX_X, DWordAcc, NoLock, Preserve)
                {
                    MFUN,   16, 
                    SFUN,   16, 
                    LEN,    16, 
                    STAS,   8, 
                    EROR,   8
                }

                WSMI (Arg4)
            }
        }
    }

    Scope (WMI0)
    {
        Method (FS_M, 1, NotSerialized)
        {
            FS_F = Arg0
            Local0 = (Arg0 | 0xA0)
            ISMI (0xDC)
            Return (FS_T)
        }

        Method (WF_S, 5, Serialized)
        {
            If ((Arg2 == 0x66))
            {
                If ((Arg3 == One))
                {
                    OperationRegion (\WFLS, SystemMemory, Arg0, 0x0100)
                    Field (WFLS, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0x06), 
                        STAS,   8, 
                        REST,   8, 
                        FS_F,   8, 
                        FS_T,   16, 
                        FA_D,   32, 
                        FS_Z,   16
                    }

                    STAS &= 0xFE
                    STAS |= 0x80
                    TT_P = 0xDC
                    \FS_F = FS_F
                    \FS_T = FS_T
                    \FA_D = FA_D
                    \FS_Z = FS_Z
                    If ((FS_F == One))
                    {
                        \FA_D = Arg1
                    }
                    ElseIf ((FS_F == 0x80))
                    {
                        FA_D = Arg1
                        Local0 = 0x012C
                        While ((Local0 && TT_P))
                        {
                            Sleep (One)
                            Local0--
                        }
                    }

                    ISMI (0xDC)
                    FS_F = \FS_F
                    FS_T = \FS_T
                    FA_D = \FA_D
                    FS_Z = \FS_Z
                    STAS &= 0xFE
                    STAS |= 0x80
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D"))  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Local0 = One
                Local0 = ^^PCI0.LPCB.EC0.RP_N (0x04, 0x06)
                If ((Local0 == Ones))
                {
                    Local0 = One
                }

                ^^PCI0.GFX0.CLID = Local0
                Return (Local0)
            }
        }
    }

    Scope (_SB.PCI0.LPCB.EC0)
    {
        Method (_Q81, 0, NotSerialized)  // _Qxx: EC Query
        {
            Notify (LID, 0x80)
        }
    }

    Scope (\)
    {
        Name (TSP, 0x0A)
        Name (TC1, 0x02)
        Name (TC2, 0x0A)
        Name (PSVF, Zero)
        Name (CRTF, Zero)
        Name (TCRT, 0x7F)
        Name (TPSV, 0x7F)
    }

    Scope (_TZ)
    {
        Method (CT_K, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0xFF)
            If ((Local0 >= 0x80))
            {
                Local0 = (0x0100 - Local0)
                Local0 *= 0x0A
                Local0 = (0x0AAC - Local0)
                Return (Local0)
            }

            Local0 *= 0x0A
            Local0 += 0x0AAC
            Return (Local0)
        }

        Method (KT_C, 1, NotSerialized)
        {
            Local0 = (Arg0 - 0x0AAC)
            Divide (Local0, 0x0A, Local1, Local0)
            Return (Local0)
        }

        Name (PLCY, Zero)
        ThermalZone (THRM)
        {
            Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
            {
                TCRT = \_SB.PCI0.LPCB.EC0.RC_R ()
                Return (CT_K (TCRT))
            }

            Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
            {
                Local1 = 0x05
                While (Local1)
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.RT_M ()
                    If ((Local0 > TCRT))
                    {
                        Local1--
                    }
                    Else
                    {
                        Local1 = Zero
                    }
                }

                Local2 = TCRT
                Local2--
                If ((Local0 > Local2))
                {
                    If ((PSVF == One))
                    {
                        Return (CT_K (Local2))
                    }
                    ElseIf ((CRTF == One))
                    {
                        Return (CT_K (Local0))
                    }

                    Return (CT_K (Local2))
                }

                Return (CT_K (Local0))
            }

            Method (_PSL, 0, NotSerialized)  // _PSL: Passive List
            {
            }

            Method (_TSP, 0, NotSerialized)  // _TSP: Thermal Sampling Period
            {
                Local0 = (TSP * 0x0A)
                Return (Local0)
            }

            Method (_TC1, 0, NotSerialized)  // _TC1: Thermal Constant 1
            {
                Return (TC1)
            }

            Method (_TC2, 0, NotSerialized)  // _TC2: Thermal Constant 2
            {
                Return (TC2)
            }

            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                TPSV = \_SB.PCI0.LPCB.EC0.RS_V ()
                Return (CT_K (TPSV))
            }

            Method (_SCP, 1, NotSerialized)  // _SCP: Set Cooling Policy
            {
                PLCY = Zero
                Notify (THRM, 0x81)
            }
        }
    }

    Scope (_SB)
    {
    }

    Scope (\)
    {
        Method (OE_S, 1, NotSerialized)
        {
            \_SB.PCI0.LPCB.EC0.SE_C (Arg0)
            ST_P = Arg0
            PR_J (Arg0)
        }

        Method (PR_J, 1, Serialized)
        {
            If (((Arg0 == 0x03) || (Arg0 == 0x04)))
            {
                If (\_SB.WMID.LMST)
                {
                    \_SB.WMID.BACE (Zero)
                }
            }
        }

        Method (OE_W, 1, NotSerialized)
        {
            PJ_W (Arg0)
        }

        Method (PJ_W, 1, Serialized)
        {
            Local0 = Zero
            Local0 = CTPF
            \_SB.SGOV (0x0103000A, Local0)
            Local1 = \_SB.PCI0.LPCB.EC0.RR_M (0x04A0)
            Local1 |= 0x88
            Local1 &= 0xFE
            \_SB.PCI0.LPCB.EC0.WR_M (0x04A0, Local1)
        }
    }

    Method (RP_L, 2, Serialized)
    {
        Return (Zero)
    }

    Scope (_SB.PCI0.LPCB.EC0)
    {
        Method (ST_B, 0, Serialized)
        {
        }
    }

    Scope (\)
    {
        Name (OSFG, Zero)
        Name (OSVT, 0x20)
    }

    Scope (_SB)
    {
        Name (ATKP, One)
    }

    Scope (_SB.PCI0.LPCB.EC0)
    {
        Name (FHKM, One)
        Method (FK_W, 0, Serialized)
        {
            While (!FHKM)
            {
                Sleep (0x0A)
            }

            FHKM = Zero
        }

        Method (FK_S, 0, Serialized)
        {
            FHKM = One
        }

        Method (SE_C, 1, NotSerialized)
        {
        }

        Method (WE_C, 1, NotSerialized)
        {
            If ((Arg0 <= 0x04))
            {
                Local0 = AC_F
                AC_F = AC_P ()
                DC_F = DC_P (Zero)
                If ((Local0 != AC_F))
                {
                    PNOT ()
                }
            }
        }

        OperationRegion (DEB0, SystemIO, 0x80, One)
        Field (DEB0, ByteAcc, NoLock, Preserve)
        {
            DBG8,   8
        }

        Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query
        {
            If ((OSYS < 0x07DC))
            {
                If (^^^^WMID.LMST)
                {
                    ^^^^WMID.HKEV (One, Zero)
                }
                Else
                {
                    Local0 = Zero
                    Local1 = Zero
                    If (WLDP)
                    {
                        Local0 = WRST
                        Local1 = One
                    }

                    If (BTDP)
                    {
                        Local0 |= (BRST << One)
                        Local1 = 0x02
                    }

                    If ((Local1 == One))
                    {
                        If ((WRST == One))
                        {
                            SGOV (0x01050004, Zero)
                            WRST = Zero
                        }
                        Else
                        {
                            SGOV (0x01050004, One)
                            WRST = One
                        }

                        Return (Zero)
                    }

                    If ((Local1 != Zero))
                    {
                        If ((Local0 == 0x03))
                        {
                            SGOV (0x01050004, Zero)
                            WRST = Zero
                            SGOV (0x01050003, Zero)
                            BRST = Zero
                        }
                        ElseIf ((Local0 == Zero))
                        {
                            SGOV (0x01050004, One)
                            WRST = One
                            SGOV (0x01050003, One)
                            BRST = One
                        }
                        Else
                        {
                            SGOV (0x01050004, One)
                            WRST = One
                            SGOV (0x01050003, One)
                            BRST = One
                        }
                    }
                }
            }
            Else
            {
                Notify (ARFB, 0x80)
            }
        }

        Method (_Q0A, 0, NotSerialized)  // _Qxx: EC Query
        {
            Notify (SLPB, 0x80)
        }

        Method (_QE2, 0, NotSerialized)  // _Qxx: EC Query
        {
            If ((Acquire (MUEC, 0xFFFF) == Zero))
            {
                Local0 = 0xFA
                While ((Local0 && (0x0F & ESEM)))
                {
                    Sleep (0x02)
                    Local0--
                }

                CMD1 = 0xE1
                ESEM = 0x0F
                Local0 = 0xFA
                While ((Local0 && CMD1))
                {
                    Sleep (0x02)
                    Local0--
                }

                If ((CMD1 == Zero))
                {
                    Local0 = One
                    ^^^^UBTC.CCI0 = EDA1
                    ^^^^UBTC.CCI1 = EDA2
                    ^^^^UBTC.CCI2 = EDA3
                    ^^^^UBTC.CCI3 = EDA4
                    ^^^^UBTC.MGI0 = EDA5
                    ^^^^UBTC.MGI1 = EDA6
                    ^^^^UBTC.MGI2 = EDA7
                    ^^^^UBTC.MGI3 = EDA8
                    ^^^^UBTC.MGI4 = EDA9
                    ^^^^UBTC.MGI5 = ED10
                    ^^^^UBTC.MGI6 = ED11
                    ^^^^UBTC.MGI7 = ED12
                    ^^^^UBTC.MGI8 = ED13
                    ^^^^UBTC.MGI9 = ED14
                    ^^^^UBTC.MGIA = ED15
                    ^^^^UBTC.MGIB = ED16
                    ^^^^UBTC.MGIC = ED17
                    ^^^^UBTC.MGID = ED18
                    ^^^^UBTC.MGIE = ED19
                    ^^^^UBTC.MGIF = ED20
                }
                Else
                {
                    Local0 = Ones
                }

                Release (MUEC)
            }

            Sleep (0x64)
            Notify (UBTC, 0x80)
        }

        Method (_QE3, 0, NotSerialized)  // _Qxx: EC Query
        {
            Sleep (0x64)
            Notify (UBTC, 0x80)
        }

        Method (_Q0E, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (^^^^WMID.LMST)
            {
                ^^^^WMID.HKEV (0x61, Zero)
            }
        }

        Method (_Q0F, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (^^^^WMID.LMST)
            {
                ^^^^WMID.HKEV (0x64, Zero)
            }

            Local0 = One
        }

        Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query
        {
            Local0 = CTPF
            Local0 ^= One
            CTPF = Local0
            If (^^^^WMID.LMST)
            {
                If ((Local0 & One))
                {
                    Local1 = One
                }
                Else
                {
                    Local1 = Zero
                }

                ^^^^WMID.HKEV (0x83, Local1)
            }

            SGOV (0x0103000A, Local0)
        }

        Name (KBCM, Zero)
        Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query
        {
            KBCM = One
            EX_T (0xC8, Zero, Zero, Zero, Zero, Zero)
            Local0 = KBLS
            Local0 &= 0x03
            If ((Local0 > Zero))
            {
                Local0--
            }

            KBLS = Local0
            If ((KBLS == Zero))
            {
                KBST = Zero
            }
            Else
            {
                KBST = One
            }

            If (^^^^WMID.LMST)
            {
                ^^^^WMID.HKEV (0x84, KBST)
            }
        }

        Method (_Q0C, 0, NotSerialized)  // _Qxx: EC Query
        {
            If ((OSYS >= 0x07D6))
            {
                BRTN (0x87)
                If (^^^^WMID.LMST)
                {
                    ^^^^WMID.HKEV (0x63, Zero)
                }
            }
        }

        Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query
        {
            If ((OSYS >= 0x07D6))
            {
                BRTN (0x86)
                If (^^^^WMID.LMST)
                {
                    ^^^^WMID.HKEV (0x62, Zero)
                }
            }
        }

        Method (_QD9, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (^^^^WMID.LMST)
            {
                ^^^^WMID.HKBE (Zero)
            }
        }

        Method (_QB0, 0, NotSerialized)  // _Qxx: EC Query
        {
            PSVF = Zero
            CRTF = Zero
            Local0 = RR_M (0x051C)
            Local1 = (Local0 & 0x02)
            If ((Local1 == 0x02))
            {
                CRTF = One
            }
            Else
            {
                Local1 = (Local0 & One)
                If ((Local1 == One))
                {
                    PSVF = One
                }
            }

            Notify (\_TZ.THRM, 0x80)
        }

        Method (_Q60, 0, NotSerialized)  // _Qxx: EC Query
        {
            DBG8 = 0x60
            If (^^^^WMID.LMST)
            {
                If ((GLCK == One))
                {
                    Notify (PWRB, 0x80)
                }
                Else
                {
                    ^^^^WMID.HKEV (0x87, Zero)
                }
            }
            Else
            {
                Notify (PWRB, 0x80)
            }
        }

        Method (_Q68, 0, NotSerialized)  // _Qxx: EC Query
        {
        }

        Method (_QA0, 0, NotSerialized)  // _Qxx: EC Query
        {
            If (AC_P ())
            {
                AC_F = One
                Local0 = 0x58
            }
            Else
            {
                AC_F = Zero
                Local0 = 0x57
                ^^^^WMID.BACE (Zero)
                Sleep (0x32)
            }

            PWRS = AC_F
            If (^^^^WMID.LMST)
            {
                Local0 = AP_S ()
                Sleep (0x14)
                ^^^^WMID.ACSE (Local0)
            }

            If ((OSFG < OSVT))
            {
                ST_B ()
            }

            Notify (AC0, 0x80)
            Sleep (0x14)
            PNOT ()
            Sleep (0x0A)
            NB_T (0x80)
        }

        Method (_QCC, 0, NotSerialized)  // _Qxx: EC Query
        {
            ^^^^WMID.BACE (One)
        }

        Method (_QA3, 0, NotSerialized)  // _Qxx: EC Query
        {
            Notify (BAT0, 0x80)
        }

        Method (_QA5, 0, NotSerialized)  // _Qxx: EC Query
        {
            Notify (BAT0, 0x80)
        }

        Method (_QAB, 0, NotSerialized)  // _Qxx: EC Query
        {
            Notify (PWRB, 0x80)
        }
    }

    Scope (\)
    {
        Method (H0_0, 1, NotSerialized)
        {
            Local0 = \_SB.PCI0.LPCB.EC0.RR_M (0x0288)
            Local1 = \_SB.PCI0.LPCB.EC0.RR_M (0x0298)
            If (((Local0 == 0x32) || ((Local0 == 0x10) || ((Local0 == 0x12) || (Local0 == 0x30)))))
            {
                If ((Arg0 == One))
                {
                    Local1 |= 0x20
                }
                Else
                {
                    Local1 &= 0xDF
                }

                \_SB.PCI0.LPCB.EC0.WR_M (0x0298, Local1)
            }
            ElseIf ((Local0 == 0x0B))
            {
                If ((Arg0 == One))
                {
                    Local1 |= 0x40
                }
                Else
                {
                    Local1 &= 0xBF
                }

                \_SB.PCI0.LPCB.EC0.WR_M (0x0298, Local1)
            }
        }

        Method (H0_1, 0, NotSerialized)
        {
            Local0 = \_SB.PCI0.LPCB.EC0.RR_M (0x07FE)
            Local0 |= 0x80
            \_SB.PCI0.LPCB.EC0.WR_M (0x07FE, Local0)
            \_SB.PCI0.LPCB.EC0.SW_T (0x08, 0x0B, 0x3A, Zero, 0xC574)
            \_SB.PCI0.LPCB.EC0.SW_T (0x08, 0x0B, 0x3A, Zero, 0xC574)
        }

        Method (H0_2, 0, NotSerialized)
        {
            Local1 = \_SB.PCI0.LPCB.EC0.RR_M (0x04A0)
            Local1 |= 0x88
            Local1 &= 0xFE
            \_SB.PCI0.LPCB.EC0.WR_M (0x04A0, Local1)
        }
    }

    Scope (_SB.PCI0.LPCB)
    {
        Device (PS2K)
        {
            Name (_HID, "10250759")  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0303"))  // _CID: Compatible ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0060,             // Range Minimum
                    0x0060,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0064,             // Range Minimum
                    0x0064,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IRQNoFlags ()
                    {1}
            })
        }

        Device (PS2M)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((TCTP == One))
                {
                    Return (0xB57D2E4F)
                }

                If ((TCTP == 0x02))
                {
                    Return (0x0A058416)
                }

                Return (0x0A058416)
            }

            Name (IOST, Zero)
            Name (_CID, Package (0x03)  // _CID: Compatible ID
            {
                EisaId ("SYN1B00"), 
                EisaId ("SYN0002"), 
                EisaId ("PNP0F13")
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSYS < 0x07DD))
                {
                    I2CT = Zero
                    Return (0x0F)
                }
                Else
                {
                    I2CT = One
                    Return (Zero)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQNoFlags ()
                    {12}
            })
        }
    }

    OperationRegion (KIRK, SystemIO, 0x80, One)
    Field (KIRK, ByteAcc, Lock, Preserve)
    {
        KIRP,   8
    }

    Name (APST, Zero)
    Scope (_SB.PCI0.LPCB.EC0)
    {
        Method (_Q99, 0, NotSerialized)  // _Qxx: EC Query
        {
            KIRP = 0x99
            Local0 = RR_M (0x0CC6)
            ACSP (Local0)
        }

        Method (_Q9A, 0, NotSerialized)  // _Qxx: EC Query
        {
            KIRP = 0x9A
            Local0 = RR_M (0x0CC6)
            DCSP (Local0)
        }

        Method (ACSP, 1, Serialized)
        {
            If (((Arg0 >= Zero) && (Arg0 <= 0x04)))
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Local2 = Zero
                        KIRP = 0xA0
                    }
                    Case (One)
                    {
                        Local2 = Zero
                        KIRP = 0xA1
                    }
                    Case (0x02)
                    {
                        Local2 = One
                        KIRP = 0xA2
                    }
                    Case (0x03)
                    {
                        Local2 = One
                        KIRP = 0xA3
                    }
                    Case (0x04)
                    {
                        Local2 = One
                        KIRP = 0xA4
                    }
                    Default
                    {
                        Local2 = Zero
                    }

                }

                If ((Local2 == One))
                {
                    SGOV (0x01030009, Zero)
                }
                Else
                {
                    SGOV (0x01030009, One)
                }
            }
        }

        Method (DCSP, 1, Serialized)
        {
            If (((Arg0 >= Zero) && (Arg0 <= 0x04)))
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Local2 = Zero
                        KIRP = 0xB0
                    }
                    Case (One)
                    {
                        Local2 = Zero
                        KIRP = 0xB1
                    }
                    Case (0x02)
                    {
                        Local2 = One
                        KIRP = 0xB2
                    }
                    Case (0x03)
                    {
                        Local2 = One
                        KIRP = 0xB3
                    }
                    Case (0x04)
                    {
                        Local2 = One
                        KIRP = 0xB4
                    }
                    Default
                    {
                        Local2 = Zero
                    }

                }

                If ((Local2 == One))
                {
                    SGOV (0x01030009, Zero)
                }
                Else
                {
                    SGOV (0x01030009, One)
                }
            }
        }
    }
}

